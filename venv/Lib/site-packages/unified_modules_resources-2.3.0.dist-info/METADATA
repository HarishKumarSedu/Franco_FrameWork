Metadata-Version: 2.1
Name: unified-modules-resources
Version: 2.3.0
Summary: Unified Modules resources framework
Home-page: https://docs.cirrus.com/display/ST/Unified+Testing
License: UNKNOWN
Platform: osx
Platform: win32
Requires-Python: >=3.7.5
Requires-Dist: artifactory
Requires-Dist: lxml
Requires-Dist: paramiko
Requires-Dist: pyftpdlib
Requires-Dist: pyserial
Requires-Dist: xmltodict
Requires-Dist: pyyaml
Requires-Dist: psutil
Requires-Dist: pyvisa
Requires-Dist: switch
Requires-Dist: pylink-square
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: matplotlib (==3.3.0)
Requires-Dist: sounddevice
Requires-Dist: soundfile
Requires-Dist: rython
Requires-Dist: pyusb
Requires-Dist: libusb
Requires-Dist: saleae (==0.9.1)
Requires-Dist: scp
Requires-Dist: nidaqmx
Requires-Dist: ftd2xx
Requires-Dist: gcovr
Requires-Dist: brainstem
Requires-Dist: pythonnet

Unified Modules resources
=========================

Next generation Cirrus SQA team's set of test modules.


Description
-----------

The Unified Modules package is a set of Python modules designed for ease the
writing of tests. It is developed by the Cirrus SQA team and focuses on code
re-usability.

This sub-package contains Unified Modules' resource library, distributed as the
``unified-modules-resources`` package. Please note that this package depends on
``unified-modules-core``.


Installation
------------

Unified Modules' resource library depends on a few packages that are not
available on the public ``pypi.org`` index. These packages are hosted on CLPypi,
Cirrus' private Python package index. The recommended way of accessing that
index is to reference it as an extra index in ``pip``'s configuration.

Locate or create your ``pip``'s user configuration file, on Windows at
``%USERPROFILE%\pip\pip.ini``, on macOS at ``$HOME/.config/pip/pip.conf`` and
add to it::

    [global]
    extra-index-url = https://aus-art-prod-01.ad.cirrus.com/artifactory/api/pypi/CLPyPi_Local/simple

Unified Modules' resource library has ``setuptools`` support. The current,
proper, way of installing it is to generate a ``wheel`` package from its sources
and install that package using ``pip``.

To generate the ``wheel`` package, run from the ``resources`` source
directory:

.. code-block:: sh

    $ python setup.py bdist_wheel

After execution, package should have been generated in the ``dist`` subfolder.

The generated package can then be installed running:

.. code-block:: sh

    $ python -m pip install <unified-modules-resources-package>.whl


Execution
---------

Every resources from the Unified Modules' resource library define their own
end-point. Theses modules can be called from anywhere by running, for example:

.. code-block:: sh

    $ python -m unified_modules.resources.resource_scslinkapi <arguments>


Development
-----------

Developers can install Unified Modules' resource library package in a special
mode called editable mode. In that mode, sources can be modified in place
without having to generate and reinstall the ``wheel`` package for every change
made to the code.

To install the package in editable mode, run, from the ``resources`` directory:

.. code-block:: sh

    $ python -m pip install --user --editable .


Testing
-------

Unified Modules' resource library comes with a ``unittest`` test suite. In order
to execute that test suite, simply run, from the ``resources`` directory:

.. code-block:: sh

    $ python setup.py test


