from abc import ABC, abstractmethod
from cl_instr_lib.base_classes.pyro_isinstance import PyroIsinstance

class PSChannel_ABC(PyroIsinstance):
    """Defines the minimal set of attributes / methods for a PowerSupply output Channel. Substitution of supply models
    in test programs can be achieved provided programs only depend on capabilities the models have in common.  """

    def __init__(self, power_supply, channel_name, programming_bounds, **kwargs):
        """
        Creates a channel object that corresponds to a power supply output.

        :param power_supply: Parent object representing power supply this channel is part of.
        :param channel_name: Corresponds to name of output on supply
        :param programming_bounds: Named tuple (or other structure) defining allowable voltage and current settings
        """

        # print("PSChannel_ABC.__init__")

        #: Attribute containing reference to the Power Supply object that contains this Channel instance.
        self.power_supply = power_supply

        #: Attribute containing the string name of this Channel instance.
        self.channel_name = channel_name

        #: Attribute containing min and max values for voltage and current of this Channel instance.
        self.programming_bounds = programming_bounds

    # def get_mro(self):
    #     """
    #     You can move this wherever you want, this allows any Driver to return a list of it's inheritance structure.
    #     :return: List[str] List containing its class name and the class names of all of its parent classes
    #     """
    #     return [c.__name__ for c in self.__class__.__mro__ if c is not object]

    @abstractmethod
    def source_voltage(self, voltage=None, current_limit=None, *args, **kwargs):
        # Note it is up to the implementation to support forcing_ranges if supply has them.
        pass

    @abstractmethod
    def measure_voltage(self):
        pass

    @abstractmethod
    def measure_current(self):
        pass

    @abstractmethod
    def output_state(self, on_off=None):
        pass

    # Note the assumption there is no supply that is only a current source.


class PSChannel_VI_ABC(PSChannel_ABC):
    def __init__(self, **kwargs):
        # print("PSChannel_VI_ABC.__init__")
        super().__init__(**kwargs)

    def source_current(self, current=None, voltage_limit=None, *args, **kwargs):
        # Note it is up to the implementation to support forcing_ranges if supply has them.
        pass
