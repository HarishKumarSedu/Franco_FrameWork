from cl_instr_lib.base_classes.tek_afg.afg_3k_base import Afg3kBase, Channel

from collections import namedtuple
from enum import Enum

ProgrammingBounds = namedtuple('ProgrammingBounds', ['load_z_min', 'load_z_max',
                                                     'ampl_pp_hiz_min', 'ampl_pp_hiz_max',  # TODO: ampl max depends on
                                                     # freq
                                                     'phase_min', 'phase_max',
                                                     'offset_hiz_min', 'offset_hiz_max',
                                                     'voltage_window_hiz_min', 'voltage_window_hiz_max',
                                                     'freq_min', 'freq_max',
                                                     'freq_sine_burst_min', 'freq_sine_burst_max',
                                                     'freq_arb_burst_min', 'freq_arb_burst_max',
                                                     'ramp_symmetry_min', 'ramp_symmetry_max',
                                                     'edge_min',
                                                     'duty_min', 'duty_max',
                                                     'noise_percent_max',
                                                     'am_depth_percent_max',
                                                     'fm_deviation_max',
                                                     'pm_deviation_max',
                                                     'mod_freq_internal_min', 'mod_freq_internal_max',  # AM,FM,PM,PWM
                                                     'fsk_keyrate_min', 'fsk_keyrate_max',
                                                     'hop_freq_hz_max',
                                                     'burst_ncycles_min', 'burst_ncycles_max',
                                                     'burst_tdelay_sec_max']
                               )

ProgrammingRange = namedtuple('ProgrammingRange', 'MIN MAX')

class Afg30kBase(Afg3kBase):
    """Base class for Driver class Tektronix AFG30k family."""

    def __init__(self, visa_resource_name, chan_pgm_bounds, logger=None, **kwargs):

        # Setup the simulation code inherited from Instrument.
        super().__init__(visa_resource_name, chan_pgm_bounds, logger, **kwargs)

        # Second, the two channels differ in that CH2 cannot sum with the EXT input.
        enum_combine_ch1 = Enum('enum_combine_ch1',
                                {'OFF': '""', 'NOISE': '"NOIS"', 'EXTERNAL': '"EXT"', 'BOTH': '"BOTH"'})
        enum_combine_ch2 = Enum('enum_combine_ch2', {'OFF': '""', 'NOISE': '"NOIS"'})

        delattr(self, 'CH1')  # Recreating these two object for overriding certain methods. Temporary workaround.
        delattr(self, 'CH2')  # Recreating these two object for overriding certain methods. Temporary workaround.
        self.CH1 = Afg30kChannel(self, 'CH1', 1, chan_pgm_bounds, enum_combine_ch1)
        self.CH2 = Afg30kChannel(self, 'CH2', 2, chan_pgm_bounds, enum_combine_ch2)

        delattr(self, 'arb_waveforms')  # Remove until supported in AFG30k series.
        self.arb_waveforms = 'Arbitrary waveforms not yet supported for AFG30k series instruments.'

class Afg30kChannel(Channel):
    """Temporary Child Class to override methods that are currently unsupported by AFG30k series"""

    def __init__(self, signal_generator, channel_name, channel_id, programming_bounds, enum_combine):
        super().__init__(signal_generator=signal_generator, channel_name=channel_name, channel_id=channel_id,
                         programming_bounds=programming_bounds, enum_combine=enum_combine)
        delattr(self, 'arb_waveforms')  # Remove until supported in AFG30k series.
        self.arb_waveforms = 'Arbitrary waveforms not yet supported for AFG30k series instruments.'

    def config_am(self):
        raise RuntimeError('config_am not yet supported for AFG30k series instruments.')

    def config_fm(self):
        raise RuntimeError('config_am not yet supported for AFG30k series instruments.')

    def config_pm(self):
        raise RuntimeError('config_am not yet supported for AFG30k series instruments.')

    def config_pwm(self):
        raise RuntimeError('config_am not yet supported for AFG30k series instruments.')

    def config_pwm(self):
        raise RuntimeError('config_fsk not yet supported for AFG30k series instruments.')

    def config_burst(self):
        raise RuntimeError('config_burst not yet supported for AFG30k series instruments.')

    def config_sweep(self):  # , mode, hold_time, return_time, sweep_spacing, sweep_time, start_freq, stop_freq):
        raise RuntimeError("Sweep functionality not implemented yet!")