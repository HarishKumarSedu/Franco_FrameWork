from enum import Enum
from typing import Union
from cl_instr_lib.helpers.check_range import check_range, min_max_units
from cl_instr_lib.helpers.check_enum_str import check_enum_str

class Power:
    """Class abstracting power functionality for SMB signal generators RF output."""

    def __init__(self, channel):
        self.log = channel.log
        self.write = channel.write
        self.query = channel.query

        if channel.channel_name == 'RF':
            self.source = ''
        elif channel.channel_name == 'LF':
            self.source = 'LFO:'
        else:
            raise ValueError(f'Bad channel: {channel.channel_name}.')

        self.enum_mode = Enum('enum_mode', {'FIXED': 'CW', 'SWEEP': 'SWE'})
        self.power_min_max = min_max_units(-145, 30, 'dbm')

    # TODO: Implement mode method when more modes for RF level output are flushed out.
    # def mode(self, mode: str = None):
    #     """
    #     Set or query the mode in which level operates. Set a fixed level output or sweep the output.
    #
    #     :param mode: Mode to set instrument level configuration into. Accepts 'FIXED' or 'SWEEP'
    #     :type mode: str
    #     :return: Current Mode
    #     :rtype: str
    #     """
    #
    #     # [:SOURce<hw>]:POWer:MODE <Mode>
    #
    #     # Readback
    #     if mode is None:
    #         return self.query('POW:MODE?', self.enum_mode).name
    #     # Parameter Checking and Instrument Write
    #     else:
    #         mode = check_enum_str('mode', mode, self.enum_mode)
    #         self.write('POW:MODE', mode.value)

    # TODO: Flesh out function_level with all level functionality. offset, limits, sweeps, units, etc.
    def function_level(self, amplitude: Union[int, float] = None) -> float:
        """
        Set or query the RF output level. Method currently only sets a constant level. Sweep and lists are not yet
        supported.

        dBm is the only unit of measurement.

        :param amplitude: Value to set RF output level to in dBm
        :type amplitude: int|float
        :return: Current RF output level in dBm
        :rtype: float
        """

        # [:SOURce <hw>]:POWer:POWer <Power>

        # Readback
        if amplitude is None:
            return self.query('POW:POW?', float)
        # Parameter Checking and Instrument Write
        else:
            check_range('amplitude', amplitude, self.power_min_max)
            self.write('POW:POW', amplitude)
