class OscopeChannel:
    def __init__(self, scope, channel_number, **kwargs):
        self.scope = scope
        self.log = scope.log
        self.write = scope.write
        self.query = scope.query
        self.on_off = scope.on_off
        self.log_inst_errors = scope.log_inst_errors
        self.log_unused_args = scope.log_unused_args
        self.channel_number = channel_number

    def get_probe_type(self):
        """Returns probe type connected to the channel"""
        return self.query(f"CH{self.channel_number}:PRO:ID:TYP", str).strip('"').strip()

    def display(self, state=None):
        """
        Query or change the display state of the channel.

        :param state: 'ON', 1, True corresponds to displayed; 'OFF', 0, False corresponds to not displayed.
        :type state: str|int|bool
        :return: 'ON' or 'OFF'
        :rtype: str
        """

        if state is None:
            return self.on_off.to_api(self.query(f"DIS:GLO:CH{self.channel_number}:STATE", int))

        on_off = self.on_off.to_inst(state)
        self.write(f"DIS:GLO:CH{self.channel_number}:STATE", on_off)
