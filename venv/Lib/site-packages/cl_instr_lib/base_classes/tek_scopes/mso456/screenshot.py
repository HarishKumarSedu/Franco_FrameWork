from enum import Enum
from cl_instr_lib.helpers.check_enum_str import check_enum_str
from pathlib import PureWindowsPath

class Screenshot:
    """Provides methods to perform screenshots (captures) either transferring them to PC as they are created or
    leaving them on the scope filesystem for transfer to the PC later."""

    def __init__(self, scope, **kwargs):
        self.scope = scope

        # Some local attributes that lets us access these more easily and naturally.
        self.log = scope.log
        self.write = scope.write
        self.query = scope.query
        self.log_inst_errors = scope.log_inst_errors
        self.get_inst_errors = scope.get_inst_errors
        self.log_unused_args = scope.log_unused_args

        self.enum_palette = Enum('enum_palette', {  # MSO456 redefines this to SAVe:IMAGe:COMPosition
            # 'BW': 'BLACKANDWHITE',  # Not supported on MSO456 as of Programmers Manual 077-1305-16.
            'COLOR': 'NORMAL',
            'COLOR_INV': 'INVERTED',
            'INKSAVER': 'INVERTED',   # For backwards compatibility with 5000 series.
        })
        self.enum_view = Enum('enum_view', {
            'FULLSCREEN': 'FULLSCREEN',
            # 'GRATICULE': 'GRATICULE',      # Not supported on MSO456 as of Programmers Manual 077-1305-16.
            # 'FULLNOmenu': 'FULLNOMENU'
        })

        # To create a screenshot, it first has to be saved to the oscope filesystem, then it can be  transferred to
        # the PC via GPIB.

        # This can be done in one method call using save_on_pc. In the scope the directory
        # "C:/Users/Public/Tektronix/TekScope/Screen Captures" is used to create the screenshot. Tek states that this
        # is the default location. However, this class provides the config method which can be used to redefine the
        # location in the scope that is used by save_on_pc.

        # Alternatively, the method save_on_scope can be used to take screenshots and leave them in the scope at
        # directory locations you specify in calls to save_on_scope. This might be advantageous in some testing
        # scenarios, reduce time spent at low temperature for example. See the scope filesystem.scope_files_to_pc method
        # for the means to then copy the files en-mass to the PC.

        # Define default scope location for creating screenshots using save_on_pc.
        self.scope_temp_dir = ''
        self.config(scope_temp_dir='C:/Users/Public/Tektronix/TekScope/Screen Captures')

    def save_on_scope(self, scope_dir, filename, create_scope_dir=False):
        r"""
        Performs a screenshot using the current screenshot config settings and stores the screenshot in the
        *oscope* filesystem.

        These files can later be copied to the PC later using filesystem.scope_files_to_pc. Note that save_on_pc
        combines these two operations.

        :param scope_dir: Directory in oscope where file will be created. Note: use r (raw) string or use '/' to avoid
            parts of your path string being mistaken for an escape sequence (e.g. \\n).
        :type scope_dir: str
        :param filename: The filename including extension to be used on the PC. The extension must be one of '.bmp',
            '.jpg', '.png'. It determines the format of the file produced by the scope.
        :type filename: str
        :param create_scope_dir: If scope_dir does not exist and create_scope_dir is True, the directory will be created
            in the scope filesystem. Defaulted to false to prevent a typo in scope_dir from re-directing the file to
            some new random place.
        :type create_scope_dir: bool
        """

        # SAVe:IMAGe <QString>

        p = PureWindowsPath(filename)
        suffix = p.suffix.upper()
        supported = ['.BMP', '.JPG', '.PNG']
        if suffix not in supported:
            msg = ', '.join([f"'{s}'" for s in supported])
            raise ValueError(f"Bad filename '{filename}' suffix '{suffix}', should be one of: {msg}.")

        pwp = PureWindowsPath(scope_dir, filename)  # combine the dir and the filename
        path = pwp.as_posix()   # gets us single forward slashes '/' instead of the double backslashes '\\'.

        # print(f"Combined scope_dir and path length={len(path)}")

        # if len(path) > 127:
        #     raise ValueError(f"Scope limit of 128 characters exceeded for path '{path}'. Try a shorter "
        #                      "scope_dir and/or filename.")

        exists = self.scope.filesystem.is_scope_dir(scope_dir)
        if not exists:
            if create_scope_dir:
                self.scope.filesystem.create_scope_path(scope_dir)
                self.log.info(f"Scope dir '{scope_dir}' did not exist, created it.")
            else:
                raise ValueError(f"Bad scope_dir '{scope_dir}', does not exist in the scope filesystem. Set "
                                 f"create_scope_dir=True to force creation of directories.")

        self.write('SAV:IMAG', f'"{path}"')
        timeout_old = self.scope.rm_handle.timeout
        self.scope.rm_handle.timeout = 12000  # 12 seconds. Found that MSO46 needed this. MSO58 did not.
        self.query('*OPC')
        self.scope.rm_handle.timeout = timeout_old
        self.log_inst_errors()

    # def get_as_data(self, transfer_mode='b', image_format='png', temp_dir=None, read_timeout_ms=None):
    #     """
    #     Performs screenshot using to current config parameters and returns the binary or text data
    #     representation of the screenshot. Creates a temporary file in the temp_dir directory of the scope and
    #     then deletes it.
    #
    #     :param transfer_mode: 'BINARY' or 'TEXT'
    #     :type transfer_mode: enum_transfer_mode | str
    #     :param image_format: Determines the format of the screenshot. In the other methods, format is determined by
    #         the file extension.
    #     :type image_format: str
    #     :param temp_dir: Directory in oscope where temp file will be created. If None, will try C:/Temp and oscope
    #         Current Working Directory (CWD). If those fail an exception will be raised.
    #     :type temp_dir: None | a directory path
    #     :param read_timeout_ms: Visa timeout value to use for this operation. Previous timeout value is restored
    #        before return. Usually not needed but can be useful if problems are encountered.
    #     :type read_timeout_ms: None|numeric
    #     :return:
    #     :rtype:
    #     """
    #
    #     # FILESystem:READFile <filepath>
    #     # FILESystem:DELEte
    #
    #     # Call save_on_scope with temp location, then transfer via GPIB, then delete temp file.
    #     self.log.warning("screenshot.get_as_data not implemented!")
    #     pass

    def save_on_pc(self, pc_dir, filename, create_pc_dir=False, read_timeout_ms=None):
        r"""
        Performs screenshot according to current config and transfers resulting file to PC filesystem in one
        operation.

        A convenience method that combines save_on_scope and filesystem.scope_files_to_pc.

        :param pc_dir: The destination directory on the PC. Note: use r (raw) string or use '/' to avoid parts of your
            path string being mistaken for an escape sequence (e.g. \\n).
        :type pc_dir: str
        :param filename: The filename including extension to be used on the PC. The extension must be one of '.bmp',
            '.jpg', '.png'. It determines the format of the file the scope produces.
        :type filename: str
        :param create_pc_dir: If pc_dir doesn't exist, it gets created if this is True.
        :type create_pc_dir: bool
        :param read_timeout_ms: Visa timeout value to use for this operation. Previous timeout value is restored
           before return. Usually not needed but can be useful if problems are encountered.
        :type read_timeout_ms: None|numeric
        """

        self.save_on_scope(self.scope_temp_dir, filename)
        self.scope.filesystem.scope_files_to_pc(self.scope_temp_dir, filename, pc_dir, create_pc_dir=create_pc_dir,
                                                mode='b', read_timeout_ms=read_timeout_ms)

    def config(self, palette=None, view=None, scope_temp_dir=None, *args, **kwargs):
        """
        Query or set parameters that alter screen shot appearance and define scope directory used by the
        save_on_pc method as a scratchpad for screenshot creation.

        :param palette: Select the normal or inverted color scheme for the screenshot: 'COLORS_NORM', 'COLORS_INV'.
        :type palette: enum_palette|str
        :param view: Changes the extent of the image that is saved. On MSO 4,5,6 models FULL is only option supported.

            'FULL'
                Screenshot includes the entire screen of the scope: windows menu at the top, the graticule and any
                configuration menu panel that is open (e.g Trigger Menu, etc). Note: this doesn't work to capture the
                on-line help screens.

        :type view: enum_view | str
        :param scope_temp_dir: Defaults to *'C:/Users/Public/Tektronix/TekScope/Screen Captures'*. The method
            save_on_pc uses the scope_temp_dir to create the screenshot file which is then copied to the PC.
            Ordinarily, there would be no reason to change scope_temp_dir from this default. The ability to change it
            may be useful to workaround to some unforeseen problem such as the overall length of the file path which is
            limited to 128 characters by the scope.
        :type scope_temp_dir: None | a directory path
        """

        # SAVe:IMAGe:COMPosition {NORMal|INVErted}
        # SAVe:IMAGe:VIEWTYpe {FULLScreen}

        self.log_unused_args(args, kwargs)

        if all([v is None for v in (palette, view, scope_temp_dir)]):
            return_values = {}
            return_values.update(palette=self.query('SAV:IMAG:COMP', self.enum_palette).name)
            return_values.update(view=self.query('SAV:IMAG:VIEWTY',  self.enum_view).name)
            return_values.update(scope_temp_dir=self.scope_temp_dir)
            return return_values

        palette = check_enum_str('palette', palette, self.enum_palette)
        view = check_enum_str('view', view, self.enum_view)

        if scope_temp_dir is not None:
            if not self.scope.filesystem.is_scope_dir(scope_temp_dir):
                self.scope.filesystem.create_scope_path(scope_temp_dir)
                self.log.info(f"Created new screenshot.scope_temp_dir that didn't previously exist: "
                              f"'{scope_temp_dir}'.")

            if not self.scope.filesystem.is_writable_dir(scope_temp_dir):
                raise ValueError(f"Bad scope_temp_dir'{scope_temp_dir}', could not be created or is not writable."
                                 f"Previous screenshot.scope_temp_dir '{self.scope_temp_dir}' remains in effect.")

            self.scope_temp_dir = scope_temp_dir

        if palette is not None:
            self.write('SAV:IMAG:COMP', palette.value)
        if view is not None:
            self.write('SAV:IMAG:VIEWTY', view.value)
