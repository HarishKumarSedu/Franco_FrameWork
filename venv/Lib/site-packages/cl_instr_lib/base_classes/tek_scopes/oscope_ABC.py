from abc import ABC, abstractmethod
from cl_instr_lib.base_classes.instrument_visa import InstrumentType

class OscopeABC(ABC, metaclass=InstrumentType):
    def __init__(self):
        pass

    @abstractmethod
    def acquire(self, state=None, stop_after=None, sample_mode=None, num_averages=None, *args, **kwargs):
        """
        Query all or set any combination of scope acquisition related parameters.

        :param state: 'RUN' or 'STOP"
        :param stop_after: 'RUNSTOP' or 'SEQ'
        :param sample_mode: 'SAMPLE', 'PEAK', 'HIRES', 'AVE', or 'ENV'
        :param num_averages: 2, 4, 8, 16, 32, 64, 128, 256, 512. Applies only when sample_mode='AVE'.

        :return: Query is returned as a dict of parameter name-value pairs.
        """

        # TODO: Not sure if num_averages or num_envelopes is universal enough to be included here.
        pass

    @abstractmethod
    def cursors(self, kind, source, direction, linked, cursor_units, *args, **kwargs):

        # TODO: Not sure if there is any universal way to specify some basic cursor operations.
        pass

    @abstractmethod
    def horiz_config(self, scale=None, delay_mode=None, position_pcnt=None, delay_time=None, *args, **kwargs):
        """
        Queries all or sets any combination of horizontal parameters.

        :param scale: seconds per horizontal division
        :param delay_mode: 'OFF' is horiz position as % of record length. 'ON' is delay time from trigger.
        :param position_pcnt: Shifts view of the captured record from 0 to 100 % point. Takes effect when delay_mode is
            'OFF'.
        :param delay_time: Delay in seconds from trigger point. Takes effect when delay_mode is 'ON'.

        :return: Query (all input parameters None) returns a dict of parameter name-value pairs. Values read from scope.
        """

        pass

    @abstractmethod
    def measure(self, *args, **kwargs):
        # TODO: Not sure if there is any universal way to specify some basic measurements.
        pass

    @abstractmethod
    def menu(self, on_off):
        # TODO: Confirm that all scope have some way of turning this on / off.
        pass

    @abstractmethod
    def screen_capture(self, filename, *args, **kwargs):
        pass

    @abstractmethod
    def vert_chan_onoff(self, on_list=None, off_list=None):
        """
        Query or specify which channels are displayed and which are not. Allows all changes to be made in a
        single call.

        :param on_list: List of channel numbers to display.
        :param off_list: List of channel numbers to not display. Takes precedence.
        :return: Query (all input parameters None) returns a dict of parameter name-value pairs. Values read from
        scope.
        """
        pass

    @abstractmethod
    def vert_chan_config(self, chan, scale=None, coupling=None, termination=None, invert=None, bandwidth=None,
                        label=None,
                        offset=None, position=None, *args, **kwargs):
        """
        Query all or set any combination of oscope vertical parameters for a specified channel.

        :param chan: int channel number
        :param scale: volts per division
        :param coupling: 'AC', 'DC', 'GND'
        :param termination: 1e6 or 50
        :param invert: 'ON' or 'OFF'
        :param bandwidth: 20e6, 250e6, and numeric val corresponding to full BW.
        :param label: str up to 30 characters.
        :param offset: voltage, range depends on scale and coupling. Will warn on out-of-bounds, but scope will
        set to
            min/max allowed.
        :param position: -8 to +8 divisions.
        :return: Query (all input parameters None) returns a dict of parameter name-value pairs. Values read from
        scope.
        """

        pass


