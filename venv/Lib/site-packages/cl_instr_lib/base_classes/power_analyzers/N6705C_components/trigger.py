# -----------------------------------------------------------
#                          INCLUDES
# -----------------------------------------------------------
# Include python libraries
from enum import Enum
# Include Instrument Drivers/Helpers
from cl_instr_lib.helpers.check_enum_str import check_enum_str
from cl_instr_lib.helpers.check_range import check_range
from cl_instr_lib.helpers.file_io import check_filename

# -----------------------------------------------------------
#                            NOTES
# -----------------------------------------------------------
# TODO Configure digital pins to be dynamic and add them to available trigger sources
# -----------------------------------------------------------
#                            CLASS
# -----------------------------------------------------------


# noinspection PyProtectedMember
class Trigger:
    """Class for controlling the Trigger sub-system on the Keysight N6705C Modular DC Power Analyzer.

    Used for setup, initiating, and stopping trigger models.
    """

    def __init__(self, pow_ana):
        self.write = pow_ana.write
        self.query = pow_ana.query
        self.read_raw = pow_ana.read_raw
        self.log = pow_ana.log
        self._check_channel = pow_ana._check_channel
        self._check_multi_channels = pow_ana._check_multi_channels
        self._check_module = pow_ana._check_module
        self._models_tuple = pow_ana._models_tuple
        self._channel_dict = pow_ana._channel_dict
        self._raise_error_check_all_channels = pow_ana._raise_error_check_all_channels
        self.log_inst_errors = pow_ana.log_inst_errors
        self.get_inst_errors = pow_ana.get_inst_errors
        self.on_off = pow_ana.on_off
        self.enum_acq_source = pow_ana._enum_acq_source
        self.enum_elog_source = pow_ana._enum_elog_source
        self._enum_dlog_source = pow_ana._enum_dlog_source
        self.enum_hist_source = pow_ana._enum_hist_source
        self.enum_tran_source = pow_ana._enum_tran_source

        #: Object containing the `Trigger.Datalog`_  methods.
        self.datalog = Datalog(self)

    # trigger subsystem
    # --------------------------
    # TRIGger

    enum_func_abort = Enum("enum_func_abort", {"ACQUIRE": ":ACQ", "DATALOG": ":DLOG", "EXTERNAL_DLOG": ":ELOG",
                                               "HISTOGRAM": ":HIST", "TRANSIENT": ":TRAN"})
    enum_func_init = enum_func_abort
    enum_func_trig = enum_func_abort

    enum_slope = Enum("enum_slope", {'POSITIVE': "POS", 'NEGATIVE': "NEG"})
    enum_trig_sources = Enum("enum_trig_sources", {'BUS': "BUS", 'EXTERNAL': "EXT", 'IMMEDIATE': "IMM"})

    def trig_activate(self, channel, function="ACQUIRE"):
        """
        Sends an immeadiate trigger to the measurement system.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * [int(1-4)] - list of integer values representing multiple channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | list | channel_obj
        :param function: Function specifying the trigger system being accessed. One of the following:

            * ACQUIRE - Triggers the measurement immediately. (DEFAULT)
            * DATALOG - Triggers the internal data logger immediately.
            * EXTERNAL_DLOG - Triggers the external data logger immediately.
            * HISTOGRAM - Triggers the current histogram immediately. (N6781A, N6782A, N6785A, N6786A)
            * TRANSIENT - Triggers the output immediately.
        :type function: str | enum_func_trig
        """
        #  TRIGger:ACQuire[:IMMediate] (@chanlist) Triggers the measurement immediately
        #  TRIGger:DLOG[:IMMediate] Triggers the internal data logger immediately
        #  TRIGger:ELOG[:IMMediate] (@chanlist) Triggers the external data logger immediately
        #  TRIGger:HISTogram[:IMMediate] (@chanlist) Triggers the current histogram immediately (N6781A, N6782A,
        #  N6785A, N6786A)
        #  TRIGger:TRANsient[:IMMediate] (@chanlist) Triggers the output immediately

        # check all parameters
        channel_str, channel_objs = self._check_multi_channels(channel)
        function_obj = check_enum_str('function', function, self.enum_func_trig)

        cmd_header = "TRIG" + function_obj.value
        if function_obj.name == 'DATALOG':
            self.write(cmd_header)
        else:
            self.write(cmd_header, channel_str)
        self.log_inst_errors()

    def abort(self, channel, function="ACQUIRE"):
        """
        Terminates a trigger system.

        :param function: Function specifying the trigger system being accessed. One of the following:

            * ACQUIRE - Resets the measurement trigger system to the Idle state. (DEFAULT)
            * DATALOG - Stops the internal datalogger.
            * EXTERNAL_DLOG - Stops the external datalogger.
            * HISTOGRAM - Stops the histogram current measurement. (N6781A, N6782A, N6785A, N6786A)
            * TRANSIENT - Resets the transient trigger system to the Idle state.
        :type function: str | enum_func_abort
        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * [int(1-4)] - list of integer values representing multiple channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | list | channel_obj
        """
        #  ABORt:ACQuire (@chanlist) Resets the measurement trigger system to the Idle state
        #  ABORt:DLOG Stops the internal datalogger
        #  ABORt:ELOG (@chanlist) Stops the external datalogger
        #  ABORt:HISTogram (@chanlist) Stops the histogram current measurement (N6781A, N6782A, N6785A, N6786A)
        #  ABORt:TRANsient (@chanlist) Resets the transient trigger system to the Idle state

        # check all parameters
        channel_str, channel_objs = self._check_multi_channels(channel)
        function_obj = check_enum_str('function', function, self.enum_func_abort)

        if function_obj.name == "HISTOGRAM":  # check for special histogram module attached
            required_models = ['N6781A', 'N6782A', 'N6785A', 'N6786A']
            for module in channel_objs:
                if self._check_module(module.model, required_models) is None:  # not a valid model
                    self._raise_error_check_all_channels(required_models)

        cmd_header = "ABOR" + function_obj.value
        if function_obj.name == 'DATALOG':
            self.write(cmd_header)
        else:
            self.write(cmd_header, channel_str)
        self.log_inst_errors()

    def initiate(self, channel, function="ACQUIRE", dlog_filename=None):
        """
        Enables a trigger system.

        :param function: Function specifying the trigger system being accessed. One of the following:

            * ACQUIRE - Enables measurement triggers. (DEFAULT)
            * DATALOG - Enables the data logger function.
            * EXTERNAL_DLOG - Enables external data logger measurements.
            * HISTOGRAM - Enables histogram measurements. (N6781A, N6782A, N6785A, N6786A)
            * TRANSIENT - Enables output triggers.
        :type function: str | enum_func_init
        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * [int(1-4)] - list of integer values representing multiple channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | list | channel_obj
        :param dlog_filename: Datalog filename. Only needed for specifying datalogger systems.
        :type dlog_filename: str
        """
        #  INITiate[:IMMediate]:ACQuire (@chanlist) Enables measurement triggers
        #  INITiate[:IMMediate]:DLOG <“filename”> Enables the data logger function
        #  INITiate[:IMMediate]:ELOG (@chanlist) Enables external data logger measurements
        #  INITiate[:IMMediate]:HISTogram (@chanlist) Enables histogram measurements
        #  (N6781A, N6782A, N6785A, and N6786A)
        #  INITiate[:IMMediate]:TRANsient (@chanlist) Enables output triggers

        # check all parameters
        channel_str, channel_objs = self._check_multi_channels(channel)
        function_obj = check_enum_str('function', function, self.enum_func_abort)

        if function_obj.name == "HISTOGRAM":  # check for special histogram module attached
            required_models = ['N6781A', 'N6782A', 'N6785A', 'N6786A']
            for module in channel_objs:
                if self._check_module(module.model, required_models) is None:  # not a valid model
                    self._raise_error_check_all_channels(required_models)

        cmd_header = "INIT" + function_obj.value
        if function_obj.name == 'DATALOG':
            check_filename(dlog_filename)
            self.write(cmd_header, f'"{dlog_filename}"')
        else:
            self.write(cmd_header, channel_str)
        self.log_inst_errors()

    def initiate_continuous_transient(self, channel, enable=None):
        """
        This command continuously enables the output trigger system. This allows multiple triggers to generate
        multiple output transients with no intermediate commands.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param enable: on_off value ('ON'/'OFF' preferred) that activates the continuous transient inits.
        :type enable: str | int | bool
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: str | None
        """
        #  :CONTinuous:TRANsient <Bool>,(@chanlist)Enables/disables continuous transient triggers
        channel_str, channel_obj = self._check_channel(channel)
        if enable is None:
            return self.on_off.to_api(self.query("INIT:CONT:TRAN", str, channel_str))

        target = f'{self.on_off.to_inst(enable)}, {channel_str}'
        self.write("INIT:CONT:TRAN", target)
        self.log_inst_errors()

    def setup_current(self, channel, level=None, slope=None):
        """
        Command and query parameters that setup the trigger system for current measurements.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param level: Triggered level of the specified output channel when the measurement trigger source is
            set to current. Units are in amps.
        :type level: int | float
        :param slope: This command sets the slope of the signal of the specified output channel when the
            trigger source for the measurement is set to a level.
        :type slope: str | enum_slope
        """
        #  TRIGger:ACQuire:CURRent[:LEVel] <NRf>, (@chanlist) Sets the current trigger level
        #  TRIGger:ACQuire:CURRent:SLOPe POSitive | NEGative (@chanlist) Sets the current trigger slope

        channel_str, channel_obj = self._check_channel(channel)

        if all(param is None for param in (level, slope)):
            ret_value = {}
            ret_value.update(level=self.query("TRIG:ACQ:CURR", float, channel_str))
            ret_value.update(slope=self.query("TRIG:ACQ:CURR:SLOP", self.enum_slope, channel_str).name)
            return ret_value

        # check all parameters
        check_range('level', level, channel_obj.voltage_range)
        slope_obj = check_enum_str('slope', slope, self.enum_slope)

        # write to inst and log errors
        if level is not None:
            target = f'{level}, ' + channel_str
            self.write("TRIG:ACQ:CURR", target)
        if slope_obj is not None:
            target = f'{slope_obj.value}, ' + channel_str
            self.write("TRIG:ACQ:CURR:SLOP", target)

        self.log_inst_errors()

        pass

    def setup_voltage(self, channel, level=None, slope=None):
        """
        Command and query parameters that setup the trigger system for voltage measurements.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param level: Triggered level of the specified output channel when the measurement trigger source is
            set to voltage. Units are in volts.
        :type level: int | float
        :param slope: This command sets the slope of the signal of the specified output channel when the
            trigger source for the measurement is set to a level.
        :type slope: str | enum_slope
        """
        #  TRIGger:ACQuire:VOLTage[:LEVel] <NRf>, (@chanlist) Sets the voltage trigger level
        #  TRIGger:ACQuire:VOLTage:SLOPe POSitive | NEGative,(@chanlist)  Sets the voltage trigger slope

        channel_str, channel_obj = self._check_channel(channel)

        if all(param is None for param in (level, slope)):
            ret_value = {}
            ret_value.update(level=self.query("TRIG:ACQ:VOLT", float, channel_str))
            ret_value.update(slope=self.query("TRIG:ACQ:VOLT:SLOP", self.enum_slope, channel_str).name)
            return ret_value

        # check all parameters
        check_range('level', level, channel_obj.voltage_range)
        slope_obj = check_enum_str('slope', slope, self.enum_slope)

        # write to inst and log errors
        if level is not None:
            target = f'{level}, ' + channel_str
            self.write("TRIG:ACQ:VOLT", target)
        if slope_obj is not None:
            target = f'{slope_obj.value}, ' + channel_str
            self.write("TRIG:ACQ:VOLT:SLOP", target)

        self. log_inst_errors()

    def output(self, channel, enable=None):
        """
        This command enables measurement triggers to be sent to any digital port pin that has been configured as
        a trigger output.

        When a measurement is initiated, the MEAS_active status bit is set true, allowing measurement triggers to be
        sent. Measurement triggers can continue to be sent until the measurement completes or is aborted and the
        MEAS_active status is set false.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param enable: on_off value ('ON'/'OFF' preferred) that activates measurement triggers on digital port pins.
        :type enable: str | int | bool
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: str | None
        """
        #  TRIGger:ACQuire:TOUTput[:ENABle] <Bool>,(@chanlist)
        #  Enables measurement triggers to be sent to a digital port pin

        channel_str, channel_obj = self._check_channel(channel)
        if enable is None:
            return self.on_off.to_api(self.query("TRIG:ACQ:TOUT", str, channel_str))

        self.write("TRIG:ACQ:TOUT", self.on_off.to_inst(enable))
        self.log_inst_errors()

    def arb_source(self, source=None):
        """
        Command and query the trigger source for arbitrary waveforms

        :param source: This command selects the trigger source for the arbitrary waveforms. The following trigger
            sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * EXTERNAL - Selects the rear panel Trigger In BNC connector.
            * IMMEDIATE - Triggers the arbitrary waveform immediately.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: str | None
        """
        #  TRIGger:ARB:SOURce BUS | IMMediate | EXTernal Sets the arbitrary waveform trigger source
        if source is None:
            return self.query("TRIG:ARB:SOUR", self.enum_trig_sources).name

        source_obj = check_enum_str('source', source, self.enum_trig_sources)
        self.write("TRIG:ARB:SOUR", source_obj.value)
        self.log_inst_errors()

    def acq_source(self, channel, source=None):
        """
        Command and query the trigger source for the measurement trigger system.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param source: The following trigger sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * CURRENT(n) - Selects an output current level. <n> specifies the channel
            * VOLTAGE(n) - Selects an output voltage level. <n> specifies the channel.
            * EXTERNAL - Selects ALL connector pins that have been configured as trigger sources.
            * TRANSIENT(n) - Selects the transient system of an output channel as the trigger source.
              <n> specifies the channel.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: dict | None
        """
        # TRIGger:ACQuire:SOURce <source>, (@chanlist) Sets the measurement trigger source <source> = BUS,
        #   CURRent<n>,EXTernal, PIN<n>, TRANsient<n>, VOLTage<n>

        channel_str, channel_obj = self._check_channel(channel)

        if source is None:
            return self.query("TRIG:ACQ:SOUR", self.enum_acq_source, channel_str).name

        source_obj = check_enum_str('source', source, self.enum_acq_source)
        target = f"{source_obj.value}, " + channel_str
        self.write("TRIG:ACQ:SOUR", target)
        self.log_inst_errors()

    def external_dlog_source(self, channel, source=None):
        """
        Command and query the trigger source for the external datalog system.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param source: The following trigger sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * EXTERNAL - Selects the rear panel Trigger In BNC connector and any digital port pin that has been
              configured as a trigger input.
            * IMMEDIATE - Sets the trigger source true, so that as soon as the external data logger is
              INITiated it will send the trigger immediately.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: dict | None
        """
        #  TRIGger:ELOG:SOURce <source>, (@chanlist) Sets the external data logger trigger source
        # <source> = BUS, EXTernal, IMMediate, PIN<n>

        channel_str, channel_obj = self._check_channel(channel)

        if source is None:
            return self.query("TRIG:ACQ:SOUR", self.enum_elog_source, channel_str).name

        source_obj = check_enum_str('source', source, self.enum_elog_source)

        if source_obj is not None:
            target = f"{source_obj.value}, " + channel_str
            self.write("TRIG:ACQ:SOUR", target)

        self.log_inst_errors()

    def histogram_source(self, channel, source=None):
        """
        Command and query the trigger source for the histogram system.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param source: The following trigger sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * EXTERNAL - Selects the rear panel Trigger In BNC connector and any digital port pin that has been
              configured as a trigger input.
            * IMMEDIATE - Sets the trigger source true, so that as soon as the external data logger is
              INITiated it will send the trigger immediately.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: dict | None
        """
    # TRIGger:HISTogram:SOURce <source>, (@chanlist) Sets the current histogram trigger source (N6781A, N6782A, N6785A,
    # N6786A)
    # <source> = BUS, EXTernal, IMMediate, PIN<n>

        required_models = ['N6781A', 'N6782A', 'N6785A', 'N6786A']
        channel_str, channel_obj = self._check_channel(channel)

        # Cause invalid channels to trigger the error message creation below.
        if self._check_module(channel_obj.model, required_models) is None:  # not a valid model
            self._raise_error_check_all_channels(required_models)

        if source is None:
            return self.query("TRIG:ACQ:SOUR", self.enum_hist_source, channel_str).name

        source_obj = check_enum_str('source', source, self.enum_hist_source)

        if source_obj is not None:
            target = f"{source_obj.value}, " + channel_str
            self.write("TRIG:ACQ:SOUR", target)

        self.log_inst_errors()

    def transient_source(self, channel, source=None):
        """
        Command and query the trigger source for the transient system.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param source: The following trigger sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * EXTERNAL - Selects the rear panel Trigger In BNC connector and any digital port pin that has been
              configured as a trigger input.
            * IMMEDIATE - Sets the trigger source true, so that as soon as the external data logger is
              INITiated it will send the trigger immediately.
            * TRANSIENT_CH<x> - Selects the transient system of an output channel as the trigger source. <x> specifies
              the channel.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: dict | None
        """
        #  TRIGger:TRANsient:SOURce <source>, (@chanlist) Sets the output trigger source <source> = BUS, EXTernal,
        # IMMediate, PIN<n>, TRANsient<n>

        channel_str, channel_obj = self._check_channel(channel)

        if source is None:
            return self.query("TRIG:ACQ:SOUR", self.enum_tran_source, channel_str).name

        source_obj = check_enum_str('source', source, self.enum_tran_source)

        if source_obj is not None:
            target = f"{source_obj.value}, " + channel_str
            self.write("TRIG:ACQ:SOUR", target)

        self.log_inst_errors()


# noinspection PyProtectedMember
class Datalog:
    def __init__(self, trigger):
        self.write = trigger.write
        self.query = trigger.query
        self.read_raw = trigger.read_raw
        self.log = trigger.log
        self._check_channel = trigger._check_channel
        self._check_multi_channels = trigger._check_multi_channels
        self.log_inst_errors = trigger.log_inst_errors
        self.get_inst_errors = trigger.get_inst_errors
        self.enum_dlog_source = trigger._enum_dlog_source
        self.on_off = trigger.on_off
        self.enum_slope = trigger.enum_slope
        self.enum_trig_sources = trigger.enum_trig_sources

    def setup_current(self, channel, level=None, slope=None):
        """
        Command and query parameters that setup the trigger system for datalog current measurements.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param level: Triggered level of the specified output channel when the measurement trigger source is
            set to current. Units are in amps.
        :type level: int | float
        :param slope: This command sets the slope of the signal of the specified output channel when the
            trigger source for the measurement is set to a level.
        :type slope: str | enum_slope
        """
        #  TRIGger:DLOG:CURRent[:LEVel] <NRf>, (@chanlist) Sets the current trigger level of the data logger
        #  TRIGger:DLOG:CURRent:SLOPe POSitive | NEGative, (@chanlist)
        #  Sets the current trigger slope of the data logger

        channel_str, channel_obj = self._check_channel(channel)

        if all(param is None for param in (level, slope)):
            ret_value = {}
            ret_value.update(level=self.query("TRIG:DLOG:CURR", float, channel_str))
            ret_value.update(slope=self.query("TRIG:DLOG:CURR:SLOP", self.enum_slope, channel_str).name)
            return ret_value

        # check all parameters
        check_range('level', level, channel_obj.voltage_range)
        slope_obj = check_enum_str('slope', slope, self.enum_slope)

        # write to inst and log errors
        if level is not None:
            target = f'{level}, ' + channel_str
            self.write("TRIG:DLOG:CURR", target)
        if slope_obj is not None:
            target = f'{slope_obj.value}, ' + channel_str
            self.write("TRIG:DLOG:CURR:SLOP", target)

        self.log_inst_errors()

        pass

    def setup_voltage(self, channel, level=None, slope=None):
        """
        Command and query parameters that setup the trigger system for datalog voltage measurements.

        :param channel: Channel to which the changes are taking place. One of the following:

            * 1-4 - integer value representing a single channel of the four possible channels.
            * N6705C.ch[1-4] - channel object representing a single channel of the four possible channels.
        :type channel: int | channel_obj
        :param level: Triggered level of the specified output channel when the measurement trigger source is
            set to voltage. Units are in volts.
        :type level: int | float
        :param slope: This command sets the slope of the signal of the specified output channel when the
            trigger source for the measurement is set to a level.
        :type slope: str | enum_slope
        """
        #  TRIGger:DLOG:VOLTage[:LEVel] <NRf>, (@chanlist) Sets the voltage trigger level of the data logger
        #  TRIGger:DLOG:VOLTage:SLOPe POSitive | NEGative, (@chanlist)
        #  Sets the voltage trigger slope of the data logger

        channel_str, channel_obj = self._check_channel(channel)

        if all(param is None for param in (level, slope)):
            ret_value = {}
            ret_value.update(level=self.query("TRIG:DLOG:VOLT", float, channel_str))
            ret_value.update(slope=self.query("TRIG:DLOG:VOLT:SLOP", self.enum_slope, channel_str).name)
            return ret_value

        # check all parameters
        check_range('level', level, channel_obj.voltage_range)
        slope_obj = check_enum_str('slope', slope, self.enum_slope)

        # write to inst and log errors
        if level is not None:
            target = f'{level}, ' + channel_str
            self.write("TRIG:DLOG:VOLT", target)
        if slope_obj is not None:
            target = f'{slope_obj.value}, ' + channel_str
            self.write("TRIG:DLOG:VOLT:SLOP", target)

        self.log_inst_errors()

    def source(self, source=None):
        """
        Command and query the trigger source for datalog system.

        :param source: This command selects the trigger source for the arbitrary waveforms. The following trigger
            sources can be selected:

            * BUS - Selects a remote interface trigger command.
            * CURRENT(n) - Selects the measured current-level of a specific channel.
            * EXTERNAL - Selects the rear panel Trigger In BNC connector.
            * IMMEDIATE - Triggers the arbitrary waveform immediately.
            * VOLTAGE(n) - Selects the measured voltage-level of a specific channel.
            * ARB_RUN_STOP_KEY - Selects the Arb Run/Stop key.
            * OUT_ON_OFF_KEY - Selects the Output On/Off keys and the All Outputs On/Off keys.
        :type source: str | enum_trig_sources
        :return: If called empty, returns the method's parameters reflecting the state of the instrument.
        :rtype: str | None
        """
        #  TRIGger:DLOG:SOURce <source> Sets the internal data logger trigger source <source> = BUS,
        # CURRent<n>, EXTernal, IMMediate, VOLTage<n>, ARSK, OOOK

        if source is None:
            return self.query("TRIG:DLOG:SOUR", self.enum_dlog_source).name

        source_obj = check_enum_str('source', source, self.enum_dlog_source)
        self.write("TRIG:DLOG:SOUR", source_obj.value)
        self.log_inst_errors()

# -----------------------------------------------------------
#                          END OF FILE
# -----------------------------------------------------------
