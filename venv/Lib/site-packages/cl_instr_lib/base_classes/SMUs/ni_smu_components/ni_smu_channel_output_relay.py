import logging
from enum import Enum

from cl_instr_lib.base_classes.SMUs.ni_smu_components.ni_smu_channel import NiSmuChannel, ProgrammingBounds, \
    CompensationBounds
from cl_instr_lib.helpers.check_enum_str import check_enum_str


class NiSmuChannelOutputRelay(NiSmuChannel):
    """Extends NiSmuChannel class to for those SMUs whose channels include a disconnect relay.
    """

    enum_relay_state = Enum('enum_relay_state', {'OPEN': False, 'CLOSED': True})

    def __init__(self, smu_obj, channel_name, channel_id, programming_bounds):
        super().__init__(smu_obj, channel_name, channel_id, programming_bounds)

    def disconnect_relay(self, relay_state=None, allow_hot_switch=False):
        """
        Read state of output disconnect relay or change its state.
        
        :param relay_state: 'OPEN' or 'CLOSED' or corresponding element of the enum.
        :type relay_state: str|enum_relay_state
        :param allow_hot_switch: Default value is False. This raises exception if you attempt to switch the relay
            while the channel output is in the 'ON' state. Set this to True to override and switch it anyway,
            in which case a warning will be generated.
        :type allow_hot_switch: bool
        :return: Query form returns 'OPEN' or 'CLOSED'.
        :rtype: dict|None
        """
        
        if relay_state is None:
            return self.enum_relay_state(self.session.channels[self.channel_id].output_connected).name

        # Raises ValueError if not enum element or one of the enum str names.
        state = check_enum_str('relay_state', relay_state, self.enum_relay_state)

        if self.output_state() == 'ON':
            if allow_hot_switch:
                self.log.warn("Switching disconnect_relay with output_state='ON' could cause damage.")
            else:
                raise ValueError("Attempt to hot switch disconnect_relay. Call with allow_hot_switch=True if you "
                                 "really want to do this.")

        self.session.channels[self.channel_id].output_connected = state.value
