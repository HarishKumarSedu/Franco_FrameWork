from abc import ABC, abstractmethod
from cl_instr_lib.base_classes.pyro_isinstance import PyroIsinstance


class SGChannel_ABC(PyroIsinstance):
    """
    Defines the minimal set of attributes / methods for a Signal Generator output Channel.

    Substitution of supply models in test programs can be achieved provided programs only depend on capabilities the
    models have in common.
    """

    def __init__(self, signal_generator, channel_name, programming_bounds, **kwargs):
        """
        Creates a channel object that corresponds to a power supply output.

        :param signal_generator: Parent object representing signal generator this channel is part of.
        :param channel_name: Corresponds to name of output on generator
        :param programming_bounds: Named tuple (or other structure) defining allowable voltage and current settings
        """

        # print("SGChannel_ABC.__init__")

        #: Attribute containing reference to the Signal Generator object that contains this Channel instance.
        self.signal_generator = signal_generator

        #: Attribute containing the string name of this Channel instance.
        self.channel_name = channel_name

        #: Attribute containing min and max values for impedance and amplitude of this Channel instance.
        self.programming_bounds = programming_bounds

    @abstractmethod
    def output_state(self, on_off=None):
        pass
