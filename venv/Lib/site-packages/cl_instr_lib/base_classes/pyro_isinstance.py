from abc import ABCMeta, ABC

class InstrumentType(ABCMeta):
    """Meta Class that overrides isinstance() and checks if a PyroReceiver represents a specific Driver
    """

    def __instancecheck__(self, instance):  # This internal function gets called with isinstance()
        if hasattr(instance, 'get_mro'):  # get_mro() is defined in the Instrument Baseclass
            return self.__name__ in instance.get_mro()  # __name__ is the name of the actual driver class
        else:
            return super().__instancecheck__(instance)  # Use python's implementation otherwise

class PyroIsinstance(ABC, metaclass=InstrumentType):
    def get_mro(self):
        """
        Allows any Driver to return a list of it's inheritance structure.

        :return: List[str] List containing its class name and the class names of all of its parent classes
        """

        return [c.__name__ for c in self.__class__.__mro__ if c is not object]
