# -----------------------------------------------------------
from time import sleep
from time import time
# -----------------------------------------------------------


def user_delay(wait_for_user=True, delay_time=0):
    """
    Wait function that allows a script to wait for user input or delay for a
    period of time (defaulted to zero).

    :param wait_for_user: Has the script wait for the user to press enter
    :type wait_for_user: bool
    :param delay_time: If enable is false, wait for delay time.
    :type delay_time: int | float
    :return:
    :rtype: None
    """

    if wait_for_user:
        print('Press Enter to continue.')
        input()
    else:
        print(f'Delaying for {delay_time} seconds.')
        wait_visualizer(delay_time)


# -----------------------------------------------------------
def wait_visualizer(seconds=1):
    """Displays a swirling icon while sleeping.

    :param seconds: time in seconds to wait
    :type seconds: int
    :return: True value
    :rtype: bool
    """

    swirl_list = ['|', "/", "-", "\\"]
    for i in range(seconds):
        for x in swirl_list:
            print(f"waiting..... [{x}]\r", end="")
            sleep(0.25)
    print("Done!")
    return True


# -----------------------------------------------------------
def progress_bar(progress, total, bar_length=50, load_statement="loading"):
    percent = (progress/total)
    progress = int(percent*bar_length)
    loading_bar = "â–ˆ"*progress + '-'*(bar_length-progress)
    print(f"{load_statement}:"+loading_bar + f" {round(percent*100, 1)}%\r", end="")
    if percent == 1.0:
        print("\n")  # needed to preserve the loading bar.


# -----------------------------------------------------------
def seconds_to_hms(total_time_seconds):
    hours = int(total_time_seconds / 3600)
    minutes = int(total_time_seconds / 60) - (hours * 60)
    seconds = int(total_time_seconds) - (hours * 3600) - (minutes * 60)
    return hours, minutes, seconds

# -----------------------------------------------------------
def rt_wait_visualizer(seconds=1):
    """Displays a swirling icon while real time passes.

    :param seconds: time in seconds to wait
    :type seconds: int | float
    :return: True value
    :rtype: bool
    """

    tick = time()
    wait_timer = 0.25
    index = 0
    i = 0
    swirl_list = ['|', "/", "-", "\\"]

    while i < seconds:

        if time() >= (tick + wait_timer):  # if there has been wait_timer seconds since initial tick
            print(f"waiting..... [{swirl_list[index]}]\r", end="")
            tick = time()
            index += 1
            i += 1

        if index > 3:
            index = 0

    print("Done!")
    return True

# -----------------------------------------------------------
