# -----------------------------------------------------------
from collections import namedtuple
min_max_units = namedtuple('min_max_units', ['min', 'max', 'units'])
# -----------------------------------------------------------


def check_range(name, value, range_tuple, error_template=None, val_type=None, cast_type=None):
    """
    Helper function that checks if a value is within the min and max of a given range.

    :param name: Name of the value
    :type name: str
    :param value: A value to be checked against the range
    :type value: int | float
    :param range_tuple: A named tuple containing the minimum, maximum values the value parameter
    :type range_tuple: min_max_units
    :param error_template: If None default default f-string used to generate the error message. See
    :type error_template: str
    :param val_type: Data type the value is checked against (int or float). If None, value could be either int or float.
    :type val_type: None | class | str
    :param cast_type: Data type returned. if specified, casts to (int or float).
    :type cast_type: None | class | str
    """

    if value is None:  # if the value is None return None.
        return None

    # restrict the values to certain types, defaulting to (int,float) accepted.
    if val_type is None:
        if not isinstance(value, (int, float)):  # if the value is Not an Int or Float, throw an error.
            raise ValueError(f"Bad {name} {value} of type: {type(value)}. Should be int or float type.")

    elif val_type in [int, 'int']:
        if not isinstance(value, int):  # if the value is Not an Int, throw an error.
            raise ValueError(f"Bad {name} {value} of type: {type(value)}. Should be int type.")

    elif val_type in [float, 'float']:
        if not isinstance(value, float):  # if the value is Not a Float, throw an error.
            raise ValueError(f"Bad {name} {value} of type: {type(value)}. Should be float type.")

    else:  # Implementation of this check has caused an error to occur
        raise ValueError(f'Bad val_type {val_type}. Should be int, float, or None.')

    if not(range_tuple.min <= value <= range_tuple.max):

        if error_template is None:
            error_template = "Bad {name} {value}. Should be between {min} to {max}"
            if len(range_tuple.units)  > 0:
                error_template += ' {units}'
            error_template += '.'
        raise ValueError(error_template.format(name=name, value=value, min=range_tuple.min, max=range_tuple.max,
                                               units=range_tuple.units))

    if cast_type in [int, 'int']:
        value = int(value)
    elif cast_type in[float, 'float']:
        value = float(value)
    elif cast_type is not None:
        raise ValueError(f'Bad cast_type {cast_type}. Should be int, float, or None.')

    return value

# -----------------------------------------------------------
