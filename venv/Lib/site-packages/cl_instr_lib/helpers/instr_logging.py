import logging
import sys
import os


class ColorFormatter(logging.Formatter):
    """Logging Formatter to add colors and count warning / errors"""

    green = '\033[92m'
    grey = "\033[38m"
    yellow = "\033[93m"
    red = "\033[31m"
    bold_red = "\033[31;1m"
    cyan = "\033[1;36m"
    reset = "\033[0;0m"
    format = "%(asctime)s - %(levelname)-8s - %(message)s"

    FORMATS = {
        5:                  cyan + format + reset,
        logging.DEBUG:      green + format + reset,
        logging.INFO:       grey + format + reset,
        logging.WARNING:    yellow + format + reset,
        logging.ERROR:      red + format + reset,
        logging.CRITICAL:   bold_red + format + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


class InstrLoggingAdapter(logging.LoggerAdapter):

    DEBUG = logging.DEBUG
    INFO = logging.INFO
    WARNING = logging.WARNING
    ERROR = logging.ERROR
    CRITICAL = logging.CRITICAL

    def __init__(self, logger, driver_name, visa_resource_name):
        super().__init__(logger=logger, extra={'driver': driver_name, 'visa_resource_name': visa_resource_name})

    def process(self, msg, kwargs):
        return f'cl_instr_lib - {self.extra["driver"]} [{self.extra["visa_resource_name"]}] - {msg}', kwargs

    def info(self, msg, *args, border='', **kwargs):
        num_chars = 180 - len(self.process('', {})[0])
        if border:
            super().info(border*num_chars, *args, **kwargs)
        super().info(msg, *args, **kwargs)
        if border:
            super().info(border*num_chars, *args, **kwargs)

    # Formatting functions

    def info_line(self, char='='):
        num_chars = 180 - len(self.process('', {})[0])
        super().info(char * num_chars)

    def draw_line(self, char='=', level='INFO'):
        try:
            level = logging._levelToName[level] if type(level) is int else level
            if level in logging._nameToLevel:
                func_name = level.lower()
            else:
                raise KeyError
        except KeyError:
            raise ValueError("Given level did not match a log level. Supported values: %s" % str(logging._nameToLevel))
        num_chars = 180 - len(self.process('', {})[0])
        self.__getattribute__(func_name)((char*num_chars)[:num_chars])

    # Raw print to console and write to file with no formatting
    def print(self, msg, end='\n'):
        for handler in self.logger.handlers:
            if handler.stream is not None and handler.stream.writable():
                handler.stream.write(msg+end)  # Write message into the stream buffer
                handler.stream.flush()  # Send to destination

    def setLevel(self, level):
        super().setLevel(level)
        # self.logger.setLevel(level)
        # for handler in self.logger.handlers:
        #     handler.setLevel(level)

    @property
    def handlers(self):
        if hasattr(self.logger, 'handlers'):
            return self.logger.handlers
        elif hasattr(self.logger, 'logger') and hasattr(self.logger.logger, 'handlers'):
            return self.logger.logger.handlers
        else:
            return []


FMT = '%(asctime)s - %(levelname)-8s -- %(message)s'


def get_logger():
    logger = logging.getLogger('cl_instr_lib')
    return logger


def add_file_handler(logger, filename):
    if not os.path.exists(os.path.dirname(filename)):
        os.makedirs(os.path.dirname(filename))
    fhandler = logging.FileHandler(filename=filename, encoding='utf-8', mode='w+')
    fhandler.setLevel(logging.INFO)
    fhandler.setFormatter(logging.Formatter(FMT))
    logger.addHandler(fhandler)


def add_stream_handler(logger, out=sys.__stdout__):
    shandler = logging.StreamHandler(out)
    shandler.setLevel(logging.INFO)
    shandler.setFormatter(ColorFormatter())
    logger.addHandler(shandler)
