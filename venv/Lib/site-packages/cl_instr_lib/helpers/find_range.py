from math import isclose

def find_range_above(value, ranges):
    """
    Returns the smallest value in a sorted list that is equal to or larger than a given value.

    An application is to find the lowest meter range that will allow measurement of the given value.

    :param value:
    :type value: float
    :param ranges: List of values in ascending order.
    :type ranges: List[float]
    :return: The smallest value in ranges that is greater than or equal to value. If value is greater then the
        largest element of ranges, the largest element is returned.
    :rtype: float
    """

    first = True
    max_i = len(ranges)-1
    for i in range(max_i, -1, -1):
        if i == max_i and value >= ranges[i]:
            return ranges[i]
        if i == 0:
            return ranges[0]
        if ranges[i-1] < value <= ranges[i]:
            return ranges[i]

def find_range_below(value, ranges, rel_tol=0.01):
    """
    Returns the largest value in a sorted list that is equal to or smaller than a given value.

    An application is to find the largest protection setting that doesn't exceed value.

    :param value:
    :type value: float
    :param ranges: List of values in ascending order.
    :type ranges: List[float]
    :param rel_tol: Used in math.isclose to decide if value is within rel_tol of a value in ranges. If so that value
        is returned. rel_tol = 0.01 corresponds to a tolerance of 1%.
    :return: The smallest value in ranges that is greater than or equal to value. If value is greater then the
        largest element of ranges, the largest element is returned.
    :rtype: float
    """

    first = True
    max_i = len(ranges)-1
    for i in range(max_i, -1, -1):
        if i == max_i and value >= ranges[i]:
            return ranges[i]
        if i == 0:
            return ranges[0]
        if isclose(value, ranges[i], rel_tol=rel_tol):  # Within 1%
            return ranges[i]
        if ranges[i-1] < value < ranges[i]:
            return ranges[i-1]



if __name__ == "__main__":
    ranges = [2, 5, 10, 20, 40, 60, 80, 100]
    test_cases = [0.5, 1, 2, 3, 5, 9.999, 10.0, 10.001, 19.9, 19.999, 20, 80, 90, 99.999, 100, 101]
    print(f"Where ranges = {test_cases}: ")
    for t in test_cases:
        print(f"find_range_above({t}, test_cases) -> {find_range_above(t, ranges)}")
    print('\n')
    for t in test_cases:
        print(f"find_range_below({t}, test_cases) -> {find_range_below(t, ranges)}")