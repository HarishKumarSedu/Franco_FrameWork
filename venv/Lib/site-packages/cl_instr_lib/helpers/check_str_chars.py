def check_str_chars(pattern_name: str, pattern: str, max_len: int, valid_chars_list: [str]):
    """
    Check to ensure entered pattern for pattern_config is valid.

    :param pattern_type: 'digital' or 'analog' bit/channels
    :type pattern_type: str
    :param pattern: values to write to instrument
    :type pattern: str|int
    :param val_len: maximum length of characters allowed in pattern. Should be either 4 or 16
    :type val_len: str
    :param bin_hex: binary or hex format
    :type bin_hex: str
    :return: NA
    :rtype: NA
    """
    if pattern is not None:
        if not isinstance(pattern, str):
            raise ValueError(f"Bad {pattern_name}: '{pattern}'. Needs to be of type str.")

        if not (1 <= len(pattern) <= max_len) or any([c not in valid_chars_list for c in pattern]):
            legal_chars_msg = ', '.join([f"'{c}'" for c in valid_chars_list])
            raise ValueError(f"Bad {pattern_name}: '{pattern}', should be up to {max_len} chars from set "
                             f"{legal_chars_msg}.")