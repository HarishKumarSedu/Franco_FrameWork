from typing import List, Union, Optional

from cl_instr_lib.drivers.audio.apx.reusables import check_enum_or_str
from cl_instr_lib.drivers.audio.apx.bench.measurements.measurement import Measurement
from cl_instr_lib.drivers.audio.apx.enums import FftPrimaryResults
from cl_instr_lib.drivers.audio.apx.bench.measurements.result.results_container.results_container import \
    FftResultsContainer


class Fft(Measurement):

    results: FftResultsContainer
    """Base class for APx FFT Measurements, inherits from Measurement"""

    def __init__(self, apx):
        self._apx = apx
        self.meas_name = 'Fft'
        self._primary_result_enum = FftPrimaryResults
        super().__init__(apx)

    def add_result(self, result: Union[FftPrimaryResults, str]):
        """
        Adds any valid fft primary result graph

        :param result: Name of primary result to add. Options include:

            SCOPE
            AMPLITUDE_SPECTRAL_DENSITY
            FFT_SPECTRUM
            POWER_SPECTRAL_DENSITY

        :type result: FftPrimaryResults | str
        """
        result = check_enum_or_str(f'{result}', result, FftPrimaryResults)
        super().add_result(result.value)

    def configure_results(self, results: List[Union[FftPrimaryResults, str]] = None) -> \
            Optional[List[Union[FftPrimaryResults, str]]]:
        """
        Clears current results and configures the specified results in order. If no results are specified, returns the
        currently configured results. This only configures and returns primary results. If you want to configure
        derived results use the add_derived_result() method of the result object.

        :param results: Name of primary result to add. Options include:

            SCOPE
            AMPLITUDE_SPECTRAL_DENSITY
            FFT_SPECTRUM
            POWER_SPECTRAL_DENSITY

        :type results: List[FftPrimaryResults | str] | None
        :return: list of currently configured results
        :rtype: List[FftPrimaryResults | str] | None
        """
        return super().configure_results(results)

    def sync_with_gui(self):
        """
        Syncs the results for this measurement with what is currently configured in the GUI

        :return: None
        :rtype: None
        """
        self.results = FftResultsContainer(self, self._query_current_results())
        self.update_pyi_file()

    def get_result_options(self) -> List[str]:
        """
        Returns a list of FFTPrimaryResults enum string options that are valid for the add/configure
        results function

        :return: list of enum strings
        :rtype: List[str]
        """
        return [result.name for result in FftPrimaryResults]
