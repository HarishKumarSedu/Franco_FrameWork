class Result:
    """Parent Result Class for all Results"""

    def __init__(self, measurement, result_name, index):
        self._measurement = measurement
        self.result_name = result_name
        self.index = index

    @property
    def api_ref(self):
        """
        The Measurement api ref

        :return: The native APx API reference for the associated measurement
        :rtype: reference
        """
        return self._measurement.api_ref

    def is_derived(self) -> bool:
        """
        Determines if the result is a derived result
        :return: True if Derived
        :rtype: bool
        """
        return self._graph_obj.IsDerived

    @property
    def _result_obj(self):
        self._measurement._apx.log.error("Child class must implement this property.")

    def export_data(self, file_name):
        """
        Exports measurement data to an Excel, Matlab, or CSV file. The type of file is determined by the file extension
        and must be included in the file_name parameter. Uses currently configured units. This exports measured data
        from data_index_0 and left axis of the current graph.

        For Excel: ".xls" or ".xlsx"
        For Matlab: ".mat"
        All other extensions are exported as a CSV text file.

        :param file_name: full file path including file extension
        :type file_name: path | str
        """
        if not self._result_obj.HasDataOnAxis(0, 0, 0):  # Measured, data_index 0, Left axis
            raise Exception('No measured graph data exists on index0 on the left axis.')
        else:
            units = self._get_export_units()
            self._result_obj.ExportData(file_name, *units)

    def get_channel_count(self) -> int:
        """
        Returns the channel count for the measurement result

        :return: channel count
        :rtype: int
        """
        return self._result_obj.ChannelCount

    def verify_ch(self, channel: int):
        """
        Verify the channel is between 1 and channel count. Raises error if not

        :param channel: channel to configure
        :type channel: int
        :return: error
        :rtype: ValueError
        """
        if channel not in range(1, self.get_channel_count()+1):
            raise ValueError(f'Channel must be in the range of [1-{self.get_channel_count()}]')


