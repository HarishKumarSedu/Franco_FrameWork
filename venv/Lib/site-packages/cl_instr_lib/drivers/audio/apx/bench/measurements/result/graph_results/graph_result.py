from typing import Union, Optional

from cl_instr_lib.drivers.audio.apx.bench.measurements.result.result import Result
from cl_instr_lib.drivers.audio.apx.enums import ImageType


class GraphResult(Result):
    """Parent Result Class for all Graph Measurements, inherits from Result class"""

    @property
    def _graph_obj(self):
        return self.api_ref.Graphs[self.index]

    def save_graph_image(self, file_name: str, image_type: Union[ImageType, str] = ImageType.PNG):
        """
        Saves an image of the graph. File name must include extension.

        :param file_name: full file path including file extension
        :type file_name: path | str
        :param image_type: Type of image to save. Options include BMP, JPG, EMF, PNG, PDF
        :type image_type: ImageType | str
        """
        self._result_obj.Save(file_name, image_type)

    def configure_graph_name(self, name: str = None) -> Optional[str]:
        """
        Configure the graph name for this result. If called with no parameters it returns the current name.

        :param name: name of the graph
        :type name: str
        :return: name of the graph
        :rtype: str | None
        """
        if name is None:
            return self._graph_obj.Name
        else:
            self._graph_obj.Name = name

    def is_right_axis_result(self) -> bool:
        """
        Return a boolean of whether or not the result is a right axis result

        :return: returns True if the result is on the right axis
        :rtype: bool
        """
        return False


