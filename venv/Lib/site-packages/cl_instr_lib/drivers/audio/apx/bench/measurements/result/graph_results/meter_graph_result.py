from typing import Union, List
import re

from cl_instr_lib.drivers.audio.apx.bench.measurements.result.graph_results.graph_result import GraphResult
from cl_instr_lib.drivers.audio.apx.reusables import check_enum_or_str, MeterData
from cl_instr_lib.drivers.audio.apx.enums import MeasurementResultType, MeterGraphUnits


class MeterGraphResult(GraphResult):
    """Base class for Meter Graph Results, inherits from GraphResult"""

    @property
    def _result_obj(self):
        """Native APX API reference for the result object AsMeterGraph()"""
        return self._graph_obj.Result.AsMeterGraph()

    def get_meter_graph_data(self, channel: int = None, add_ch_suffix: bool = True) -> Union[List[MeterData],
                                                                                             MeterData]:
        """
        Returns meter graph data for a specified channel. If no channel is specified, a list is returned containing
        data for all channels. Channel is 1 indexed.

        :param channel: channel number
        :type channel: int
        :param add_ch_suffix: whether to append the channel name to the end of each measurement name
        :type add_ch_suffix: bool
        :return: measured data
        :rtype: List[MeterData] | MeterData
        """
        data = []
        if channel is None:
            channels = range(self.get_channel_count())
        else:
            self.verify_ch(channel)
            channels = [channel - 1]
        for ch in channels:
            label = self.configure_axis_name()
            if add_ch_suffix:
                label = label + ' ' + self._result_obj.ChannelNames[ch]
            data.append(MeterData(measurement=label, value=self._result_obj.GetValues()[ch],
                                  units=self._result_obj.Axis.Unit))
        return data[0] if channel else data

    def get_available_units(self) -> List[str]:
        """
        Retrieves the valid unit options for the specified axis of this measurement.

        :return: Returns a list of enum strings that are valid.
        :rtype: list[str]
        """
        return [MeterGraphUnits(x).name for x in self._result_obj.Axis.UnitList]

    def configure_axis_name(self, axis_name: str = None):
        """
        Configure or retrieves the measurement axis name. This name is used for the 'measurement' name when
        retrieving the data using get_meter_graph_data()

        :param axis_name: name to give the axis
        :type axis_name:  str
        :return: axis name
        :rtype: str
        """
        if axis_name is None:
            axis_title = self._result_obj.Axis.Title
            axis_title = re.sub("\(DCX\)", "dcx", axis_title)  # keep dcx suffix if found in ()
            axis_title = re.sub("[\(\[].*?[\)\]]", "", axis_title)  # delete all other text in ()
            axis_title = axis_title.strip(' ').replace(',', '').replace('-', '').replace('>', '')
            return axis_title
        else:
            self._result_obj.Axis.Title = axis_name

    def configure_units(self, unit: Union[MeterGraphUnits, str] = None):
        """
        Allows configuration of the x or y units, or both. If left empty will return the currently configured units.

        :param unit: unit options.. all may not be valid depending on input connector settings, but the function
            will check validity for trying to set the configuration.

            DB

        :type unit: MeterGraphUnits | str
        :return: the units if no units are specified when called, otherwise returns nothing
        :rtype: str | None
        """

        if unit is None:
            return MeterGraphUnits(self._result_obj.Axis.Unit).name

        unit = check_enum_or_str('unit', unit, MeterGraphUnits)
        if unit is not None:
            if unit.name not in self.get_available_units():
                raise ValueError(f'Invalid y_unit "{unit}". Valid options are '
                                 f'{[x for x in self.get_available_units()]}.')
            self._result_obj.Axis.Unit = unit.value

    def _get_export_units(self):
        return [MeterGraphUnits[self.configure_units()].value]

    def get_result_type(self) -> str:
        """
        Returns either the {meas}PrimaryResult enum string or the MeasurementResultType enum string for this result.

        :return: string result type
        :rtype: str
        """
        if self.is_derived():
            result_type = MeasurementResultType(self._graph_obj.ViewType.ToString()).name
        else:
            result_type = self._measurement._primary_result_enum(self._graph_obj.ViewType.Name).name
        return result_type
