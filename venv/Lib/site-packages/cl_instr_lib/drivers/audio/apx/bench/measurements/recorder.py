from typing import List, Union, Optional

from cl_instr_lib.drivers.audio.apx.reusables import check_enum_or_str
from cl_instr_lib.drivers.audio.apx.bench.measurements.measurement import Measurement
from cl_instr_lib.drivers.audio.apx.enums import RecorderPrimaryResults
from cl_instr_lib.drivers.audio.apx.bench.measurements.result.results_container.results_container import \
    RecorderResultsContainer


class Recorder(Measurement):
    results: RecorderResultsContainer
    """Base class for APx Recorder Measurements, inherits from Measurement"""

    def __init__(self, apx):
        self._apx = apx
        self.meas_name = 'Recorder'
        self._primary_result_enum = RecorderPrimaryResults
        super().__init__(apx)

    def add_result(self, result: Union[RecorderPrimaryResults, str]):
        """
        Adds any valid recorder primary result graph

        :param result: Name of primary result to add. Options include:

            AVERAGE_JITTER_LEVEL, BANDPASS_LEVEL, CREST_FACTOR, DC_LEVEL, DC_LEVEL_DCX, DIGITAL_INTERFACE_LEVEL,
            ERROR_RATE, FREQUENCY, GAIN, IMD_RATIO, INPUT_SAMPLE_RATE, PEAK_LEVEL, PHASE, RESISTANCE_DCX, RMS_LEVEL,
            RMS_LEVEL_RATIO, SINAD, THDN_LEVEL, THDN_RATIO

        :type result: RecorderPrimaryResults | str
        """
        result = check_enum_or_str(f'{result}', result, RecorderPrimaryResults)
        super().add_result(result.value)

    def configure_results(self, results: List[Union[RecorderPrimaryResults, str]] = None) -> \
            Optional[List[Union[RecorderPrimaryResults, str]]]:
        """
        Clears current results and configures the specified results in order. If no results are specified, returns the
        currently configured results. This only configures and returns primary results. If you want to configure
        derived results use the add_derived_result() method of the result object.

        :param results: Name of primary result to add. Options include:

            AVERAGE_JITTER_LEVEL, BANDPASS_LEVEL, CREST_FACTOR, DC_LEVEL, DC_LEVEL_DCX, DIGITAL_INTERFACE_LEVEL,
            ERROR_RATE, FREQUENCY, GAIN, IMD_RATIO, INPUT_SAMPLE_RATE, PEAK_LEVEL, PHASE, RESISTANCE_DCX, RMS_LEVEL,
            RMS_LEVEL_RATIO, SINAD, THDN_LEVEL, THDN_RATIO

        :type results: List[RecorderPrimaryResults | str] | None
        :return: list of currently configured results
        :rtype: List[RecorderPrimaryResults | str] | None
        """
        return super().configure_results(results)

    def get_result_options(self) -> List[str]:
        """
        Returns a list of RecorderPrimaryResults enum string options that are valid for the add/configure
        results function

        :return: list of enum strings
        :rtype: List[str]
        """
        return [result.name for result in RecorderPrimaryResults]

    def sync_with_gui(self):
        """
        Syncs the results for this measurement with what is currently configured in the GUI

        :return: None
        :rtype: None
        """
        self.results = RecorderResultsContainer(self, self._query_current_results())
        self.update_pyi_file()