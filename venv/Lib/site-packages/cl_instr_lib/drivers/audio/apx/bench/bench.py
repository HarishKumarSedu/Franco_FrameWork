import os
from cl_instr_lib.drivers.audio.apx.bench.analyzer import Analyzer
from cl_instr_lib.drivers.audio.apx.bench.generator import Generator
from cl_instr_lib.drivers.audio.apx.bench.signal_path.signal_path import SignalPath
from cl_instr_lib.drivers.audio.apx.bench.measurements.measurements import Measurements
from cl_instr_lib.drivers.audio.apx.bench.measurements.monitors.monitors import Monitors
from cl_instr_lib.drivers.audio.apx.bench.measurements.meters import Meters
from cl_instr_lib.drivers.audio.apx.bench.measurements.result.results_container.results_container import ResultsContainer
from cl_instr_lib.drivers.audio.apx.bench.measurements.measurement import Measurement


class Bench:
    """Base class for apx bench mode."""

    def __init__(self, apx):
        self.generator = Generator(apx)
        self.analyzer = Analyzer(apx)
        self.signal_path = SignalPath(apx)
        self.measurements = Measurements(apx)
        self.monitors = Monitors(apx)
        self.meters = Meters(apx)
        self.gen_pyi()

    def gen_pyi(self):
        pyi_file = os.path.dirname(
            os.path.realpath(__file__)) + '\\measurements\\result\\results_container\\results_container.pyi'
        if not os.path.exists(pyi_file):
            tab = '    '
            pyi_contents = []
            pyi_contents.extend(
                ["from cl_instr_lib.drivers.audio.apx.bench.measurements.result.result import Result"
                 "\n\n\n"])
            pyi_contents.extend(["class ResultsContainer:\n"])
            pyi_contents.extend([tab, "def __init__(self, measurement, results):", '\n', tab * 2, 'pass\n'])
            for meas in self.measurements.__dict__.values():
                if isinstance(meas, Measurement):
                    pyi_contents.extend(
                        ['class %s(%s):\n' % (meas.results.__class__.__name__, ResultsContainer.__name__)])
                    pyi_contents.extend([tab, 'pass\n', tab, '# END\n'])
            pyi_contents.extend(['class %s(%s):\n' % ('MeterResultsContainer', ResultsContainer.__name__)])
            pyi_contents.extend([tab, 'pass\n', tab, '# END\n'])
            file_contents = ''.join(pyi_contents)
            with open(pyi_file, 'x') as f:
                f.write(file_contents)
        for meas in self.measurements.__dict__.values():
            if isinstance(meas, Measurement):
                meas.update_pyi_file()
        self.meters.update_pyi_file()

    def sync_with_gui(self):
        for meas in self.measurements.__dict__.values():
            if isinstance(meas, Measurement):
                meas.sync_with_gui()
        self.meters.sync_with_gui()
