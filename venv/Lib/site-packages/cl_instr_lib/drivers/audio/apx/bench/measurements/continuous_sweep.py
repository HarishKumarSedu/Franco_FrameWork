from typing import List, Union, Optional

from cl_instr_lib.drivers.audio.apx.reusables import check_enum_or_str
from cl_instr_lib.drivers.audio.apx.bench.measurements.measurement import Measurement
from cl_instr_lib.drivers.audio.apx.enums import ContinuousSweepPrimaryResults
from cl_instr_lib.drivers.audio.apx.bench.measurements.result.results_container.results_container import ContinuousSweepResultsContainer


class ContinuousSweep(Measurement):
    results: ContinuousSweepResultsContainer
    """Base class for APx Continuous Sweep Measurements, inherits from Measurement"""

    def __init__(self, apx):
        self._apx = apx
        self.meas_name = 'ContinuousSweep'
        self._primary_result_enum = ContinuousSweepPrimaryResults
        super().__init__(apx)

    def add_result(self, result: Union[ContinuousSweepPrimaryResults, str]):
        """
        Adds any valid continuous sweep primary result graph

        :param result: Name of primary result to add. Options include:

            ACQUIRED_CROSSTALK_WAVEFORM_ONE_CHANNEL_DRIVEN, ACQUIRED_CROSSTALK_WAVEFORM_ONE_CHANNEL_UNDRIVEN,
            ACQUIRED_WAVEFORM, CROSSTALK_ONE_CHANNEL_DRIVEN, CROSSTALK_ONE_CHANNEL_UNDRIVEN, DEVIATION,
            DISTORTION_PRODUCT_LEVEL, DISTORTION_PRODUCT_RATIO, GAIN, GROUP_DELAY, IMPULSE_RESPONSE, PHASE,
            RELATIVE_LEVEL, RMS_LEVEL, THD_LEVEL, THD_RATIO

        :type result: ContinuousSweepPrimaryResults | str
        """
        result = check_enum_or_str(f'{result}', result, ContinuousSweepPrimaryResults)
        super().add_result(result.value)

    def configure_results(self, results: List[Union[ContinuousSweepPrimaryResults, str]] = None) -> \
            Optional[List[Union[ContinuousSweepPrimaryResults, str]]]:
        """
        Clears current results and configures the specified results in order. If no results are specified, returns the
        currently configured results. This only configures and returns primary results. If you want to configure
        derived results use the add_derived_result() method of the result object.

        :param results: Name of primary result to add. Options include:

            ACQUIRED_CROSSTALK_WAVEFORM_ONE_CHANNEL_DRIVEN, ACQUIRED_CROSSTALK_WAVEFORM_ONE_CHANNEL_UNDRIVEN,
            ACQUIRED_WAVEFORM, CROSSTALK_ONE_CHANNEL_DRIVEN, CROSSTALK_ONE_CHANNEL_UNDRIVEN, DEVIATION,
            DISTORTION_PRODUCT_LEVEL, DISTORTION_PRODUCT_RATIO, GAIN, GROUP_DELAY, IMPULSE_RESPONSE, PHASE,
            RELATIVE_LEVEL, RMS_LEVEL, THD_LEVEL, THD_RATIO

        :type results: List[ContinuousSweepPrimaryResults | str] | None
        :return: list of currently configured results
        :rtype: List[ContinuousSweepPrimaryResults | str] | None
        """
        return super().configure_results(results)

    def get_result_options(self) -> List[str]:
        """
        Returns a list of ContinuousSweepPrimaryResults enum string options that are valid for the add/configure
        results function

        :return: list of enum strings
        :rtype: List[str]
        """
        return [result.name for result in ContinuousSweepPrimaryResults]

    def sync_with_gui(self):
        """
        Syncs the results for this measurement with what is currently configured in the GUI

        :return: None
        :rtype: None
        """
        self.results = ContinuousSweepResultsContainer(self, self._query_current_results())
        self.update_pyi_file()
