# -----------------------------------------------------------
#                          INCLUDES
# -----------------------------------------------------------
# Inherit from the base class
from cl_instr_lib.base_classes.eloads.PLZ005W_base import PLZ005W_base, Arbitrary, Program
# Include Other Instrument Drivers/Helpers
# -----------------------------------------------------------
#                            NOTES
# -----------------------------------------------------------
# -----------------------------------------------------------
#                            CLASS
# -----------------------------------------------------------


class PLZ405W(PLZ005W_base):
    """
    |   Driver for controlling Kikusui Electronic Load - Model PLZ405W.
    |       This inherits from the *PLZ005W_base* class.
    |
    |   No over-rides or new methods required.
    """

    _ratings = dict()

    # Note: these are the 'Operating Limits'
    # _ratings['CURR'] = {'L': (0, 0.8), 'M': (0, 8.0), 'H': (0, 80.0), 'units': 'Amps'}
    # _ratings['COND'] = {'L': (0.04e-3, 800e-3), 'M': (0.4e-3, 8.0), 'H': (4.0e-3, 80.0), 'units': 'Siemens (1/ohms)'}
    # _ratings['VOLT'] = {'L': (0.25, 15.0), 'H': (0.25, 150), 'units': 'Volts'}
    # _ratings['POW'] = {'L': (0.4, 4.0), 'M': (4.0, 40.0), 'H': (40.0, 400.0), 'units': 'Watts'}
    # _ratings['SLEW'] = {'L': (0.2e-3, 200e-3), 'M': (2.0e-3, 2.0), 'H': (20.0e-3, 20), 'units': 'Amps/usec'}
    # _ratings['FREQ'] = {'L': (1, 100e3), 'units': 'Hz'}

    # Note: these are the 'Setting Limits' - Max is +5% > 'Operating Limits', Min starts from 0 for COND, VOLT, POW)
    _ratings['CURR'] = {'L': (0, 0.84), 'M': (0, 8.4), 'H': (0, 84.0), 'units': 'Amps'}
    _ratings['COND'] = {'L': (0.0, 840e-3), 'M': (0.0, 8.4), 'H': (0.0, 84.0), 'units': 'Siemens (1/ohms)'}
    _ratings['VOLT'] = {'L': (0.0, 15.75), 'H': (0.0, 157.5), 'units': 'Volts'}
    _ratings['POW'] = {'L': (0.0, 4.2), 'M': (.0, 42.0), 'H': (0.0, 420.0), 'units': 'Watts'}
    _ratings['SLEW'] = {'L': (0.2e-3, 200e-3), 'M': (2.0e-3, 2.0), 'H': (20.0e-3, 20), 'units': 'Amps/usec'}
    _ratings['FREQ'] = {'L': (1, 100e3), 'units': 'Hz'}

    _rating_curr_max = 84  # Amps
    _rating_pow_max = 420  # Watts

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        super().__init__(visa_resource_name,
                         logger,
                         model_re='^PLZ405W$',
                         sim_idn="KIKUSUI,PLZ405W,BP003149,IFC1.08.0002 FPGA1.01.006 IOC1.03.006",
                         **kwargs)

        #: Object containing methods for the **Arb** feature.  See `Arbitrary`_.
        self.arb = Arbitrary(self)

        #: Object containing methods for the **Program/Sequence** feature.  See `Program`_.
        self.program = Program(self)


if __name__ == '__main__':
    plz405w = PLZ405W('GPIB0::7')
    plz405w.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS')

    test_flag = False
    if test_flag:
        from driver_test_codes.PLZ005W_test import self_test
        self_test(plz405w)

# -----------------------------------------------------------
#                          END OF FILE
# -----------------------------------------------------------

