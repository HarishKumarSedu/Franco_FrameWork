from cl_instr_lib.base_classes.temp_forcing.temp_BaseClass import Temp_BaseClass


class TestEquity115(Temp_BaseClass):
    """
    Class for controlling a TestEquity Model 115 temperature forcing system with the
    ICS 488 - Modbus controller model '4899A'.
    """

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        # Setup the simulation code inherited from Instrument.
        super().__init__(visa_resource_name,
                         logger=logger, **kwargs)

        self.setPoint = None
        self.currentTempC = None
        self.setTempC = None
        self.numDec = 1  # number of decimal places required for commands

    def get_temperature(self):
        """
        Returns the set point of the temperature forcing system in deg C.

        :return: Set point value read back from the temperature forcing system. Units are degrees C.
        :rtype: float
        """
        self.setPoint = float(self.rm_handle.query('R? 300,1').strip()) / (10 ** self.numDec)
        return self.setPoint

    def measure_temperature(self):
        """Returns the present temperature in deg C.

        :return: The present temperature as measured by the temperature forcing system. Units are degrees C.
        :rtype: float
        """
        self.currentTempC = float(self.rm_handle.query('R? 100,1').strip()) / (10 ** self.numDec)
        return self.currentTempC

    def set_temperature(self, temperature_degc=25.0):
        """
        Set the temperature forcing system setpoint. Units are in deg C.

        :param temperature_degc: Desired setpoint in degrees C.
        :type temperature_degc: float
        :return: None
        :rtype: None
        """
        self.setTempC = temperature_degc
        cmdStr = 'W300,' + str(int(temperature_degc * (10 ** self.numDec)))
        self.rm_handle.write(cmdStr)


if __name__ == "__main__":
    testEquity115 = TestEquity115('GPIB0::4')  # Replace visa_resource_name with None for simulated hardware.
    testEquity115.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS')
