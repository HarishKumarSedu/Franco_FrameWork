from cl_instr_lib.base_classes.temp_forcing.temp_BaseClass import Temp_BaseClass


class TP04310A(Temp_BaseClass):
    """
    Class for controlling a TP04310A temperature forcing system
    """

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        # Setup the simulation code inherited from Instrument.
        super().__init__(visa_resource_name,
                         logger=logger,
                         model_re='^TP04310A$',
                         sim_idn='inTest., Model TP04310A, Rev. A',
                         **kwargs)

    def __del__(self):
        """When object is garbage collected, this will get called to reset to a safe temp and close the COM port."""
        super().__del__()

    def get_temperature(self):
        """Returns the set point of the temperature forcing system in deg C.

        :return: Set point value read back from the temperature forcing system. Units are degrees C.
        :rtype: float
        """

        response = self.query('SETP?')
        return float(response)

    def measure_temperature(self):
        """Returns the present temperature in deg C.

        :return: The present temperature as measured by the temperature forcing system. Units are degrees C.
        :rtype: float
        """

        response = self.query('TEMP?')
        return float(response)

    def set_temperature(self, temperature):
        """
        Set the temperature forcing system setpoint. Units are in deg C.

        :param temperature: Desired setpoint in degrees C.
        :type temperature: float
        :return: None
        :rtype: None
        """

        cmd = f"SETP {temperature}:.1f"
        self.write(cmd)


if __name__ == "__main__":
    TP04310A = TP04310A('GPIB0::19')  # Replace visa_resource_name with None for simulated hardware.
    TP04310A.debug_options(log_scpi=False, inst_error_handling='LOG_ALWAYS')

