# -*- coding: utf-8 -*-
from time import sleep
from cl_instr_lib.base_classes.temp_forcing.temp_BaseClass import Temp_BaseClass


class SiThermal(Temp_BaseClass):
    """
    Class for controlling Silicon Thermal Temperature forcing system.
    """

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        # Inherited from Instrument.
        super().__init__(visa_resource_name,
                         logger=logger,
                         **kwargs)

        self.__STX = 2
        self.__ETX = 3
        self.__NUL = 0

        self.__filter_char = ''
        self.__address = 1
        self.__addr_hex = ''

        self.address(1)  # Typical value used in MSAVAL today. Previously 50 (0x32) was common.

        # ---------------------------------------------------------------------------
    def __del__(self):
        """When object is garbage collected, this will get called to reset to a safe temp and close the COM port."""
        super().__del__()

    def address(self, address=None):
        """
        Query or set the decimal value of the address used by the SiThermal Love Controls control unit.

        :param address: Integer from 0 to 1023 (0x3FF). MSAVAL typically uses 1 or 50.
        :type address: int
        :return: Query returns present address that this driver uses to communicate with Love Controls control unit.
        :rtype: int|None
        """

        if address is None:
            return self.__address

        address = int(address)
        if address < 1 or address > 0x3FF:
            raise ValueError('address={:d} is outside range 0 to 1023 (0x3FF). MSAVAL typically uses 1 or 50.'.
                             format(address))

        if address <= 0xFF:
            self.__filter_char = 'L'
        elif address <= 0x1FF:
            self.__filter_char = 'O'
        elif address <= 0x2FF:
            self.__filter_char = 'V'
        else:
            self.__filter_char = 'E'

        self.__address = address
        self.__addr_hex = '{:02X}'.format(address)

    def _love_command(self, data_str):
        cmdstr = self.__addr_hex + data_str

        checksum = sum([ord(x) for x in cmdstr])
        checksum = '{:02X}'.format(checksum)
        checksum = checksum[-2:]

        cmdstr = cmdstr + checksum

        cmdstr = self.__filter_char + cmdstr

        cmddec = [ord(x) for x in cmdstr]

        cmddec = [self.__STX, *cmddec, self.__ETX, self.__NUL]

        self.write_raw(bytes(cmddec))

        sleep(0.1)

        resp_num_bytes = self.rm_handle.bytes_in_buffer

        return list(self.read_bytes(resp_num_bytes))

    # ---------------------------------------------------------------------------

    def _read_status(self):
        response = self._love_command('00')

        if len(response) != 15:
            raise RuntimeError('SiThermal returned {:d} bytes, should be 15.'.format(len(response)))

        if response[0] != self.__STX:
            raise RuntimeError('No start bit received.')

        filter_char = chr(response[1])
        if filter_char != self.__filter_char:
            raise RuntimeError(
                "Incorrect filter_char returned '{}', expected '{}.".format(filter_char, self.__filter_char))

        addr_hex = ''.join([chr(x) for x in response[2:4]])
        if addr_hex != self.__addr_hex:
            raise RuntimeError("Incorrect address received {}, expected '{}'.".format(addr_hex, self.__addr_hex))

        checksum_hex = ''.join([chr(x) for x in response[12:14]])
        checksum_dec = int(checksum_hex, 16)

        datasum_hex = '{:02X}'.format(sum(response[1:12]))
        datasum_hex = datasum_hex[-2:]
        datasum_dec = int(datasum_hex, 16)

        if checksum_dec != datasum_dec:
            raise RuntimeError('Incorrect checksum value received')

        return response[4:12]

    # ---------------------------------------------------------------------------

    def _read_setpoint(self):
        response = self._love_command('0100')

        if len(response) != 13:
            raise RuntimeError('SiThermal returned {:d} bytes, should be 13.'.format(len(response)))

        if response[0] != self.__STX:
            raise RuntimeError('No start bit received.')

        filter_char = chr(response[1])
        if filter_char != self.__filter_char:
            raise RuntimeError(
                "Incorrect filter_char returned '{}', expected '{}.".format(filter_char, self.__filter_char))

        addr_hex = ''.join([chr(x) for x in response[2:4]])
        if addr_hex != self.__addr_hex:
            raise RuntimeError("Incorrect address received {}, expected '{}'.".format(addr_hex, self.__addr_hex))

        checksum_hex = ''.join([chr(x) for x in response[10:12]])
        checksum_dec = int(checksum_hex, 16)

        datasum_hex = '{:02X}'.format(sum(response[1:10]))
        datasum_hex = datasum_hex[-2:]
        datasum_dec = int(datasum_hex, 16)

        if checksum_dec != datasum_dec:
            raise RuntimeError('Incorrect checksum value received')

        return response[4:10]

    # ---------------------------------------------------------------------------

    def measure_temperature(self):
        """Returns the present temperature in deg C.

        :return: The present temperature as measured by the temperature forcing system. Units are degrees C.
        :rtype: float
        """
        status_data = self._read_status()

        # Extract multiplier from 3trd character.
        field = int(chr(status_data[2]), 16)  # ASCII code to hex char to int.
        bin_data = '{:04b}'.format(field)  # 4-bit binary representation.

        bits = int(bin_data[2:4], 2)
        if bits == 0:
            multiplier = 1.0
        elif bits == 1:
            multiplier = 0.1
        elif bits == 2:
            multiplier = 0.01
        elif bits == 3:
            multiplier = 0.001
        else:
            raise RuntimeError('Two bit field has illegal value: {}. Should be impossible!'.format(bits))

        # Extract sign from 4th character.
        field = int(chr(status_data[3]), 16)  # ASCII code to hex char to int.
        bin_data = '{:04b}'.format(field)  # 4-bit binary representation.
        is_negative = bool(int(bin_data[3]))

        # Data is in the 5th through 8th characters.
        data_str = ''.join(chr(x) for x in status_data[4:9])
        data_dec = int(data_str, 10) * multiplier

        if is_negative:
            return -1 * data_dec
        else:
            return data_dec

    # ---------------------------------------------------------------------------

    def set_temperature(self, temp_degc):
        """
        Set the temperature forcing system setpoint. Units are in deg C.

        :param temp_degc: Desired setpoint in degrees C.
        :type temp_degc: float
        :return: None
        :rtype: None
        """
        # Format temperature string.
        temp_str = '{:1.1f}'.format(abs(temp_degc))
        temp_str = temp_str.replace('.', '')
        num_pad = 4 - len(temp_str)
        temp_str = '0' * num_pad + temp_str

        # Create sign string
        if temp_degc < 0:
            sign_str = '01'
        else:
            sign_str = '00'

        data_str = '0200' + temp_str + sign_str

        self._love_command(data_str)

    def get_temperature(self):
        """Returns the set point of the temperature forcing system in deg C.

        :return: Set point value read back from the temperature forcing system. Units are degrees C.
        :rtype: float
        """

        response = self._read_setpoint()

        # Extract multiplier from 1st. character.
        field = int(chr(response[0]), 16)  # ASCII code to hex char to int.
        bin_data = '{:04b}'.format(field)  # 4-bit binary representation.

        bits = int(bin_data[2:4], 2)
        if bits == 0:
            multiplier = 1.0
        elif bits == 1:
            multiplier = 0.1
        elif bits == 2:
            multiplier = 0.01
        elif bits == 3:
            multiplier = 0.001
        else:
            raise RuntimeError('Two bit field has illegal value: {}. Should be impossible!'.format(bits))

        # Extract sign from 2nd. character.
        field = int(chr(response[1]), 16)  # ASCII code to hex char to int.
        bin_data = '{:04b}'.format(field)  # 4-bit binary representation.
        is_negative = bool(int(bin_data[3]))

        # Data is in the 3rd. through 6th characters.
        data_str = ''.join(chr(x) for x in response[2:6])
        data_dec = int(data_str, 10) * multiplier

        if is_negative:
            return -1 * data_dec
        else:
            return data_dec


# ===============================================================================

if __name__ == "__main__":
    siThermal = SiThermal('ASRL1')  # com port
    siThermal.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS')
