from cl_instr_lib.base_classes.tek_scopes.mso456.oscope_tek_base import OscopeTekBaseMso456
from cl_instr_lib.base_classes.tek_scopes.mso456.acquire import Acquire
from cl_instr_lib.base_classes.tek_scopes.mso456.horiz import Horiz
from cl_instr_lib.base_classes.tek_scopes.mso456.trigger import Trigger
from cl_instr_lib.base_classes.tek_scopes.mso456.vertical import Vertical
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.filesystem import Filesystem
from cl_instr_lib.base_classes.tek_scopes.mso456.setup import Setup
from cl_instr_lib.base_classes.tek_scopes.mso456.screenshot import Screenshot
from cl_instr_lib.base_classes.tek_scopes.mso456.waveform_data import WaveformData


class MSO46(OscopeTekBaseMso456):

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        super().__init__(visa_resource_name, logger,
                         model_re='^MSO46$',
                         sim_idn="TEKTRONIX,MSO46,C016770,CF:91.1CT FV:1.26.5.7750",
                         sim_opt="SUP4-SRAUDIO:License; Audio serial triggering and analysis (I2S, LJ, RJ, TDM); "
                                 "Node Locked,SUP4-SRAUTO:License; Automotive serial triggering and analysis "
                                 "(CAN, LIN, FlexRay); Node Locked,SUP4-AFG:License; Arbitrary Function Generator; "
                                 "Node Locked,SUP4-PWR-BAS:License; Basic power measurement and analysis; "
                                 "Node Locked,SUP4-SRCOMP:License; Computer serial triggering and analysis "
                                 "(RS-232/422/485/UART); Node Locked,SUP4-SREMBD:License; "
                                 "Embedded serial triggering and analysis (I2C, SPI); Node Locked,SUP4-RL-1:License; "
                                 "Extend record length to 62.5M/ch maximum; Node Locked,SUP4-SRPM:License; "
                                 "SPMI protocol trigger and decode of serial packet content; "
                                 "Node Locked,SUP4-SV-BAS:License; Spectrum View Basic; Node Locked,BW4-500:License; "
                                 "500 MHz bandwidth on 4 Series oscilloscope; Node Locked,SUP4-DVM:License; "
                                 "Digital voltmeter and trigger frequency counterl ;Node Locked",
                         **kwargs)
        # The sim_opt above contains 'counterl', this is what is actually returned by the instrument.
        # Here's a way to test that: mso46.get_opt() == mso46._sim_opt returns True.

        # Configure scope to make query responses match what this driver expects.
        self.write('HEADER', 'OFF')
        self.write('VERBOSE', 'ON')  # TODO: Fix the enum values to match the VERBOSE OFF forms.

        #: Attribute containing object that controls the **acquisition** system. See `acquire class`_.
        self.acquire = Acquire(self)

        #: Attribute containing object that controls **horizontal** timebase. See `horizontal class`_.
        self.horizontal = Horiz(self)

        #: Attribute containing object that controls the **vertical channels**. See `vertical class`_.
        #: The vertical object in turn composes channel objects for each channel named  CH1...CH6.
        self.vertical = Vertical(self, 6)

        #: Object containing methods for **filesystem** operations. See `filesystem class`_.
        self.filesystem = Filesystem(self)

        #: Object containing methods for **scope setup** saving / recalling. See `setup class`_.
        self.setup = Setup(self)

        #: Object containing methods for **screenshot** operations. See `screenshot class`_.
        self.screenshot = Screenshot(self)

        #: Object containing the **trigger** controls. See `trigger class`_.
        self.trigger = Trigger(self)

        #: Object containing methods for capturing **waveform_data** . See `waveform_data class`_.
        self.waveform_data = WaveformData(self)


if __name__ == '__main__':
    mso46 = MSO46('USB0::0x0699::0x0527::C016770')
    mso46.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS')
