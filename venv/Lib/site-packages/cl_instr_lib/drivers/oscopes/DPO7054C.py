from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.oscope_tek_base import OscopeTekBase5k7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.acquire_5k_7k import Acquire_5k_7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.filesystem import Filesystem
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.horiz_5k_7k import Horiz_5k_7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.measurements_5k_7k import Measurements_5k_7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.screenshot import Screenshot
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.trigger_5k_7k.trigger_dpo_7k import Trigger_DPO_7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.vertical_5k_7k import Vertical_5k_7k
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.setup import Setup
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.waveform_data import WaveformData


class DPO7054C(OscopeTekBase5k7k):
    """Driver class for Tektronix DPO7054C Oscilloscope."""

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        super().__init__(visa_resource_name, logger,
            model_re='^DPO7054C$',
            sim_idn='TEKTRONIX,DPO7054C,C130422,CF:91.1CT FV:10.7.1 Build 21',
            sim_opt="'2SR: Double max Sampling,ASM: Advanced Search & Mark,DJA: Jitter and Eye Diagram Tools - "
                    "Advanced'",
            **kwargs)

        # Configure scope to make query responses match what this driver expects.
        self.write('HEADER', 'OFF')
        self.write('VERBOSE', 'ON')  # TODO: Fix the enum values to match the VERBOSE OFF forms.

        # Create the various scope subsystems, customize parameters as needed for model to model spec variations.
        # Note that we are passing self (the scope object) to the subsystems. That allows subsystems
        # to access attributes belonging to this class, its superclasses and even other subsystems.

        #: Object containing the **acquisition** controls. See `acquire class`_.
        self.acquire = Acquire_5k_7k(self)

        #: Object containing the **horizontal** controls. See `horizontal class`_.
        self.horizontal = Horiz_5k_7k(self)

        #: Object containing the **trigger** controls. See `trigger class`_.
        self.trigger = Trigger_DPO_7k(self)

        #: Object containing the **vertical channel** controls. See `vertical class`_.
        self.vertical = Vertical_5k_7k(self)

        #: Object containing methods for **filesystem** operations. See `filesystem class`_.
        self.filesystem = Filesystem(self)

        #: Object containing methods for **screenshot** operations. See `screenshot class`_.
        self.screenshot = Screenshot(self)

        #: Object containing methods for **scope setup** saving / recalling. See `setup class`_.
        self.setup = Setup(self)

        #: Object containing methods for **measurements** . See `measurements class`_.
        self.measurements = Measurements_5k_7k(self)

        #: Object containing methods for capturing **waveform_data** . See `waveform_data class`_.
        self.waveform_data = WaveformData(self)

        self.vertical._cmd_label_name = 'LABEL:NAME'  # This command varies by scope family.

if __name__ == '__main__':
    dpo7054c = DPO7054C('GPIB0::1')
    dpo7054c.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS', unused_args_handling='LOG_UNUSED')
