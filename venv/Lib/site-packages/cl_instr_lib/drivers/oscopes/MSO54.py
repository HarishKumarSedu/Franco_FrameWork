from cl_instr_lib.base_classes.tek_scopes.mso456.oscope_tek_base import OscopeTekBaseMso456
from cl_instr_lib.base_classes.tek_scopes.mso456.acquire import Acquire
from cl_instr_lib.base_classes.tek_scopes.mso456.horiz import Horiz
from cl_instr_lib.base_classes.tek_scopes.mso456.trigger import Trigger
from cl_instr_lib.base_classes.tek_scopes.mso456.vertical import Vertical
from cl_instr_lib.base_classes.tek_scopes.mso456.measurements import Measurements
from cl_instr_lib.base_classes.tek_scopes.dpo_mso_5k7k.filesystem import Filesystem
from cl_instr_lib.base_classes.tek_scopes.mso456.setup import Setup
from cl_instr_lib.base_classes.tek_scopes.mso456.screenshot import Screenshot
from cl_instr_lib.base_classes.tek_scopes.mso456.waveform_data import WaveformData


class MSO54(OscopeTekBaseMso456):

    def __init__(self, visa_resource_name=None, logger=None, **kwargs):
        super().__init__(visa_resource_name, logger,
                         model_re='^MSO54$',
                         sim_idn='TEKTRONIX,MSO54,C012671,CF:91.1CT FV:1.26.5.7750',
                         sim_opt="SUP5-DVM:License; Digital voltmeter and trigger frequency counter; Node locked,"
                                 "SUP5-SRPM:License; Power management serial triggering and analysis (SPMI); "
                                 "Node locked,BW5-2000:License; 2000 MHz bandwidth on 5 Series Oscilloscopes; "
                                 "Node locked",
                         **kwargs
                         )

        # Configure scope to make query responses match what this driver expects.
        self.write('HEADER', 'OFF')
        self.write('VERBOSE', 'ON')  # TODO: Fix the enum values to match the VERBOSE OFF forms.

        #: Attribute containing object that controls the **acquisition** system. See `acquire class`_.
        self.acquire = Acquire(self)

        #: Attribute containing object that controls **horizontal** timebase. See `horizontal class`_.
        self.horizontal = Horiz(self)

        #: Attribute containing object that controls the **vertical channels**. See `vertical class`_.
        #: The vertical object in turn composes channel objects for each channel named  CH1...CH4.
        self.vertical = Vertical(self, 4)

        #: Object containing methods for **filesystem** operations. See `filesystem class`_.
        self.filesystem = Filesystem(self)

        #: Object containing methods for **scope setup** saving / recalling. See `setup class`_.
        self.setup = Setup(self)

        #: Object containing methods for **screenshot** operations. See `screenshot class`_.
        self.screenshot = Screenshot(self)

        #: Object containing the **trigger** controls. See `trigger class`_.
        self.trigger = Trigger(self)

        #: Object containing the **measurement** controls. See `measurements class`_.
        self.measurements = Measurements(self)

        #: Object containing methods for capturing **waveform_data** . See `waveform_data class`_.
        self.waveform_data = WaveformData(self)


if __name__ == '__main__':
    mso54 = MSO54('USB0::0x0699::0x0522::C012671')
    mso54.debug_options(log_scpi=True, inst_error_handling='LOG_ALWAYS')
