from cl_test_station.test_station import TestStation
import time


class FrancoTestStation(TestStation):
    """Shared Franco TestStation class"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def sample_ts_function(self, param1, param2):
        print('this is a sample function')

    def initialize(self, **kwargs):
        super().initialize(**kwargs)

    def prepare_host_controllers(self, **kwargs):
        pass

    def shutdown(self, *args, **kwargs):
        super().shutdown(*args, **kwargs)

    def connect_all_controllers(self):
        """
        After connecting the Audiohub, initialize the MCLK2 pin (fpga resetb) and drive it high.

        :return: None
        """
        super().connect_all_controllers()  # Connects AH and enables global hi-z
        self.audio_hub.set_rail_voltage(1.8)
        # if isinstance(self.audio_hub, SimHostController):
        #     self.eeb.dut_dc.syd.write_register(self.eeb.dut_dc.syd.revision_id_addr, 160) #todo: note: it's hard-code 0xA0 to simulated syd reg of TZS revision_id
        time.sleep(2)

    def enter_tiadcs_reset(self):
        """
        in this method, set system_adcs_reset pin to low(enter reset).
        :return:
        :rtype:
        """
        self.pins.system_adcs_reset.output = 0

    def exit_tiadcs_reset(self):
        """
        in this method, below steps are taken:
            1. set system_adcs_reset pin to high (exit reset).
            2. then calling franco method config_ADCs()
        :return:
        :rtype:
        """
        self.pins.system_adcs_reset.output = 1
        self.eeb.franco.config_ADCs()

    def enter_franco_tc_reset(self):
        """
        in this method, set franco_tc_reset pin to low(enter reset).
        :return:
        :rtype:
        """
        self.pins.franco_tc_reset.output = 0

    def exit_franco_tc_reset(self):
        """
        in this method, set franco_tc_reset pin to high(exit reset).
        :return:
        :rtype:
        """
        self.pins.franco_tc_reset.output = 1

    def enter_fpga_reset(self):
        """
        in this method, set franco_fpga_reset pin to low(enter reset).
        :return:
        :rtype:
        """
        self.pins.fpga_reset.output = 0

    def exit_fpga_reset(self):
        """
        in this method, set franco_fpga_reset pin to low(enter reset).
        :return:
        :rtype:
        """
        self.pins.fpga_reset.output = 1

    def set_spi_bus_request(self, request1_release0 = 1):
        self.pins.franco_tc_spi_request.output = request1_release0

    def get_spi_bus_granted(self):
        return self.pins.franco_tc_spi_granted.output

    def enter_ripley_reset(self):
        self.pins.ripley_reset.output = 0

    def exit_ripley_reset(self):
        self.pins.ripley_reset.output = 1

    def enter_franco_adc_reset(self):
        """
        in this method, set franco_adc_reset pin to low(enter reset).
        :return:
        :rtype:
        """
        self.pins.franco_adc_reset.output = 0

    def exit_franco_adc_reset(self):
        """
        in this method, set franco_adc_reset pin to high(exit reset).
        :return:
        :rtype:
        """
        self.pins.franco_adc_reset.output = 1

    def enable_mb_power(self):
        """
        in this method, set mb_pwr_en pin to high to enable mb power.
        :return:
        :rtype:
        """
        self.pins.mb_pwr_en.output = 1

    def disable_mb_power(self):
        """
        in this method, set mb_pwr_en pin to low to disable mb power.
        :return:
        :rtype:
        """
        self.pins.mb_pwr_en.output = 0