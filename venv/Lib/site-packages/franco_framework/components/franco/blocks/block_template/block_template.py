from cl_test_station.register_map.custom_block import CustomBlock
from franco_framework.components.franco.blocks.block_template.enums import EnumTemplate


class BlockTemplate(CustomBlock):
    """Template class for new Block classes"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    # ToDo: uncomment if you add aliasing the alias YAML does not support
    # def alias(self, **kwargs):
    #     super().alias(**kwargs)
    #     self.attribute = custom logic

    def custom_func(self, arg:int):
        """
        Example of Block API function
        :param arg: value to set to an aliased field
        :type arg: int
        :return: None
        """
        self.some_field_alias.value = arg
