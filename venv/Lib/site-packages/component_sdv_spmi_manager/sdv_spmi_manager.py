"""
API for the SmartDV Spmi manager IP in the Audiohub's fpga. Clock rate enums assume mclk = 50MHz, not 48MHz
SmartDv databook: https://docs.cirrus.com/x/65DkDQ
author: Evan Canter <evan.canter@cirus.com>
"""
from cl_test_station.components.component.component import Component
from component_sdv_spmi_manager.blocks.spmi.enums import *
from typing import Union


class SdvSpmiManager(Component):

    @property
    def manager_id(self) -> int:
        """
        Gets the Manager ID configured in the fpga

        :return: Manager ID
        :rtype: int
        """
        return (self.block_apis.SPMI.control.value >> 2) & 0x3

    @manager_id.setter
    def manager_id(self, mngr_id:int):
        """
        Sets the manager id value in the fpga's control register (bits 3:2)

        :param mngr_id: Manager ID
        :type mngr_id: int
        :return: None
        """
        if mngr_id < 0 or mngr_id > 3:
            raise ValueError("Manager ID must be between 0 and 3")
        control_value = self.block_apis.SPMI.control.value & 0x3  # Control bits
        control_value |= mngr_id << 2
        self.block_apis.SPMI.control.value = control_value

    @property
    def spmi_version(self):
        """
        Gets the SPMI Spec version. BUG: Will read back 1.0 but uses SPMI 2.0

        :return: SpmiVersions enum
        :rtype: SpmiVersions
        """
        return SpmiVersions(self.block_apis.SPMI.version.value)

    @property
    def clock_rate(self) -> SpmiClockRates:
        """
        Reads the req prescaler value and returns SpmiClockRates Enum

        :return: SpmiClockRates enum
        :rtype: SpmiClockRates
        """
        return SpmiClockRates(self.block_apis.SPMI.req_prescaler.value)

    @clock_rate.setter
    def clock_rate(self, clk_rate:Union[SpmiClockRates, float]):
        """
        Sets the Spmi bus clock rate

        :param clk_rate: Desired bus speed, either SpmiClockRates enum or float in MHz
        :type clk_rate: SpmiClockRates, float
        :return: None
        """
        if type(clk_rate) is float:
            prescaler = 25/clk_rate  # Formula is rate = 100/(2*2*prescaler)
            if int(prescaler) != prescaler:  # Find closest clock speed
                prescaler = round(prescaler)
                self.log.warning(f"Given speed {clk_rate}MHz not valid, rounding to {25/prescaler:2.2f}")
            clk_rate = SpmiClockRates(prescaler)
        self.log.debug(f"Setting bus speed to {clk_rate}")
        self.block_apis.SPMI.req_prescaler.value = clk_rate.value

    @property
    def command_status(self) -> CommandStatus:
        """
        Returns status of current command.

        :return: Command Status, either done or processing
        :rtype: CommandStatus
        """
        return CommandStatus(self.block_apis.SPMI.req_command.value & 0x01)

    @property
    def last_command(self) -> CommandTypes:
        """
        Returns the type of the last command issued from the Manager

        :return: Type of command, eg Extended Register Read
        :rtype: CommandTypes
        """
        return CommandTypes(self.block_apis.SPMI.req_command.value >> 2)

