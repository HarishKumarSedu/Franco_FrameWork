# -*- coding: utf-8 -*-
"""
Created on Tue July 23 09:29:40 2019

@author: hnielson
"""

import sys
import logging
import time

idnString = '6810B'

class OpticalMeter_6810B():
    
    headDict = {
                'OMH-6708B': {
                                'wavelen_min_nm':800,
                                'wavelen_max_nm':1600,
                                'model':'OMH-6708B',
                },
                'OMH-6703B': {
                                'wavelen_min_nm':400,
                                'wavelen_max_nm':1100,
                                'model':'OMH-6703B',                                
                },    
                'OMH-6727B': {
                                'wavelen_min_nm':950,
                                'wavelen_max_nm':1650,
                                'model':'OMH-6727B',
                },    
    }
    
    currentHead = {}

    measRates = ["SLOW","MED","FAST"] #slow is 16 sample averaging, medium is four, fast is no averaging

    def __init__(self,rmHandle):
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('marv.inst.OpticalMeter_6810B')
        self.logger.info('Initializing OpticalMeter_6810B instrument')
        self.getHeadData()
        self.logger.info('Optical Head ' + self.currentHead['model'] + ' Attached')
        self.reset()

    def reset(self):
        # either power off supply & set to 0v output, or just execute *RST command
        self.rmHandle.write('*RST')        
        pass

    def getOntime(self): #returns the ON time in seconds
        rawtime = [float(i) for i in self.rmHandle.query('Time?').rstrip().split(':')]
        return rawtime[0]*3600 + rawtime[1]*60 + rawtime[2]
    
    def setMeasRate(self,rate):
        if rate in self.measRates:
            self.rmHandle.write("RATE " + rate)
        else:
            print("that rate is not known by instrument, acceptable options are:")
            print(self.measRates)
        

    def zeroPower(self):
        if self.rmHandle.query('ZERO?').rstrip() == str(0):#if instrument is not zeroed
            self.rmHandle.write('ZERO')
        elif self.rmHandle.query('ZERO?').rstrip() == str(1): #if instrument is alrready zeroed
            self.rmHandle.write('ZERO')
            self.rmHandle.write('ZERO')
        if self.rmHandle.query('ZERO?').rstrip() == str(2): #see if the instrument is zeroing 
            while self.rmHandle.query('ZERO?').rstrip() == str(2):
                time.sleep(1)
                pass
        else:
            print ("Error with zeroing")
            return
        return
    
    def getPowerMeas(self):
        return float(self.rmHandle.query('POWER?').rstrip())
        
    
    def setWavelen(self, wavelen_nm = 900):
        self.rmHandle.write('wave:mode NM')
        self.getHeadData()
        if type(self.currentHead) == dict:
            if (wavelen_nm > self.currentHead['wavelen_min_nm']) and (wavelen_nm < self.currentHead['wavelen_max_nm']):
                self.rmHandle.write('WAVE ' + str(wavelen_nm))
            else:
                print('Measurement Head does not support specified wavelength')
        else:
            print('setting wavelength on unsupported measurement head')
            self.rmHandle.write('WAVE ' + str(wavelen_nm))            
        return
    
    
    def getHeadData(self):
        headModel = self.rmHandle.query('HEAD:IDN?').rstrip().replace("ILX Lightwave,",'')
        if headModel in self.headDict.keys():
            self.currentHead = self.headDict[headModel]
            return self.currentHead
        else:
            print('Head model not known to driver')
            return headModel

    
    def close(self):
        #here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass

    pass

if __name__ == "__main__":
    import os
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()

    mi = instMgr.checkout(interface='GPIB',addr=13,moduleSuffix='6810B')
    
    mi.getHeadData()
    print (mi.getOntime())
    mi.zeroPower()
    mi.setWavelen(1000)
    print(mi.getPowerMeas())
    mi.reset()
    
    pass    