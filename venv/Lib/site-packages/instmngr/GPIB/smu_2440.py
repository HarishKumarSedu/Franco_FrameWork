# -*- coding: utf-8 -*-
"""
Created on Mon Jun 11 16:48:10 2018

@author: dkaroly

"""

import sys
from smu_2400 import Smu_2400
import time
import logging

idnString = 'MODEL 2440'

class Smu_2440( Smu_2400 ):

    instDict = {
        'source': {
            #param,          discrete values or range,                       SCPI cmd
            'func':         [{'v':'VOLT', 'i':'CURR'},                      ':SOUR:FUNC:MODE'],
            'vmode':        [{'fixed':'FIX', 'list':'LIST', 'sweep':'SWE'}, ':SOUR:VOLT:MODE'],
            'imode':        [{'fixed':'FIX', 'list':'LIST', 'sweep':'SWE'}, ':SOUR:CURR:MODE'],
            'vrange':       [(-42, 42),                                     ':SOUR:VOLT:RANG' ],
            'irange':       [(-5.25, 5.25),                                 ':SOUR:CURR:RANG'],
            'vautorange':   [{'on':'1', 'off':'0'},                         ':SOUR:VOLT:RANG:AUTO'],
            'iautorange':   [{'on':'1', 'off':'0'},                         ':SOUR:CURR:RANG:AUTO'],
            'vlevel':       [(-42, 42),                                     'SOUR:VOLT:IMM:AMPL'],
            'ilevel':       [(-5.25, 5.25),                                 'SOUR:CURR:IMM:AMPL'],
            'vprotect':     [(-42, 42),                                     'SOUR:VOLT:PROT'],                          
            'vlimit':       [(-42, 42),                                     'SENS:VOLT:DC:PROT:LEV'],
            'vtrip':        [None,                                          'SENS:VOLT:PROT:TRIP'],
            'ilimit':       [(-5.25, 5.25),                                 'SENS:CURR:DC:PROT:LEV'],
            'itrip':        [None,                                          'SENS:CURR:PROT:TRIP'],
            'delay':        [(0, 999.999),                                  ':SOUR:DEL'],
            'output':       [{'on':'1', 'off':'0'},                         ':OUTP:STAT'],
            'beeper':       [{'on':'1', 'off':'0'},                         ':SYST:BEEP:STAT'],            
            'offstate':     [{'himp':'HIMP', 'norm':'NORM', 'zero':'ZERO', 'guard':'GUAR'}, ':OUTP:SMODE']
        },
        'measure': {
            'concurrent':   [{'on':'1', 'off':'0'},                         ':SENS:FUNC:CONC'],  
            'functions_on': [{'curr', 'volt', 'res'},                       ':SENS:FUNC:ON'],
            'functions_off':[{'curr', 'volt', 'res'},                       ':SENS:FUNC:OFF'],
            'rmode':        [{'auto':'AUTO', 'manual':'MAN'},               ':RES:MODE'],
            'format':       [{'curr', 'volt', 'res', 'time', 'stat'},       ':FORM:ELEM'],
            'vautorange':   [{'on':'1', 'off':'0'},                         ':SENS:VOLT:RANG:AUTO'],
            'iautorange':   [{'on':'1', 'off':'0'},                         ':SENS:CURR:RANG:AUTO'],            
            'vlowlimit':    [(-21, 21),                                     ':SENS:VOLT:RANG:AUTO:LLIM'],
            'ilowlimit':    [(-105e-6, 105e-6),                             ':SENS:CURR:RANG:AUTO:LLIM'],
            'vrange':       [(-42, 42),                                     ':SENS:VOLT:RANG'],
            'irange':       [(-5.25, 5.25),                                 ':SENS:CURR:RANG'],
            'rrange':       [(0, 2.1e7),                                    ':SENS:CURR:RANG'],
            'vmeasspeed':   [(0.01, 10),                                    ':SENS:VOLT:NPLC'],
            'imeasspeed':   [(0.01, 10),                                    ':SENS:CURR:NPLC'],
            'filtercount':  [(1, 100),                                      ':SENS:AVER:COUN'],
            'filtertype':   [{'repeat':'REP', 'moving':'MOV'},              ':SENS:AVER:TCON'],
            'filterstate':  [{'on':'1', 'off':'0'},                         ':SENS:AVER:STAT'],
            'remsense':     [{'on':'1', 'off':'0'},                         ':SYST:RSEN'],
            'autozero':     [{'on':'1', 'off':'0', 'once':'ONCE'},          ':SYST:AZER:STAT']
        },
    }
     
    # Single SMU, no need for chDict           
    #chDict = {1: 'smua', 2: 'smub'}

    def __init__(self,rmHandle):
        super( Smu_2440, self ).__init__( rmHandle )
        self.logger.info('Initializing Smu_2440 instrument')        
    
if __name__ == "__main__":
    import os
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()
    smu = instMgr.checkout(interface='GPIB',addr=24, moduleSuffix='2440' )

    smu.reset()
    print(smu.getIdn())

#    smu.configVSrc()
#    smu.configIMeas()

    # Connect 100 Ohm load, to excerise usecases below.
    
    smu.source_param( 'beeper', 'off' ) # If on, toggling output on will beep.

    print( '\nUsecase: Force voltage, measure current, single measurements.' )
    smu.source_param( 'func', 'v' )
    smu.source_param( 'ilimit', 0.1)  # defines "real" compliance.  See p3-15
    smu.source_param( 'vlevel', 1 )
    smu.meas_param( 'concurrent', 'off' )
    smu.meas_param( 'functions_on', 'volt' )
    smu.meas_param( 'irange', 0.1 ) # set to avoid "range compliance". See p3-15
    smu.source_param( 'output','on')    
    print ( 'Voltage = {:.3f} V'.format( smu.meas('volt') ) )
    print ( 'Current = {:.3f} mA'.format ( 1e3 * smu.meas('curr') ) )   
    smu.source_param( 'output','off')
    time.sleep(1)
    
    print( '\nUsecase: Force voltage, measure current and resistance. concurrent measurements.' )
    smu.source_param( 'func', 'v' )
    smu.source_param( 'ilimit', 0.1)     # defines "real" compliance.  See p3-15
    smu.source_param( 'vlevel', 1 )
    smu.meas_param( 'concurrent', 'on' )
    smu.meas_param( 'rmode', 'manual' )
    smu.meas_param( 'functions_on', 'volt', 'curr', 'res' )
    smu.meas_param( 'format', 'volt', 'curr', 'res' )
    smu.meas_param( 'irange', 0.1 )  # set to avoid "range compliance". See p3-15 
    smu.source_param( 'output','on')    
    print( smu.meas() ) 
    smu.source_param( 'output','off')
    time.sleep(1)
    
    print( '\nUsecase: Force current, measure voltage, single measurements.' )
    smu.source_param( 'func', 'i' )
    smu.source_param( 'vlimit', 2)       # defines "real" compliance.  See p3-15
    smu.source_param( 'ilevel', 0.01 )
    smu.meas_param( 'concurrent', 'off' )
    smu.meas_param( 'functions_on', 'volt' )
    smu.meas_param( 'vrange', 2 )  # set to avoid "range compliance". See p3-15  
    smu.source_param( 'output','on')    
    print ( 'Current = {:.3f} mA'.format ( 1e3 * smu.meas('curr') ) )   
    print ( 'Voltage = {:.3f} V'.format( smu.meas('volt') ) )
    smu.source_param( 'output','off')
    time.sleep(1)

    print( '\nUsecase: Force current, measure voltage and resistance. concurrent measurements.' )
    smu.source_param( 'func', 'i' )
    smu.source_param( 'vlimit', 2)       # defines "real" compliance.  See p3-15
    smu.source_param( 'ilevel', 0.01 )
    smu.meas_param( 'concurrent', 'on' )
    smu.meas_param( 'rmode', 'manual' )
    # Format allows omitting data elements but does not re-order them! See
    # Keithley SourceMeter Manual (2400S-900-01 Rev. K / September 2011) p18-48.
    smu.meas_param( 'format', 'res', 'volt' )                                             
    smu.meas_param( 'functions_on', 'res', 'volt', 'curr' )    
    smu.meas_param( 'vrange', 2 )  # set to avoid "range compliance". See p3-15     
    smu.source_param( 'output','on')
    # Reading back the format gives actual ordering.
    print( '{} = {}'.format(  smu.meas_param('format'), smu.meas() ) )
    smu.source_param( 'output','off')
    time.sleep(1)

#    smu.close()
#    pass    
    # Expected results with 100 Ohm load:
    
    # Usecase: Force voltage, measure current, single measurements.
    # Voltage = 1.000 V
    # Current = 10.013 mA
    # 
    # Usecase: Force voltage, measure current and resistance. concurrent measurements.
    # [1.000066, 0.01001291, 99.87766]
    # 
    # Usecase: Force current, measure voltage, single measurements.
    # Current = 10.000 mA
    # Voltage = 0.999 V
    # 
    # Usecase: Force current, measure voltage and resistance. concurrent measurements.
    # ['VOLT', 'RES'] = [0.9985944, 99.85735]