# -*- coding: utf-8 -*-
"""
Created on Mon Nov 28 11:23:13 2016

@author: jmunger
"""

import sys
import re
import logging

idnString = 'E3631A'

outputTup = ('P6V','P25V','N25V')

class Supply_E3631A():
    """
    Class for controling Hewlett-Packard/Agilent/Keysight E3631A Triple Output
    DC Power Supply.
    """    
    
    def __init__(self,rmHandle):
        """ Constructor for Supply_E3631A class.
        
        Args:
            rmHandle - reference to a pyvisa.resources.gpib.GPIBInstrument object
                       which has been initialized to the address of the instrument.
                       rmHandle comes from the method instMgr.checkout, which
                       creates the object using 
                       :meth:`pyvisa.highlevel.ResourceManager.open_resource`
        """
        
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('msaval.inst.Supply_E3631A')
        self.logger.info('Initializing Supply_E3631A instrument')
    
    def reset(self):
        """ Resets the Power Supply to its factory defaults. Output off."""
        
        self.rmHandle.write('*RST')        
    
    def value( self, output, voltage=None, ilimit=None ):
        """ Queries or sets both the voltage and the current limit values of the
            specified output.
            
            Args:
                output (str): One of 'P6V','P25V','N25V'.
                voltage (None or numeric) : Voltage to set in Volts.
                ilimit ( None or numeric) : Current limit to set in Amps.
                
            Return:    
                If both voltage and ilimit are None, then the Power Supply is
                querried and the present voltage and current settings are 
                returned as a list of two float values.
                
            NOTE: Voltage and ilimit can be both set together. Alternatively, 
                  voltage can be set with ilimit==None. ilimit cannot be
                  set with voltage == None.
                    
        """
        
        if output.upper() not in outputTup:
            self.logger.error( type(self).__name__  + " value Error: invalid output '" + output + "'." )
            return
        
        # Avoids causing instrument error if user supplies non numeric value.
        if voltage != None and not isinstance( voltage, (int, float) ):
            self.logger.error( type(self).__name__  + " value Error: Illegal voltage '" + voltage + "'." )
            return
        
        if ilimit != None and not isinstance( ilimit, (int, float) ):
            self.logger.error( type(self).__name__  + " value Error: Illegal ilimit '" + ilimit + "'." )
            return
        
        if voltage == None and ilimit == None:
            retList = [0.0,0.0]
            retval = self.rmHandle.query( 'APPL? ' + output.upper())
            for item in range(2):
                retList[item] = float(re.sub('["]', '', retval.split(',')[item]))
            return retList

        elif voltage != None and ilimit == None:
            self.rmHandle.write( 'APPL ' + output.upper() + ',' + str(voltage) )
        
        elif voltage != None and ilimit != None:
            self.rmHandle.write( 'APPL ' + output.upper() + ',' + str(voltage) + ',' + str(ilimit) )
            
        else:
            self.logger.error( type(self).__name__  + ' value Error: Cannot specify ilimit without specifying voltage.' )

    def select( self, output=None ):
        """ Queries or sets which output is selected for display.
            
            Args:
                output (str): One of None, 'P6V','P25V','N25V'. Not case
                              sensitive. None queries the instrument.
                
            Return: Response to a query is one of  'P6V','P25V','N25V'.
                
            NOTE: Sends SCPI commmand INST whose actual purpose in the instrument
                  is to select which  output will be the target of subsequent
                  VOLT setting commands. The VOLT setting command is not used in
                  this class, instead it uses APPLY. See Supply_E3631A.value(). 
        """
        
        if output == None:
            retval = self.rmHandle.query( 'INST?' )
            return retval.rstrip()
        else:       
            if output.upper() not in outputTup:
                self.logger.error( type(self).__name__  + " value Error: invalid output '" + output + "'." )
                return
            self.rmHandle.write( 'INST ' + output.upper() )
        
        
    def state( self, state=None ):
        """
        Queries or writes the state of the Power Supply output (all 3 together).

        Args:
            mode (str): 
                None   - Queries instrument, returns one of the following strings:
                'ON'   - Power Supply is connected to the load.
                'OFF'  - Power Supply is DISconnected to the load.

           Args are not case sensitive. 
           Return values are always case shown above.
        """       

        if state == None:
            rslt = self.rmHandle.query('OUTP:STAT?')
            if '1' in rslt:
                return 'ON'
            else:
                return 'OFF'
        else:
            stateTup = ('ON', 'OFF')
            if state.upper() in stateTup:      
                self.rmHandle.write('OUTP:STAT ' + state.upper() )
            else:
                self.logger.error( type(self).__name__  + " state Error: Invalid state '" + state + "'.")        
                
    def meas( self, output, param ):
        """
        Queries or writes actual measured value of the specified parameter on
        on the specified output.
        
        Args:
            output (str): One of 'P6V','P25V','N25V'.            
            param (str): 
                'CURR' - measured Current (Amps)
                'POW'  - measured Power   (Watts)
                'VOLT' - measured Voltage (Volts)

           Args are not case sensitive. 
           Return values are of type float.
        """       
        
        if output.upper() not in outputTup:
            self.logger.error( type(self).__name__  + " meas Error: invalid output '" + output + "'." )
            return
        
        if param.upper() in ('CURR', 'VOLT'):       
            retval = self.rmHandle.query( 'MEAS:' + param.upper() + '? ' + output.upper() )
            return float( retval.rstrip() )
        else:
            self.logger.error( type(self).__name__  + " meas Error: invalid param '" + param + "'." ) 
            
    def status( self, outputs=outputTup ):
        """ Queries ISUM status of specified outputs.
        
        Args:
            outputs (tuple of str ): Contains any combination of 'P6V','P25V','N25V'.
                                     If outputs == None, status for all three
                                     outputs is returned.
        Return values:
            A dictionary whose keys are the elements of the Arg outputs, and whose
            values are the status of the corresponding output. Values can be:
            'OFF' - output is turned off.
            'CV'  - output is in constant voltage mode.                            
            'CC'  - output is in constant current mode.
            'UN'  - both the voltage and the current are unregulated, uh-oh!
        """
        
        if not isinstance( outputs, tuple ):
            outputs = (outputs,)
        
        if not set(outputs).issubset( outputTup ):
            self.logger.error( type(self).__name__  + " value Error: invalid outputs %s." % (outputs,) )
            return
           
        rsltDict = { 0: 'OFF', 1: 'CC', 2: 'CV',  3: 'UN'}

        rslt = {}
        for x in outputs:
            print( "x= '%s'" % x )
            outnum = 1 + outputTup.index( x ) 
            tmp = self.rmHandle.query( 'STAT:QUES:INST:ISUM' + str(outnum) + ':COND?' )
            tmp = int( tmp.rstrip() )
            rslt[x] = rsltDict[tmp]
            
        return rslt
                            
    def getIdn(self):
        """ Queries Power Supply and returns IDN string. """
        
        return self.rmHandle.query('*IDN?')
    
    def getError( self ):
        """ Queries Power Supply error buffer and returns string. """
        
        rslt = self.rmHandle.query('SYST:ERRor?')
        return rslt.rstrip()    
        
    def close(self):
        #TODO: might need to communicate with instrument manager to retire the instance listed there
        
        self.rmHandle.close()
        pass
    
if __name__ == "__main__":
    import os
    import time
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)
    print("MGRROOTDIR"+'-'*10 + mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()
    ps = instMgr.checkout( objName='supply', interface='GPIB', addr=6, moduleSuffix='E3631A' )
    ps.reset()
    print(ps.getIdn())
#    ps.setOutputVal(output='p5v')
    ps.value(output='P6V',voltage=5.0,ilimit=1.5)    
    ps.value(output='P25V',voltage=15.0,ilimit=0.1)
    ps.value(output='N25V',voltage=-15.0,ilimit=0.1)
    print(ps.value('P6V'))
    ps.state(state='OFF')
    time.sleep(1)
    print(ps.state())
    time.sleep(3)
    
#    ps.close()   