# Could not get relative imports to work as expected inside the package, so this horible hack for now...
if 'site-packages' in __file__:
    #print(__name__)
    from instmngr.BaseClasses import temp_BaseClass
else:
    from BaseClasses import temp_BaseClass

"""
Defines class for controlling AirJet temperature forcing system.

Note that AirJet communication uses GPIB.
"""

idnString = 'Model XE75 AirJet XE'

class Temp_AirJet(temp_BaseClass.Temp_BaseClass):
    """
    Class for controlling a AirJet temperature forcing system
    """

    def __init__(self, rm_handle):
        """Initializes connection to AirJet system."""

        super().__init__()

        self.rm_handle = rm_handle
        tmp = self.rm_handle.resource_name.split('::')
        gpib_info = '::'.join(tmp[0:2])
        self.__name = f"{__class__.__name__}({gpib_info})"

        print(f"{self.__name} initialized.")

    def __del__(self):
        """When object is garbage collected, this will get called to reset to a safe temp and close the COM port."""
        super().__del__()
        self.rm_handle.close()

    def get_temperature(self):
        response = self.rm_handle.query('?SP')
        return float(response)

    def measure_temperature(self):
        response = self.rm_handle.query('?PV')
        return float(response)

    def set_temperature(self, temperature_degc):
        cmd = f"SP{temperature_degc:.1f}"
        self.rm_handle.write(cmd)

    def getIdn(self):
        return self.rm_handle.query('*IDN?')

    def reset(self):
        self.rm_handle.write('*RST')

if __name__ == "__main__":
    from InstMgr import InstMgr
    instMgr = InstMgr()
    airjet = instMgr.checkout(interface='GPIB', addr=15, moduleSuffix='AirJet')
    print(f"airjet.measure_temperature() => {airjet.measure_temperature()}")