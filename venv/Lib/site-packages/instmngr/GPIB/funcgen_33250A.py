# -*- coding: utf-8 -*-
"""
Created on Mon Jun 18 16:35:30 2018

@author: dzhang

Function list:
     __init__(rmHandle)
    setSource(src=1,shape='SQU',freq=1000,vhi=1.8,vlo=0)
    setOutputImp(src=1,imp='inf')
    setOutputStat(src=1,state='off')
    setInstParam(param, value)
    setMeasParam(param='autorangev',val='on')
    getSrcInComplianceLimit()
    getMeas(param='voltage')
    reset()
    getIdn()
    close()

"""

import sys
import logging

idnString = '33250A'

class Funcgen_33250A():
    
    instDict = {'discrete':     {'function':['SIN',{'sine':'SIN','square':'SQU','ramp':'RAMP','pulse':'PULS','noise':'NOIS','dc':'DC'},'FUNC'],
                                'outputenable':['OFF',{'on':'ON', 'off':'OFF'},'OUTP'],
                                'outputload':['50',{'50Ohm':'50','highz':'INF'},'OUTP:LOAD'],
                                'voltunit':['VPP',{'Vpp':'VPP','Vrms':'VRMS','dBm':'DBM'},'VOLT:UNIT'],
                                'polarity':['NORM', {'normal':'NORM', 'inverted':'INV'},'OUTP:POL'],
                                'voltrange':['ON', {'on':'ON', 'off':'OFF', 'once':'ONCE'}, 'VOLT:RANG:AUTO'],
                                'triggersource':['IMM', {'immediate':'IMM', 'external':'EXT', 'bus':'BUS'}, 'TRIG:SOUR'],
                                'display':['ON',{'on':'ON', 'off':'OFF'},'DISP'],
                                },
    
                'continuous':   {'frequency':[1000,(1e-6,80e6),'FREQ'],
                               'voltage':[0.1,(1e-3,10),'VOLT'],
                               'Voltoffset':[0,(-10,10),'VOLT:OFFS'],      # also depends on Vpp, need to be less than Vmax-Vpp/2
                               'volthigh':[0.1,(1e-3,10),'VOLT:HIGH'],
                               'voltlow':[0,(-10,10),'VOLT:LOW'],
                               'dutycycle':[50, (20,80), 'FUNC:SQU:DCYC'],
                               'symmetry':[100, (0,100), 'FUNC:RAMP:SYMM'],
                               'pulseperiod':[1e-3,(20e-9,2e3), 'PULS:PER'],
                               'pulsewidth':[1e-4,(8e-9,2e3), 'PULS:WIDT'],
                               'pulsetransition':[5e-9, (5e-9,1e-3), 'PULS:TRAN'],
                               },
                }
    
    def __init__(self,rmHandle):
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('marv.inst.Funcgen_33250A')
        self.logger.info('Initializing Funcgen_33250A instrument')
    
    def setSource(self,src=1,shape='SQU',freq=1000,vhi=1.8,vlo=0):
        self.instDict['discrete']['function'][0] = shape
        self.rmHandle.write(self.instDict['discrete']['function'][2] + ' ' + shape)
        self.setInstParam('frequency', freq)
        self.setInstParam('volthigh', vhi)
        self.setInstParam('voltlow',vlo)
        pass

    def setOutputImp(self,src=1,imp='inf'):
        if imp == 'inf':
            value = 'highz'
        else:
            value = '50Ohm'
        self.setInstParam('outputload', value)
        pass
        
    def setOutputStat(self,src=1,state='off'):
        self.setInstParam('outputenable', state)
        pass  
    
    def quick_setOutput(self,shape='square',freq=1000,vpp=1.8,vos=0):
        # APPLy caommand - APPLy:<function> [<frequency> [,<amplitude> [,<offset>] ]]
        if shape in self.instDict['discrete']['function'][1].keys():
            sendStr = 'APPL:' + shape + ' ' + str(freq) + ', ' + str(vpp) + ' VPP,' + str(vos) + ' V'
            #print('Send APPLY command string ' + sendStr)
            self.rmHandle.write(sendStr)
        else:
            self.logger.warning('WARNING - entered parameter is not recognized by instrument' )
#            print('Error: entered parameter is not recognized by instrument' )
        pass

    def setInstParam(self,param, value):
        if param in self.instDict['discrete'].keys():
            if value in self.instDict['discrete'][param][1].keys():
                self.instDict['discrete'][param][0] = self.instDict['discrete'][param][1][value]
                sendStr = self.instDict['discrete'][param][2] + ' ' + self.instDict['discrete'][param][0]
                self.rmHandle.write(sendStr)
            else:
                self.logger.warning('Error: entered value is not recognized by instrument')
#                print('Error: entered value is not recognized by instrument' )
        elif param in self.instDict['continuous'].keys():
            if (self.instDict['continuous'][param][1] is None ) or ((self.instDict['continuous'][param][1] is not None) and (value >= self.instDict['continuous'][param][1][0] ) and (value <= self.instDict['continuous'][param][1][1] ) ):
                self.instDict['continuous'][param][0] = value
                sendStr = self.instDict['continuous'][param][2] + ' ' + str(self.instDict['continuous'][param][0])
                self.rmHandle.write(sendStr)
            else:
                self.logger.warning('WARNING - entered value is not recognized by instrument')
#                print('Error: entered value is not recognized by instrument' )        
        else:
            self.logger.warning('WARNING - entered value is not recognized by instrument')
#            print('Error: entered parameter is not recognized by instrument' )
        pass
      
    def reset(self):
        #  just execute *RST command
        self.rmHandle.write('*RST')        
        pass
    
    def getIdn(self):
        return self.rmHandle.query('*IDN?')
    
    def close(self):
        #here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass

    def errlog(self):
        err_cmd = 'SYST:ERR?'
        err_list = []
        while True:
            err_msg = self.rmHandle.query(err_cmd)
            if 'No error' in err_msg:
                break
            else:
                err_list.append(err_msg)
        return err_list

if __name__ == "__main__":
    import os,sys
    import time
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()
    sg = instMgr.checkout(interface='GPIB',addr='12',moduleSuffix='33250A')
    sg.reset()
    time.sleep(1)
    
    sg.setOutputImp()
    sg.setSource(shape='pulse', freq=0.2, vhi=5.5, vlo=0)
    sg.setInstParam('pulsewidth', 4.5)
    sg.setInstParam('pulsetransition', 5e-4)
    sg.setOutputStat(state='on')
    
    # time.sleep(3)
    # sg.setOutputStat(state='off')

    # instMgr.close()