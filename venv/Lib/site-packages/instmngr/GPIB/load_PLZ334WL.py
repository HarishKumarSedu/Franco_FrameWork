# -*- coding: utf-8 -*-
"""
Class for controling Kikusui Electronic Load Model PLZ164WL.

Created on Wed Sep 11 16:00 2019

@author: dkaroly
"""

from load_PLZ164WL import Load_PLZ164WL

idnString = 'PLZ334WL'

class Load_PLZ334WL(Load_PLZ164WL):
    """Class for controlling Kikusui Electronic Load Model PLZ164WL."""

    _ratings = dict()
    _ratings['COND'] = {'L': (3.3, 60e-6), 'M': (30.3, 600e-6), 'H': (330, 6e-3), 'units': 'Siemens (mhos)'}
    _ratings['CURR'] = {'L': (0, 1.0), 'M': (0, 10.0), 'H': (0, 100), 'units': 'Amps'}
    _ratings['POW'] = {'L': (0.33, 3.3), 'M': (3.3, 33.0), 'H': (33.0, 330.0), 'units': 'Watts'}
    _ratings['VOLT'] = {'L': (0.3, 4.0), 'H': (0.3, 30), 'units': 'Volts'}
    _ratings['SLEW'] = {'L': (50e-6, 500e-3), 'M': (500e-6, 5.0), 'H': (5.0e-3, 50), 'units': 'Amps/usec'}
    _rating_curr_max = 110  # Amps
    _rating_pow_max = 363   # Watts

    def __init__(self, rmHandle):
        """ Constructor for Load_PLZ164WL class.
        
        Args:
            rmHandle - reference to a pyvisa.resources.gpib.GPIBInstrument object
                       which has been initialized to the address of the instrument.
                       rmHandle comes from the method instMgr.checkout, which
                       creates the object using 
                       :meth:`pyvisa.highlevel.ResourceManager.open_resource`
        """

        self.rmHandle = rmHandle
        self.reset()


if __name__ == "__main__":
    import os, sys

    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    sys.path.append(mgrRootDir)
    print("MGRROOTDIR" + '-' * 10 + mgrRootDir)

    import InstMgr

    instMgr = InstMgr.InstMgr()
    load = instMgr.checkout(objName='load', interface='GPIB', addr=1, moduleSuffix='PLZ334WL')

    ps = instMgr.checkout(objName='supply', interface='GPIB', addr=9, moduleSuffix='PSM6003')
    scope = instMgr.checkout(objName='oscope', interface='USB', addr='0x0699::0x0503::C010643', moduleSuffix='DPO5034')

    # Setup for load debug
    scope.setInstParam('ch1position', -4)
    scope.setInstParam('ch1voltPerDiv', 0.5)
    scope.setInstParam('ch1bandwidth', 'FULL')

    scope.setInstParam('triggerLevel', .25)
    scope.setInstParam('triggerMode', 'normal')
    scope.setInstParam('triggerHoldoff', 'time')
    scope.setInstParam('triggerHoldofftime', 0)

    scope.setInstParam('acqMode', 'hirez')
    scope.setInstParam('secPerDiv', 5e-3)
    scope.setInstParam('horizPosition', 10)
    scope.setInstParam('runSingle', 'continuous')
    scope.setInstParam('runState', 'run')

    scope.trig_force()

    load.reset()
    load.state('off')
    load.mode('CC')
    load.range('CURR', 'L')
    load.level('CURR', 0)
    load.dynamics(cc_slew=0.2)
