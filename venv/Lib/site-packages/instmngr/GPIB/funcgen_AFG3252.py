# -*- coding: utf-8 -*-
"""
Created on Mon Nov 28 11:23:13 2016

@author: jmunger
"""

import sys

idnString = 'AFG3252'

class Funcgen_AFG3252():
    
    def __init__(self,rmHandle):
        self.rmHandle = rmHandle
    
    def init(self):
        # either power off outputs & set to 0v output, or just execute *RST command 
        self.rmHandle.write('*RST')
        pass

    def reset(self):
        #  just execute *RST command
        self.rmHandle.write('*RST')        
        pass
    
    def getIdn(self):
        return self.rmHandle.query('*IDN?')
        
    def setSource(self,src=1,shape='SQU',freq=1000,vhi=1.8,vlo=0):
        self.rmHandle.write('SOUR' + str(src) + ':FUNC:SHAP ' + shape)
        self.rmHandle.write('SOUR' + str(src) + ':VOLT:LOW ' + str(vlo))
        self.rmHandle.write('SOUR' + str(src) + ':VOLT:HIGH ' + str(vhi))
        self.rmHandle.write('SOUR' + str(src) + ':FREQ:MODE CW')
        self.rmHandle.write('SOUR' + str(src) + ':FREQ:CW ' + str(freq))
        pass

    def setOutputImp(self,src=1,imp='inf'):
        sendStr = 'OUTP' + str(src) + ':IMP ' + imp 
        self.rmHandle.write(sendStr)
        pass
    
    def setPulseSlew(self, src = 1, edge = 'leading', slewRate = 2.5e-9):
        if edge == 'leading':
            self.rmHandle.write('SOUR' + str(src) + ':PULS:TRAN:LEAD ' + str(slewRate))
        else:   #Trailing
            self.rmHandle.write('SOUR' + str(src) + ':PULS:TRAN:TRA ' + str(slewRate))
        pass
        
    def setDCLevel(self, src = 1, offset = 0):
        self.rmHandle.write('SOUR' + str(src) + ':FUNC DC')
        self.rmHandle.write('SOUR' + str(src) + ':VOLTAGE:OFFSET ' + str(offset))
        self.setOutputStat(src = src, state = 'on')
        pass
        
    def setOffset(self, src = 1, off = 0):
        self.rmHandle.write('SOUR' + str(src) + ':VOLTAGE:OFFSET ' + str(off))
        pass
        
    def setOutputStat(self,src=1,state='off'):
        sendStr = 'OUTP' + str(src) + ':STAT ' + state 
        self.rmHandle.write(sendStr)
        pass        
        
    
    def close(self):
        #here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.write('*RST') 
        self.rmHandle.close()
        pass
    
    