# -*- coding: utf-8 -*-
"""
Created on 10 Aug 2018 

@author: dzhang
"""

import sys
import logging

idnString = '34401A'

class Meter_34401A():

    instDict = {'DCV': {'range':[1e-3,None,'VOLT:DC:RANG'],
                        'autorange':['ON',{'on':'ON','off':'OFF'},'VOLT:DC:RANG:AUTO'],
                        'resolution':[1e-6,None,'VOLT:DC:RES'],
                        'numPLCycles':[1,(0.02,100),'VOLT:DC:NPLC'],
                        'analogFilt':['OFF',{'on':'ON','off':'OFF'},'VOLT:DC:FILT'],
                        'digitalAveFilt':['OFF',{'on':'ON','off':'OFF'},'VOLT:DC:FILT:DIG'],
                        'inputimpauto': ['OFF', {'off':'OFF', 'on':'ON'}, 'INP:IMP:AUTO']},
                'ACV': {'range':[1e-3,None,'VOLT:AC:RANG'],
                        'autorange':['ON',{'on':'ON','off':'OFF'},'VOLT:AC:RANG:AUTO']},
                'DCI': {'range':[1e-3,None,'CURR:DC:RANG'],
                        'autorange':['ON',{'on':'ON','off':'OFF'},'CURR:DC:RANG:AUTO']},
                'ACI': {'range':[1e-3,None,'CURR:AC:RANG'],
                        'autorange':['ON',{'on':'ON','off':'OFF'},'CURR:AC:RANG:AUTO']},
                'RES': {'range':[1e-3,None,'RES:RANG'],
                        'autorange':['ON',{'on':'ON','off':'OFF'},'RES:RANG:AUTO']},
                'FREQ': {'range':[1e-3,None,'FREQ:VOLT:RANG'],
                         'autorange':['ON',{'on':'ON','off':'OFF'},'FREQ:VOLT:AUTO']},
                'measType': ['"VOLT:DC"',{'DCV':'"VOLT:DC"','ACV':'"VOLT:AC"','DCI':'"CURR:DC"','ACI':'"CURR:AC"','RES':'"RES"','FREQ':'"FREQ"'},'FUNC '],
                'trigger': {'source':['IMM',{'bus':'BUS','immediate':'IMM','external':'EXT'},'TRIG:SOUR'],
                            'delaySec':[0,(0,3600),'TRIG:DEL'],
                            'autodelay':['OFF',{'on':'ON','off':'OFF'},'TRIG:DEL:AUTO'],
                            'samplesPerTrigger':[1,(1,50000),'SAMP:COUN'],
                            'triggerCount':[1,(1,50000),'TRIG:COUN'],
                            }
    }


    def __init__(self,rmHandle):
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('marv.inst.Meter_34401A')
        self.logger.info('Initializing Meter_34401A instrument')
    
    def reset(self):
        # either power off supply & set to 0v output, or just execute *RST command
        self.rmHandle.write('*RST')        
        pass
    
    def setMeas(self,measType='DCV'):
        if measType in self.instDict['measType'][1].keys():
            self.instDict['measType'][0] = self.instDict['measType'][1][measType]
            self.rmHandle.write(self.instDict['measType'][2] + self.instDict['measType'][0])
        else:
            self.logger.warning('WARNING - entered parameter is not recognized by instrument')
#            print('error- requested measurement type not known to instrument class')
            
    def setTrigParam(self,param='source',val='immediate'):
        self.setMeasParam(measType='trigger',param=param,val=val)
    
    def setMeasParam(self,measType='DCV',param='range',val=1e-3):
        inputValid = 0
        if param in self.instDict[measType].keys():
            if isinstance(self.instDict[measType][param][0],str):
                if val in self.instDict[measType][param][1].keys():
                    self.instDict[measType][param][0] = self.instDict[measType][param][1][val]
                    inputValid = 1
                else:
                    self.logger.warning('WARNING - requested discrete value not known to instrument class.  Valid options are ' + ','.join(self.instDict[measType][param][1].keys()))
#                    print('error - requested discrete value not known to instrument class.  Valid options are ' + ','.join(self.instDict[measType][param][1].keys()))
            else:
                if (self.instDict[measType][param][1] is None ) or ((self.instDict[measType][param][1] is not None) and (val >= self.instDict[measType][param][1][0] ) and (val <= self.instDict[measType][param][1][1] ) ):
                    self.instDict[measType][param][0] = val
                    inputValid = 1
        else:
            self.logger.warning('WARNING - requested parameter not known to instrument class')
#            print('error- requested parameter not known to instrument class')
        
        if inputValid == 1:
            self.rmHandle.write(self.instDict[measType][param][2] + ' ' + str(self.instDict[measType][param][0]))
            
    def getMeas(self):
        retval = self.rmHandle.query('read?')
        return float(retval)

    def getIdn(self):
        return self.rmHandle.query('*IDN?')
        
    def close(self):
        #here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass
    
    
    
if __name__ == "__main__":
    import os,sys
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()
    mi = instMgr.checkout( interface='GPIB', addr=18, moduleSuffix='34401A' )
    mi.reset()
    print(mi.getIdn())

    mi.setMeasParam('DCV', 'autorange', 'on')
    print(mi.getMeas())
    
    mi.close()
    pass    