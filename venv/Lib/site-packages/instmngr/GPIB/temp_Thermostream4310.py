# -*- coding: utf-8 -*-
"""
Created on Mon Nov 28 11:23:13 2016

@author: jmunger
"""

import sys
from time import sleep
import logging

idnString = 'TP04310A'  

class Temp_Thermostream4310():
    
    def __init__(self,rmHandle):
        self.rmHandle = rmHandle
        self.soakTimeSec = 120
        self.soakTimeElapsed = 0
        self.currentTempC = None
        self.currentStatus = None
        self.setTempC = None
        self.numDec = 0  #number of decimal places required for commands
        self.stateList = ['IDLE','TRANSITION','SOAK','AT_TEMP']
        self.state = 'IDLE'
        self.logger = logging.getLogger('marv.inst.Temp_Thermostream4310')
        self.logger.info('Initializing Temp_Thermostream4310 instrument')
    
    def reset(self):
        # either power off supply & set to 0v output, or just execute *RST command
        # reset will program best operating conditions, t-type thermocouple, dut control, and go to cycle screen.  this minimizes setup
        self.rmHandle.write('SRST')
        self.rmHandle.write('setn 5') # choose setpoint number 5 for all settings
        self.rmHandle.write('TESE 255') #unmask temp cycle bits
        pass
    
    def setSoakTimeSec(self,soaktime=120):
        self.soakTimeSec = soaktime
        self.rmHandle.write('SOAK ' + str(soaktime))
        
    def getCurrentTemp(self):
        # this is the DUT temp
        self.currentTempC = float(self.rmHandle.query('tmpd?').strip()) / (10 ** self.numDec)
        return self.currentTempC
        
    def getCurrentTempStatus(self):
        # this is the current status: 2 is transition, 0 is soak, 1 is at temperature
        self.rmHandle.write('tecr?')
        self.currentStatus = int(self.rmHandle.read().strip())
        return self.currentStatus


            
    def setTemp(self,setTempC=25.0):
        headState = int(self.rmHandle.query('head?').strip())
        if headState == 0: #head is up
            cmdResult = self.rmHandle.write('head 1') #put head down   
        self.setTempC = setTempC
        cmdStr = 'setp ' + str(int(setTempC * (10 ** self.numDec)))
        cmdResult = self.rmHandle.write(cmdStr)
        #sleep(3)
#        for i in range(10):
#            self.getCurrentTemp()
#            self.getCurrentTempStatus()
#            print('in eval: temp ' + str(self.currentTempC) + ' status ' + str(self.currentStatus) )
#            sleep(5)

        self.evalTempState()
        #later, add error checking here & return success or error code
        
    def evalTempState(self,marginC=0.5):
        self.getCurrentTemp()
#        self.getCurrentTempStatus()
        tempDelta = abs(self.currentTempC - self.setTempC)
        if self.state == 'IDLE':
            if tempDelta > marginC:
#            if self.currentStatus == 2:
                self.state = 'TRANSITION'
                self.logger.info('Temp Transition Begin from idle')
        elif self.state == 'TRANSITION':
            if tempDelta < marginC:
#            if self.currentStatus == 0:
                self.state = 'SOAK'
                self.logger.info('Temp  Soak Begin')
        elif self.state == 'SOAK':
            if self.soakTimeElapsed == self.soakTimeSec:
#            if self.currentStatus == 1:
                self.state = 'AT_TEMP'
                self.soakTimeElapsed = 0
                self.logger.info('Temp  Soak End')
        elif self.state == 'AT_TEMP':
            if tempDelta > marginC:
#            if self.currentStatus == 2:
                self.state = 'TRANSITION'
                self.logger.info('Temp Transition Begin')
            
            
        
    def waitTempTransition(self,marginC=0.5):
        timerTick = 1 #second
        while self.state == 'TRANSITION':
            self.logger.info('Temp transition: set ' + str(self.setTempC) + ' current ' + str(self.currentTempC))
            sleep(1)            
            self.evalTempState(marginC=marginC)
        while self.state == 'SOAK':
            sleep(timerTick)
            self.soakTimeElapsed = self.soakTimeElapsed + timerTick
            self.evalTempState(marginC=marginC)
        self.logger.info('At Temperature: set ' + str(self.setTempC) + ' current ' + str(self.currentTempC))
                
            
            
        
        
    def getIdn(self):
        return self.rmHandle.query('*IDN?')
        
    def close(self):
        #here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass
    
    
    
if __name__ == "__main__":
    import os,sys
    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),'..'))
    sys.path.append(mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()
    mi = instMgr.checkout(interface='GPIB',addr=19,moduleSuffix='TP04310A')
    mi.reset()
    print(mi.getIdn())
    
    print(str(mi.getCurrentTemp()))
    mi.setSoakTimeSec(60)
    mi.setTemp(70)
    mi.waitTempTransition(marginC=3)
    mi.setTemp(-20)
    mi.waitTempTransition(marginC=3)
    mi.setTemp(25)
    mi.waitTempTransition(marginC=1)
    

    
    
    mi.close()
    pass    