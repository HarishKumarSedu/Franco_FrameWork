# -*- coding: utf-8 -*-
"""
Created on Mon Nov 28 11:23:13 2016

@author: jmunger
"""

import oscope_DPO5034B
import logging

idnString = 'MSO5204'


# need dict with all settings
#  setting, mnemonic value, actual scpi value map if string / min/max limits if decimal, flag for whether value is changed.
#   --also need to be able to tell it how to generate the SCPI string given dict values.
#  with flag, can provide procs to read dict & update dict and also to get valid values.
#  update dict proc can have parameter to commit all changes to instrument.

# 

class Oscope_MSO5204(oscope_DPO5034B.Oscope_DPO5034B):

    def __init__(self, rmHandle):
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('marv.inst.Oscope_MSO5204')
        self.logger.info('Initializing Oscope_MSO5204 instrument')

    # TODO: Add additional code here to support MSO features.

    def close(self):
        # here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass


if __name__ == "__main__":
    import os
    import  sys

    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    sys.path.append(mgrRootDir)

    import InstMgr

    instMgr = InstMgr.InstMgr()
    scope = instMgr.checkout(interface='USB', addr='0x0699::0x0401::C001911', moduleSuffix='MSO5204')
    scope.reset()
    print(scope.getIdn())

    scope.setInstParam('recordLength', '1k')

    # scope.close()
    pass
