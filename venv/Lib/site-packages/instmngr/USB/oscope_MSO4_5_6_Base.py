# -*- coding: utf-8 -*-
"""
Created on Mon Jun 18 11:10:16 2018

@author: Paul Lennous
"""

import logging


class Oscope_MSO4_5_6_Base:
    # index 0 in options tuple could be assumed to be the default
    # here, innermost dict is command mnemonic:{current value,(possible values),
    # SCPI base command, flag that value needs updated to instrument}
    instDict = {
        'discrete': {
            'newbus': ['B1', {'B1': 'B1', 'B2': 'B2'}, 'BUS:ADDN', False],
            'deletebus': ['B1', {'B1': 'B1', 'B2': 'B2'}, 'BUS:DEL', False],
            'bus1type': ['I2C', {'ARINC429': 'ARINC429', 'audio': 'AUD', 'CAN': 'CAN', 'ethernet': 'ETH',
                                 'EUSB': 'EUSB', 'flexray': 'FLEXRAY', 'i2c': 'I2C', 'i3c': 'I3C', 'lin': 'LIN',
                                 'mdio': 'MDIO', 'MIL1553B': 'MIL1553B', 'parallel': 'PAR', 'RS232C': 'RS232C',
                                 'sent': 'sent', 'spi': 'SPI', 'spmi': 'SPMI', 'svid': 'SVID', 'usb': 'USB'},
                         'BUS:B1:TYP', False],
            'bus1spmiclocksource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'},
                                    'BUS:B1:SPMI:SCL:SOU', False],
            'bus1spmidatasource': ['CH2', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'},
                                   'BUS:B1:SPMI:SDAT:SOU', False],
            'displaywavebus1': ['ON', {'on': 'ON', 'off': 'OFF'}, 'DIS:WAVEV:BUS:B1:STATE', False],
            'bus2type': ['I2C', {'ARINC429': 'ARINC429', 'audio': 'AUD', 'CAN': 'CAN', 'ethernet': 'ETH',
                                 'EUSB': 'EUSB', 'flexray': 'FLEXRAY', 'i2c': 'I2C', 'i3c': 'I3C', 'lin': 'LIN',
                                 'mdio': 'MDIO', 'MIL1553B': 'MIL1553B', 'parallel': 'PAR', 'RS232C': 'RS232C',
                                 'sent': 'sent', 'spi': 'SPI', 'spmi': 'SPMI', 'svid': 'SVID', 'usb': 'USB'},
                         'BUS:B2:TYP', False],
            'bus2spmiclocksource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'},
                                    'BUS:B2:SPMI:SCL:SOU', False],
            'bus2spmidatasource': ['CH2', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'},
                                   'BUS:B2:SPMI:SDAT:SOU', False],
            'displaywavebus2': ['ON', {'on': 'ON', 'off': 'OFF'}, 'DIS:WAVEV:BUS:B2:STATE', False],
            'ch1state': ['ON', {'ON': 'ON', 'OFF': 'OFF'}, 'SEL:CH1', False],
            'ch2state': ['ON', {'ON': 'ON', 'OFF': 'OFF'}, 'SEL:CH2', False],
            'ch3state': ['ON', {'ON': 'ON', 'OFF': 'OFF'}, 'SEL:CH3', False],
            'ch4state': ['ON', {'ON': 'ON', 'OFF': 'OFF'}, 'SEL:CH4', False],
            'ch1coupling': ['DC', {'AC': 'AC', 'DC': 'DC', 'DCREJ': 'DCREJ'}, 'CH1:COUP', False],
            'ch2coupling': ['DC', {'AC': 'AC', 'DC': 'DC', 'DCREJ': 'DCREJ'}, 'CH2:COUP', False],
            'ch3coupling': ['DC', {'AC': 'AC', 'DC': 'DC', 'DCREJ': 'DCREJ'}, 'CH3:COUP', False],
            'ch4coupling': ['DC', {'AC': 'AC', 'DC': 'DC', 'DCREJ': 'DCREJ'}, 'CH4:COUP', False],
            'ch1bandwidth': ['FUL', {'20MHz': '20', '250MHz': '250', '500MHz': '500', 'FULL': 'FUL'}, 'CH1:BAN', False],
            'ch2bandwidth': ['FUL', {'20MHz': '20', '250MHz': '250', '500MHz': '500', 'FULL': 'FUL'}, 'CH2:BAN', False],
            'ch3bandwidth': ['FUL', {'20MHz': '20', '250MHz': '250', '500MHz': '500', 'FULL': 'FUL'}, 'CH3:BAN', False],
            'ch4bandwidth': ['FUL', {'20MHz': '20', '250MHz': '250', '500MHz': '500', 'FULL': 'FUL'}, 'CH4:BAN', False],
            'ch1termination': ['1000000', {'50Ohm': '50', '1MOhm': '1000000'}, 'CH1:TER', False],
            'ch2termination': ['1000000', {'50Ohm': '50', '1MOhm': '1000000'}, 'CH2:TER', False],
            'ch3termination': ['1000000', {'50Ohm': '50', '1MOhm': '1000000'}, 'CH3:TER', False],
            'ch4termination': ['1000000', {'50Ohm': '50', '1MOhm': '1000000'}, 'CH4:TER', False],
            'triggerType': ['EDG', {'edge': 'EDGE', 'width': 'WID', 'timeout': 'TIMEO', 'runt': 'RUN', 'window': 'WIN',
                                    'logic': 'LOGI', 'sethold': 'SETH', 'transition': 'TRAN', 'bus': 'BUS'},
                            'TRIG:A:TYP', False],
            'triggerAType': ['EDG', {'edge': 'EDGE', 'width': 'WID', 'timeout': 'TIMEO', 'runt': 'RUN', 'window': 'WIN',
                                     'logic': 'LOGI', 'sethold': 'SETH', 'transition': 'TRAN', 'bus': 'BUS'},
                             'TRIG:A:TYP', False],
            'triggerBType': ['EDG', {'edge': 'EDGE', 'width': 'WID', 'timeout': 'TIMEO', 'runt': 'RUN', 'window': 'WIN',
                                     'logic': 'LOGI', 'sethold': 'SETH', 'transition': 'TRAN', 'bus': 'BUS'},
                             'TRIG:B:TYP', False],
            'triggerMode': ['AUTO', {'auto': 'AUTO', 'normal': 'NORM'}, 'TRIG:A:MOD', False],
            'triggerAMode': ['AUTO', {'auto': 'AUTO', 'normal': 'NORM'}, 'TRIG:A:MOD', False],
            'triggerEdgeSource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'}, 'TRIG:A:EDGE:SOU',
                                  False],
            'triggerAEdgeSource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'}, 'TRIG:A:EDGE:SOU',
                                   False],
            'triggerBEdgeSource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4'}, 'TRIG:B:EDGE:SOU',
                                   False],
            'triggerEdgeSlope': ['RIS', {'rise': 'RIS', 'fall': 'FALL', 'either': 'EIT'}, 'TRIG:A:EDGE:SLO', False],
            'triggerAEdgeSlope': ['RIS', {'rise': 'RIS', 'fall': 'FALL', 'either': 'EIT'}, 'TRIG:A:EDGE:SLO', False],
            'triggerBEdgeSlope': ['RIS', {'rise': 'RIS', 'fall': 'FALL', 'either': 'EIT'}, 'TRIG:B:EDGE:SLO', False],
            'triggerAbusB1spmicondition': ['SSC', {'ssc': 'SSC', 'reset': 'RES', 'sleep': 'SLE', 'shutdown': 'SHUT',
                                                   'wakeup': 'WAK', 'masterread': 'MASTERREA',
                                                   'masterwrite': 'MASTERWRI', 'regread': 'REGREA',
                                                   'regwrite': 'REGWRI', 'devicedescmasterread': 'DEVICEDESCMASTERREA',
                                                   'devicedescslaveread': 'DEVICEDESCSLAVEREA',
                                                   'extregread': 'EXTREGREA', 'extregwrite': 'EXTREGWRIt',
                                                   'longextregread': 'LONGEXTREGREA',
                                                   'longextregwrite': 'LONGEXTREGWRI', 'reg0write': 'REG0WRI',
                                                   'authenticate': 'AUTH',
                                                   'transferbusownership': 'TRANS', 'parityerror': 'PARI'},
                                           'TRIG:A:BUS:B1:SPMI:COND', False],
            'triggerAbusB2spmicondition': ['SSC', {'ssc': 'SSC', 'reset': 'RES', 'sleep': 'SLE', 'shutdown': 'SHUT',
                                                   'wakeup': 'WAK', 'masterread': 'MASTERREA',
                                                   'masterwrite': 'MASTERWRI', 'regread': 'REGREA',
                                                   'regwrite': 'REGWRI', 'devicedescmasterread': 'DEVICEDESCMASTERREA',
                                                   'devicedescslaveread': 'DEVICEDESCSLAVEREA',
                                                   'extregread': 'EXTREGREA', 'extregwrite': 'EXTREGWRIt',
                                                   'longextregread': 'LONGEXTREGREA',
                                                   'longextregwrite': 'LONGEXTREGWRI', 'reg0write': 'REG0WRI',
                                                   'authenticate': 'AUTH',
                                                   'transferbusownership': 'TRANS', 'parityerror': 'PARI'},
                                           'TRIG:A:BUS:B2:SPMI:COND', False],
            'triggerAbusB1spminoresponse': ['FALSE', {'true': 'TRUE', 'false': 'FALSE'}, 'TRIG:A:BUS:B1:SPMI:NORESP',
                                            False],
            'triggerAbusB2spminoresponse': ['FALSE', {'true': 'TRUE', 'false': 'FALSE'}, 'TRIG:A:BUS:B2:SPMI:NORESP',
                                            False],
            'runSingle': ['RUNST', {'continuous': 'RUNST', 'single': 'SEQ'}, 'ACQ:STOPA', False],
            'runState': ['RUN', {'run': 'RUN', 'stop': 'STOP', 'OFF': 'OFF', 'ON': 'ON'}, 'ACQ:STATE', False],

            'measureannotationstate': ['OFF', {'off': 'OFF', 'auto': 'AUTO'}, 'MEASU:ANNOT:STATE', False],

            'meas1state': ['ON', {'on': 'ON', 'off': 'OFF'}, 'MEASU:MEAS1:STATE', False],
            'meas1type': ['AMPLITUDE', {'acrms': 'ACRMS', 'amplitude': 'AMPLITUDE', 'area': 'AREA', 'base': 'BASE',
                                        'burst': 'BURSTWIDTH', 'datarate': 'DATARATE', 'ddraos': 'DDRAOS',
                                        'ddraospertck': 'DDRAOSPERTCK', 'ddraosperui': 'DDRAOSPERUI',
                                        'ddraus': 'DDRAUS',
                                        'ddrauspertck': 'DDRAUSPERTCK', 'ddrausperui': 'DDRAUSPERUI',
                                        'ddrholddiff': 'DDRHOLDDIFF',
                                        'ddrsetupdiff': 'DDRSETUPDIFF', 'ddrtchabs': 'DDRTCHABS',
                                        'ddrtchaverage': 'DDRTCHAVERAGE',
                                        'ddrtckaverage': 'DDRTCKAVERAGE', 'ddrtclabs': 'DDRTCLABS',
                                        'ddrtclaverage': 'DDRTCLAVERAGE',
                                        'ddrterrmn': 'DDRTERRMN', 'ddrterrn': 'DDRTERRN', 'ddrtjitcc': 'DDRTJITCC',
                                        'ddrtjitduty': 'DDRTJITDUTY', 'ddrtjitper': 'DDRTJITPER', 'ddrtpst': 'DDRTPST',
                                        'ddrtrpre': 'DDRTRPRE', 'ddrtwpre': 'DDRTWPRE', 'ddrvixac': 'DDRVIXAC',
                                        'ddrtdqsck': 'DDRTDQSCK', 'delay': 'DEL', 'dj': 'DJ',
                                        'dpmovershoot': 'DPMOVERSHOOT',
                                        'dpmundershoot': 'DPMUNDERSHOOT', 'dpmripple': 'DPMRIPPLE',
                                        'dpmturnofftime': 'DPMTURNOFFTIME',
                                        'dpmturnontime': 'DPMTURNONTIME', 'fallslewrate': 'FALLSLEWRATE',
                                        'falltime': 'FALLTIME',
                                        'frequency': 'FREQ', 'high': 'HIGH', 'hightime': 'HIGHTIME',
                                        'imdapowerquality': 'IMDAPOWERQUALITY',
                                        'imdaharmonics': 'IMDAHARMONICS', 'imdainputvoltage': 'IMDAINPUTVOLTAGE',
                                        'imdainputcurrent': 'IMDAINPUTCURRENT',
                                        'imdainputpower': 'IMDAINPUTPOWER', 'imdaphasordiagram': 'IMDAPHASORDIAGRAM',
                                        'imdaefficiency': 'IMDAEFFICIENCY', 'imdalineripple': 'IMDALINERIPPLE',
                                        'low': 'LOW', 'lowtime': 'LOWTIME', 'maximum': 'MAX', 'mean': 'MEAN',
                                        'minimum': 'MINI', 'nduty': 'NDU', 'nperiod': 'NPERIOD', 'novershoot': 'NOV',
                                        'nwidth': 'NWIDTH', 'pduty': 'PDUTY', 'period': 'PERIOD', 'phase': 'PHASE',
                                        'pk2pk': 'PK2P',
                                        'povershoot': 'POVERSHOOT', 'pwidth': 'PWIDTH', 'qfactor': 'QFACTOR ',
                                        'riseslewrate': 'RISESLEWRATE', 'risetime': 'RISETIME', 'randomjitter': 'RJ',
                                        'setup': 'SETUP',
                                        'timeoutsidelevel': 'TIMEOUTSIDELEVEL',
                                        'tjber': 'TJBER', 'unitinterval': 'UNITINTERVAL'}, 'MEASU:MEAS1:TYP', False],
            'meas1source1': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                                     'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                                     'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4',
                                     'histogram': 'HIS'}, 'MEASU:MEAS1:SOU1', False],
            'meas1source2': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                                     'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                                     'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                             'MEASU:MEAS1:SOU2', False],
            'meas1source3': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4', 'math1': 'MATH1',
                                     'math2': 'MATH2',
                                     'math3': 'MATH3', 'math4': 'MATH4', 'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3',
                                     'ref4': 'REF4'}, 'MEASU:MEAS1:SOU3', False],
            'meas1source4': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                                     'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                                     'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                             'MEASU:MEAS1:SOU4', False],
            'meas1delayedge1': ['RIS', {'rise': 'RIS', 'fall': 'FALL'}, 'MEASU:MEAS1:DEL:EDGE1', False],
            'meas1delayedge2': ['RIS', {'rise': 'RIS', 'fall': 'FALL'}, 'MEASU:MEAS1:DEL:EDGE2', False],

            'meas2state': ['ON', {'on': 'ON', 'off': 'OFF'}, 'MEASU:MEAS2:STATE', False],
            'meas2type': ['AMPLITUDE', {'acrms': 'ACRMS', 'amplitude': 'AMPLITUDE', 'area': 'AREA', 'base': 'BASE',
                                        'burst': 'BURSTWIDTH', 'datarate': 'DATARATE', 'ddraos': 'DDRAOS',
                                        'ddraospertck': 'DDRAOSPERTCK', 'ddraosperui': 'DDRAOSPERUI',
                                        'ddraus': 'DDRAUS',
                                        'ddrauspertck': 'DDRAUSPERTCK', 'ddrausperui': 'DDRAUSPERUI',
                                        'ddrholddiff': 'DDRHOLDDIFF',
                                        'ddrsetupdiff': 'DDRSETUPDIFF', 'ddrtchabs': 'DDRTCHABS',
                                        'ddrtchaverage': 'DDRTCHAVERAGE',
                                        'ddrtckaverage': 'DDRTCKAVERAGE', 'ddrtclabs': 'DDRTCLABS',
                                        'ddrtclaverage': 'DDRTCLAVERAGE',
                                        'ddrterrmn': 'DDRTERRMN', 'ddrterrn': 'DDRTERRN', 'ddrtjitcc': 'DDRTJITCC',
                                        'ddrtjitduty': 'DDRTJITDUTY', 'ddrtjitper': 'DDRTJITPER', 'ddrtpst': 'DDRTPST',
                                        'ddrtrpre': 'DDRTRPRE', 'ddrtwpre': 'DDRTWPRE', 'ddrvixac': 'DDRVIXAC',
                                        'ddrtdqsck': 'DDRTDQSCK', 'delay': 'DEL', 'dj': 'DJ',
                                        'dpmovershoot': 'DPMOVERSHOOT',
                                        'dpmundershoot': 'DPMUNDERSHOOT', 'dpmripple': 'DPMRIPPLE',
                                        'dpmturnofftime': 'DPMTURNOFFTIME',
                                        'dpmturnontime': 'DPMTURNONTIME', 'fallslewrate': 'FALLSLEWRATE',
                                        'falltime': 'FALLTIME',
                                        'frequency': 'FREQ', 'high': 'HIGH', 'hightime': 'HIGHTIME',
                                        'imdapowerquality': 'IMDAPOWERQUALITY',
                                        'imdaharmonics': 'IMDAHARMONICS', 'imdainputvoltage': 'IMDAINPUTVOLTAGE',
                                        'imdainputcurrent': 'IMDAINPUTCURRENT',
                                        'imdainputpower': 'IMDAINPUTPOWER', 'imdaphasordiagram': 'IMDAPHASORDIAGRAM',
                                        'imdaefficiency': 'IMDAEFFICIENCY', 'imdalineripple': 'IMDALINERIPPLE',
                                        'low': 'LOW', 'lowtime': 'LOWTIME', 'maximum': 'MAX', 'mean': 'MEAN',
                                        'minimum': 'MINI', 'nduty': 'NDU', 'nperiod': 'NPERIOD', 'novershoot': 'NOV',
                                        'nwidth': 'NWIDTH', 'pduty': 'PDUTY', 'period': 'PERIOD', 'phase': 'PHASE',
                                        'pk2pk': 'PK2P',
                                        'povershoot': 'POVERSHOOT', 'pwidth': 'PWIDTH', 'qfactor': 'QFACTOR ',
                                        'riseslewrate': 'RISESLEWRATE', 'risetime': 'RISETIME', 'randomjitter': 'RJ',
                                        'setup': 'SETUP',
                                        'timeoutsidelevel': 'TIMEOUTSIDELEVEL',
                                        'tjber': 'TJBER', 'unitinterval': 'UNITINTERVAL'}, 'MEASU:MEAS2:TYP', False],
            'meas2source1': ['CH1',
                             {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                              'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                              'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4',
                              'histogram': 'HIS'}, 'MEASU:MEAS2:SOU1', False],
            'meas2source2': ['CH1',
                             {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                              'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                              'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                             'MEASU:MEAS2:SOU2', False],
            'meas2source3': ['CH1',
                             {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                              'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                              'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                             'MEASU:MEAS2:SOU3', False],
            'meas2source4': ['CH1',
                             {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                              'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                              'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                             'MEASU:MEAS2:SOU4', False],
            'meas2delayedge1': ['RIS',
                                {'rise': 'RIS', 'fall': 'FALL', 'both': 'BOTH', 'same': 'SAME', 'oppositeas': 'OPP'},
                                'MEASU:MEAS2:DEL:EDGE1', False],
            'meas2delayedge2': ['RIS',
                                {'rise': 'RIS', 'fall': 'FALL', 'both': 'BOTH', 'same': 'SAME', 'oppositeas': 'OPP'},
                                'MEASU:MEAS2:DEL:EDGE2', False],

            'savefiledestination': ['', {}, 'SAVEON:FILE:DEST', False],
            'savefilename': ['', {}, 'SAVEON:FILE:NAME', False],
            'saveonimage': ['ON', {'on': 'ON', 'off': 'OFF'}, 'SAVEON:IMAG', False],
            'saveonimagefileformat': ['JPG', {'png': 'PNG', 'bmp': 'BMP', 'jpg': 'JPG'}, 'SAVEON:IMAG:FILEF', False],
            'saveontrigger': ['ON', {'on': 'ON', 'off': 'OFF'}, 'SAVEON:TRIG', False],
            'saveonwaveform': ['ON', {'on': 'ON', 'off': 'OFF'}, 'SAVEON:WAVE', False],
            'saveonwaveformfileformat': ['SPREADS', {'internal': 'INTERN', 'spreadsheet': 'SPREADS'},
                                         'SAVEON:WAVE:FILEF', False],
            'saveonwaveformsource': ['CH1', {'ch1': 'CH1', 'ch2': 'CH2', 'ch3': 'CH3', 'ch4': 'CH4',
                                             'math1': 'MATH1', 'math2': 'MATH2', 'math3': 'MATH3', 'math4': 'MATH4',
                                             'ref1': 'REF1', 'ref2': 'REF2', 'ref3': 'REF3', 'ref4': 'REF4'},
                                     'SAVEON:WAVE:SOUR', False],
            'actoneventtriggersaveimage': ['OFF', {'on': 'ON', 'off': 'OFF'}, 'ACTONEV:TRIG:ACTION:SAVEIMAG:STATE',
                                           False],
            'saveoneventfileformat': ['JPG', {'bmp': 'BMP', 'jpg': 'JPG', 'png': 'PNG'}, 'SAVEONEVent:IMAGe:FILEFormat',
                                      False]
        },

        'continuous': {
            'ch1position': [0, (-8, 8), 'CH1:POS'],
            'ch2position': [0, (-8, 8), 'CH2:POS'],
            'ch3position': [0, (-8, 8), 'CH3:POS'],
            'ch4position': [0, (-8, 8), 'CH4:POS'],
            'ch1offset': [0, (-10, 10), 'CH1:OFFS'],
            'ch2offset': [0, (-10, 10), 'CH2:OFFS'],
            'ch3offset': [0, (-10, 10), 'CH3:OFFS'],
            'ch4offset': [0, (-10, 10), 'CH4:OFFS'],
            'ch1voltPerDiv': [1, None, 'CH1:SCA'],
            'ch2voltPerDiv': [1, None, 'CH2:SCA'],
            'ch3voltPerDiv': [1, None, 'CH3:SCA'],
            'ch4voltPerDiv': [1, None, 'CH4:SCA'],
            'recordLength': [31250000, None, 'HOR:MODE:RECO'],
            'secPerDiv': [2e-6, (200e-12, 1e3), 'HOR:MODE:SCA'],
            'horizPosition': [50, (0, 100), 'HOR:POS'],
            'hormodesamplerate':[3e9, (1e-3, 6e9), 'HOR:MODE:SAMPLER'],
            'triggerLevelch1': [0, None, 'TRIG:A:LEV:CH1'],
            'triggerLevelch2': [0, None, 'TRIG:A:LEV:CH2'],
            'triggerLevelch3': [0, None, 'TRIG:A:LEV:CH3'],
            'triggerLevelch4': [0, None, 'TRIG:A:LEV:CH4'],
            'triggerpulseWidthlimitH': [1e-10, None, 'TRIG:A:PUL:WID:HIGHL'],
            'triggerpulseWidthlimitL': [1e-10, None, 'TRIG:A:PUL:WID:LOWL'],
            'bus1spmisclockthreshold': [1e-1, None, 'BUS:B1:SPMI:SCL:THR'],
            'bus1spmisdatathreshold': [1e-1, None, 'BUS:B1:SPMI:SDAT:THR'],
            'displaywaveviewbus1verticalposition': [0, None, 'DIS:WAVEV:BUS:B1:VERT:POS'],
            'triggerAbusB1spmidatasize': [1, None, 'TRIG:A:BUS:B1:SPMI:DAT:SIZ'],
            'triggerAbusB1spmidatavalue': ['XXXXXXXX', None, 'TRIG:A:BUS:B1:SPMI:DAT:VAL'],
            'triggerAbusB1spmimasteraddressvalue': ['XX', None, 'TRIG:A:BUS:B1:SPMI:MASTERADDR:VAL'],
            'triggerAbusB1spmiregisteraddressvalue': ['XXXXXXXX', None, 'TRIG:A:BUS:B1:SPMI:REGISTERADDR:VAL'],
            'triggerAbusB1spmislaveaddressvalue': ['XXXX', None, 'TRIG:A:BUS:B1:SPMI:SLAVERADDR:VAL'],
            'bus2spmisclockthreshold': [1e-1, None, 'BUS:B2:SPMI:SCL:THR'],
            'bus2spmisdatathreshold': [1e-1, None, 'BUS:B2:SPMI:SDAT:THR'],
            'displaywaveviewbus2verticalposition': [0, None, 'DIS:WAVEV:BUS:B2:VERT:POS'],
            'triggerAbusB2spmidatasize': [1, None, 'TRIG:A:BUS:B2:SPMI:DAT:SIZ'],
            'triggerAbusB2spmidatavalue': ['XXXXXXXX', None, 'TRIG:A:BUS:B2:SPMI:DAT:VAL'],
            'triggerAbusB2spmimasteraddressvalue': ['XX', None, 'TRIG:A:BUS:B2:SPMI:MASTERADDR:VAL'],
            'triggerAbusB2spmiregisteraddressvalue': ['XXXXXXXX', None, 'TRIG:A:BUS:B2:SPMI:REGISTERADDR:VAL'],
            'triggerAbusB2spmislaveaddressvalue': ['XXXX', None, 'TRIG:A:BUS:B2:SPMI:SLAVERADDR:VAL'],
            'saveimage': ['image', None, 'SAV:IMAG'],
            'saveoneventfiledestination': ['C:', None, 'SAVEONEV:FILED'],
            'saveoneventfilename': ['File', None, 'SAVEONEV:FILEN']
        },
    }

    def reset(self):
        #  just execute *RST command
        self.rmHandle.write('*RST')
        pass

    # later add method that takes variable arguments to do several parameters at once & uses write flag to commit values to inst after all parameters are processed.
    # Here: param is a string, val is an int, real, or string
    def setInstParam(self, param, val, commit=1):
        if param in self.instDict['discrete'].keys():
            if val in self.instDict['discrete'][param][1].keys():
                self.instDict['discrete'][param][0] = self.instDict['discrete'][param][1][val]
                self.rmHandle.write(self.instDict['discrete'][param][2] + ' ' + self.instDict['discrete'][param][0])
            else:
                self.logger.warning(
                    'WARNING - requested discrete value not known to instrument class.  Valid options are ' + ','.join(
                        self.instDict['discrete'][param][1].keys()))
        elif param in self.instDict['continuous'].keys():
            if (self.instDict['continuous'][param][1] is None) or (
                    (self.instDict['continuous'][param][1] is not None) and (
                    val >= self.instDict['continuous'][param][1][0]) and (
                            val <= self.instDict['continuous'][param][1][1])):
                self.instDict['continuous'][param][0] = val
                self.rmHandle.write(
                    self.instDict['continuous'][param][2] + ' ' + str(self.instDict['continuous'][param][0]))
            pass
        else:
            self.logger.warning('WARNING - requested parameter not known to instrument class')

        pass

    def __init__(self, rmHandle):
        self.rmHandle = rmHandle
        self.logger = logging.getLogger('marv.inst.Oscope_MSO46')
        self.logger.info('Initializing Oscope_MSO46 instrument')

    def get_meas(self, index=1):
        # self.rmHandle.write('MEASUrement:MEAS1:STATE ON')
        # time.sleep(0.2)
        cmd = f'MEASU:MEAS{index}:MEAN?'
        return self.rmHandle.query(cmd)

    def get_current_meas(self, index=1):
        """
        Get the current measurement result
        :param index: measurement index
        :return: return the latest measurement result
        """
        cmd = f'MEASU:MEAS{index}:RESU:CURR:MEAN?'
        return self.rmHandle.query(cmd)

    def close(self):
        # here, might need to communicate with instrument manager to retire the instance listed there
        self.rmHandle.close()
        pass

    def spmi_config(self, tthreshold, vscale, voffset, sweep, horizposition, trigtype):
        self.reset()
        setuplist = [('ch1state', 'ON'),
                     ('ch2state', 'ON'),
                     ('ch1coupling', 'DC'),
                     ('ch1bandwidth', 'FULL'),
                     ('ch1termination', '1MOhm'),
                     ('ch1voltPerDiv', vscale),
                     ('ch1offset', voffset),
                     ('ch2coupling', 'DC'),
                     ('ch2bandwidth', 'FULL'),
                     ('ch2termination', '1MOhm'),
                     ('ch2voltPerDiv', vscale),
                     ('ch2offset', voffset),
                     ('secPerDiv', sweep),
                     ('horizPosition', horizposition),
                     ('newbus', 'B1'),
                     ('bus1type', 'spmi'),
                     ('bus1spmiclocksource', 'ch1'),
                     ('bus1spmidatasource', 'ch2'),
                     ('bus1spmisclockthreshold', tthreshold),
                     ('bus1spmisdatathreshold', tthreshold),
                     ('displaywavebus1', 'on'),
                     ('triggerAType', 'bus'),
                     ('triggerAMode', 'normal'),
                     ('triggerAbusB1spmicondition', trigtype)
                     ]
        for param, val in setuplist:
            print('>>> ', param, val)
            self.setInstParam(param=param, val=val)

    def save_trigger_images_config(self, filepath, filename, filetype):
        setuplist = [('saveoneventfiledestination', filepath),
                     ('saveoneventfilename', filename),
                     ('saveoneventfileformat', filetype),
                     ('actoneventtriggersaveimage', 'on')
                     ]
        for param, val in setuplist:
            print('>>> ', param, val)
            self.setInstParam(param=param, val=val)

    def save_trigger_images_enable(self):
        setuplist = [
                     ('actoneventtriggersaveimage', 'on')
                     ]
        for param, val in setuplist:
            print('>>> ', param, val)
            self.setInstParam(param=param, val=val)

    def save_trigger_images_disable(self):
        setuplist = [
                     ('actoneventtriggersaveimage', 'off')
                     ]
        for param, val in setuplist:
            print('>>> ', param, val)
            self.setInstParam(param=param, val=val)

    def save_image(self):
        setuplist = [('ch1state', 'ON'),
                     ('ch2state', 'ON'),
                     ('ch1coupling', 'DC'),
                     ('ch1bandwidth', 'FULL'),
                     ('ch1termination', '1MOhm'),
                     ('ch1voltPerDiv', vscale),
                     ('ch1offset', voffset),
                     ('ch2coupling', 'DC'),
                     ('ch2bandwidth', 'FULL'),
                     ('ch2termination', '1MOhm'),
                     ('ch2voltPerDiv', vscale),
                     ('ch2offset', voffset),
                     ('secPerDiv', sweep),
                     ('horizPosition', horizposition),
                     ('newbus', 'B1'),
                     ('bus1type', 'spmi'),
                     ('bus1spmiclocksource', 'ch1'),
                     ('bus1spmidatasource', 'ch2'),
                     ('bus1spmisclockthreshold', tthreshold),
                     ('bus1spmisdatathreshold', tthreshold),
                     ('displaywavebus1', 'on'),
                     ('triggerAType', 'bus'),
                     ('triggerAMode', 'normal'),
                     ('triggerAbusB1spmicondition', trigtype)
                     ]
        for param, val in setuplist:
            print('>>> ', param, val)
            self.setInstParam(param=param, val=val)
        pass
    
    def save_capture(self, filepath='C:/', filename='capture', filetype='.png'):
        '''
        This function is for take a screenshot and save to specified file.
        '''
        cmd = 'SAVE:IMAGE "' + filepath + filename + filetype + '"'
        self.rmHandle.write(cmd)

    def set_ch_label(self, ch=1, label='ch1'):
        """
        To label scope channels
        :param ch: channel number
        :param label: channel label
        :return: no return
        """
        cmd = f"CH{ch}:LAB:NAM '{label}'"
        self.rmHandle.write(cmd)

    def acq_state(self, state=None):
        """
        Starts or stops acquisition
        :param state: state of the acquisition which can be ON/OFF/RUN/STOP or None (default) for query the state
        :return: state of acquisation. '1' means ON and '0' means OFF
        """
        if state == None:
            cmd = f'ACQ:STATE?'
            return self.rmHandle.query(cmd).rstrip('\n')
        if state.upper() in ['ON', 'OFF', 'RUN', 'STOP']:
            cmd = f'ACQ:STATE {state.upper()}'
            self.rmHandle.write(cmd)
            return None