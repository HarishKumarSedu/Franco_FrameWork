# -*- coding: utf-8 -*-
"""
Class for controlling Rodhe & Schwarz NRP6A Average Power Sensor.


@author: dkaroly
"""

import sys
import inspect
from pwrsensor_NRPZ91 import Pwrsensor_NRPZ91

idnString = 'NRP6A'


class Pwrsensor_NRP6A(Pwrsensor_NRPZ91):
    """Class for controlling Rodhe & Schwarz NRP6A Average Power Sensor.
    """
    legal_on_off = {'ON': 2, 'OFF': 1}
    legal_on_off_rev = dict((v, k) for k, v in legal_on_off.items())


if __name__ == "__main__":
    import os
    import math
    import time

    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    sys.path.append(mgrRootDir)
    print("MGRROOTDIR" + '-' * 10 + mgrRootDir)

    import InstMgr
    instMgr = InstMgr.InstMgr()

    pwrsensor = instMgr.checkout(objName='pwrsensor', interface='USB', addr='0x0021::150176', moduleSuffix='NRP6A')
    pwrsensor.meas_config(freq_hz=100e6, auto_range='OFF', range='HIGH')
    pwrsensor.averaging('OFF')

    siggen = instMgr.checkout(objName='siggen', interface='GPIB', addr=28, moduleSuffix='SMB100A')

    # Set the RF output frequency and level:
    siggen.power(0)        # 0 dBm
    siggen.freq(100e6)     # 100MHz

    siggen.modulation_pulse('OFF', period_sec=0.001, duty_pcnt=100)

    # Turn output on:
    siggen.output('ON')
    time.sleep(1)

    reading_Watts = pwrsensor.meas_immed()
    print('With duty_pcnt = 100%')
    print(f'Sensor reading = {reading_Watts:3.2e} W = {10 * math.log10(reading_Watts / 0.001):3.3f} dBm')

    siggen.modulation_pulse('ON', period_sec=0.001, duty_pcnt=50)
    time.sleep(1)

    reading_Watts = pwrsensor.meas_immed()
    print('With duty_pcnt = 50%')
    print(f'Sensor reading = {reading_Watts:3.2e} W = {10 * math.log10(reading_Watts / 0.001):3.3f} dBm')