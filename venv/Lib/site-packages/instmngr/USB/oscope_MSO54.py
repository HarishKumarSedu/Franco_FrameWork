# -*- coding: utf-8 -*-

import logging
import oscope_MSO54
from oscope_MSO4_5_6_Base import *

idnString = 'MSO54'

class Oscope_MSO54(Oscope_MSO4_5_6_Base):

    pass

if __name__ == "__main__":
    import os
    import sys
    import time

    mgrRootDir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), '..'))
    sys.path.append(mgrRootDir)

    import InstMgr

    instMgr = InstMgr.InstMgr()
    scope = instMgr.checkout(interface='USB', addr='0x0699::0x0522::C012738', moduleSuffix='MSO54')
    scope.reset()
    time.sleep(3)

    scope.setInstParam(param='runSingle', val='single')
    scope.setInstParam(param='runState', val='on')
    time.sleep(1)
    # Configure scope for SPMI
    scope.reset()
    setuplist = [('ch1state', 'ON'),
                 ('ch2state', 'ON'),
                 ('ch1coupling', 'DC'),
                 ('ch1bandwidth', 'FULL'),
                 ('ch1termination', '1MOhm'),
                 ('ch1voltPerDiv', 0.25),
                 ('ch1offset', 0.75),
                 ('ch2coupling', 'DC'),
                 ('ch2bandwidth', 'FULL'),
                 ('ch2termination', '1MOhm'),
                 ('ch2voltPerDiv', 0.25),
                 ('ch2offset', 0.75),
                 ('secPerDiv', 1e-6),
                 ('horizPosition', 30),
                 ('newbus', 'B1'),
                 ('bus1type', 'spmi'),
                 ('bus1spmiclocksource', 'ch1'),
                 ('bus1spmidatasource', 'ch2'),
                 ('bus1spmisclockthreshold', 0.9),
                 ('bus1spmisdatathreshold', 0.9),
                 ('displaywavebus1', 'on'),
                 ('triggerAType', 'bus'),
                 ('triggerAMode', 'normal'),
                 ('triggerAbusB1spmicondition', 'ssc')
                 ]
    for param, val in setuplist:
        print('>>> ', param, val)
        scope.setInstParam(param=param, val=val)
        time.sleep(0.1)

    pass


