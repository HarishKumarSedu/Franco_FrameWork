#!/usr/bin/env python
"""
@brief
UM test framework that uses common libraries/modules to create a test_system.

@b Description
This module implements all the APIs required for BaseClass module

Supported features:
Supporting test framework to system tests BSPs,firmware

@b Usage
Pass an instance of this module to tests that inherits from BaseClass as test_system
"""
import os
import sys
import yaml
if sys.version_info[0] == 3:
    import builtins
elif sys.version_info[0] == 2:
    import __builtin__

from unified_modules.test_support.testframework import TestFramework, TestFrameworkOptions
import unified_modules.test_support.testlogger as logging
from unified_modules.test_support.testresults import TestResults


class UmFrameworkTestOptions(TestFrameworkOptions):
    def set_test_options(self,
                         target_device='cornell_emu_sim',
                         test_platform='win10',
                         soak=False,
                         config_file=None,
                         device_file=None,
                         results_folder_flag=False,
                         **kwargs):
        """
        Test options for test framework
        @param target_device - optional device to be tested
        @param test_platform - OS platform of the test head
        @param soak - applies to register tests where all the registers will be verified when enabled
        @param config_file - Path for test configuration file
        @param device_file - Path for device configuration file
        @param results_folder_flag - Creates separate folder for every test case and place all test case related files
                                     in it
        @param kwargs todo
        """
        super(UmFrameworkTestOptions, self).set_existing_options(target_device=target_device,
                                                                 test_platform=test_platform,
                                                                 soak=soak,
                                                                 config_file=config_file,
                                                                 device_file=device_file,
                                                                 results_folder_flag=results_folder_flag)
        super(UmFrameworkTestOptions, self).add_new_options(kwargs)


class UmFramework(TestFramework):
    """
    Test system that provides support for logger, TODO:resources claimer, results recorder
    """
    def __init__(self,
                 run_options=None,
                 target_device='cornell_emu_sim',
                 test_platform='win10'):
        """
        Initialise framework variables, get logger.
        """
        if run_options is None:
            run_options = UmFrameworkTestOptions()
        super(UmFramework, self).__init__(run_options=run_options, target_device=target_device)
        # Framework does not get to name log file, but may need to log before a
        # log file is created
        self.log_prefix = self.__class__.__name__
        self.log = logging.getLogger(self.log_prefix)
        self.test_config = {}
        self.config_file = None
        self.device_file = None
        self.test_platform = ''
        self.soak = None
        self.results_folder_flag = None

        try:
            self.test_platform = self.run_options.test_platform
        except AttributeError:
            self.log.info("test_platform input options missing, using default values for these input options")
        if self.test_platform == '':
            self.test_platform = test_platform
        try:
            self.soak = self.run_options.soak
        except AttributeError:
            self.log.info("soak input options missing, using default values for these input options")
        try:
            self.results_folder_flag = self.run_options.results_folder_flag
        except AttributeError:
            self.log.info("results_folder_flag input options missing, using default values for these input options")

        try:
            if self.run_options.config_file:
                self.config_file = self.run_options.config_file
                self.read_test_config(self.config_file)
        except AttributeError:
            self.log.info("config_file input options missing, using default values for these input options")
        try:
            if self.run_options.device_file:
                self.device_file = self.run_options.device_file
                self.read_test_config(self.device_file)
        except AttributeError:
            self.log.info("device_file input options missing, using default values for these input options")

    def read_test_config(self, config_file):
        """
        Read config_file and update test_config
        @param config_file: Path for configuration file
        """
        config_file = os.path.join(os.getcwd(), config_file)
        self.test_config.update(yaml.safe_load(open(config_file)))

    def label(self, name):
        """ Set test name and record basic details about test head and test controller"""
        if self.name is None:
            self.result_record.set_basic_details(name, self.target_device, self.test_platform)
            self.name = name
        self.log.info("TEST NAME: %s", name)

    def get_test_platform(self):
        """ Returns test_platform """
        return self.test_platform

    def set_test_platform(self, test_platform):
        """ Sets test_platform """
        self.test_platform = test_platform

    def get_soak_flag(self):
        """ return soak """
        return self.soak

    def get_results_folder_flag(self):
        """ return results_folder_flag """
        return self.results_folder_flag


if __name__ == "__main__":

    if "--unittest" in sys.argv:
        sys.argv = sys.argv[2:]
        RESULTS = TestResults()
        LOG_FILE = 'TestFramework_UnitTest'
        RESULTS.set_test_title(LOG_FILE)
        RESULTS.assert_equal(1, 1, "Dummy passing test messages")
        TEST_SYSTEM = UmFramework()
        TEST_SYSTEM.result_record.set_basic_details(LOG_FILE, "MuddyWaters_A0")
        os.environ['RESULTS_LABEL_NAME'] = LOG_FILE
        TEST_SYSTEM.startup()
        TEST_SYSTEM.test_pass(RESULTS.assert_outcome())
        TEST_SYSTEM.result_record.set_record_time()
        DIRNAME = 'TestFramework_Logs'
        if not os.path.exists(DIRNAME):
            os.makedirs(DIRNAME)
        print(os.path.exists(os.path.dirname(DIRNAME)))
        TEST_SYSTEM.result_record.export(DIRNAME)
    if "--help" in sys.argv:
        print(UmFramework.__doc__)
