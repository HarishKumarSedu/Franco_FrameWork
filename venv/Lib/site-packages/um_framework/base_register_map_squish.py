"""
Base class for Generic Register Map Gui tests
"""
from .base_gui_squish import BaseGuiSquish, PASS
from collections import OrderedDict


class BaseGuiRegisterMapError(Exception):
    """BaseGuiRegisterMapError for BaseGuiRegisterMap"""
    pass


class BaseGuiRegisterMap(BaseGuiSquish):
    def __init__(self, result=None, testsystem=None):
        """
        Base class for all Register map operations
        """
        super(BaseGuiRegisterMap, self).__init__(result, testsystem)
        if self.soak:
            self.test_case_inputs['soak'] = True
        else:
            self.test_case_inputs['soak'] = False
        self.download_reg_srs_file = False

    def print_squish_results(self):
        """
        logging the Result metrics of squish
        """
        self.test_details = self.squish_resource.get_test_case_info(self.panel_test_case)
        result_metrics = self.test_details['result_metrics']
        tests_without_history_metric = ['RegRo', 'BitFieldRo', 'RegOutOfRange',
                                        'BitFieldSlider', 'BitFieldTextFieldOutOfRange', 'RegWo']
        if any(test_name in self.__class__.__name__ for test_name in tests_without_history_metric):
            final_metrics = result_metrics[len(result_metrics) - 2:]
        else:
            final_metrics = result_metrics[len(result_metrics) - 3:]
        fail_metrics = [res_metric for res_metric in result_metrics if res_metric.startswith('FAIL:')]

        reg_map_results = list(OrderedDict.fromkeys(fail_metrics + final_metrics))
        # Reversing the reg map results to display the results metrics in order
        reg_map_results.reverse()
        reg_map_results = "".join(reg_map_results)
        log_msg = "Check overall squish result.\n%s" % reg_map_results
        self.result.assert_equal(self.squish_result, PASS, log_msg)

    def complete(self):
        super(BaseGuiRegisterMap, self).complete()
        if self.download_reg_srs_file:
            srs_file_name = self.__class__.__name__ + "_registers_updated.srs"
            self.download_srs_file(srs_file_name)
