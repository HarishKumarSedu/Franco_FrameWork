"""
Base class for GUI panels test automation using squish tool.
"""
import os
import time
import sys
if sys.version_info[0] == 3:
    import http.client as http_lib
elif sys.version_info[0] == 2:
    import httplib as http_lib


from unified_modules.test_support.testresults import PASS
from unified_modules.test_support.testresourceclaimer import ResourceRequirement
from unified_modules.test_support.testresourcebase import ResourceBase
from unified_modules.test_support.xmlrpc_support import XmlRpcRemoteException
from unified_modules.test_support.testlogger import log_file_time_stamp
from unified_modules.test_support.testutils import get_stack_trace

from unified_modules.resources.resource_ftp.resource_ftp import MyFTPClient, ResourceFTPError
from unified_modules.resources.resource_power_switch.resource_power_switch \
    import ResourcePowerSwitch, ResourcePowerSwitchError

from .um_baseclass import UmBaseTest, BSP, VIRTUAL_BSP, read_project_mapping_config


class BaseGuiSquishError(Exception):
    """BaseGuiSquishError for BaseGuiSquish"""
    pass


class BaseGuiSquish(UmBaseTest):
    """
    Base class for GUI panels test automation using squish tool.
    """
    def __init__(self, result=None, testsystem=None, gui=True, local_resources=None):
        self.power_switch_tag = 'power_switch'

        if VIRTUAL_BSP not in testsystem.target_device:
            if local_resources:
                local_resources.append(ResourceRequirement(tag=self.power_switch_tag,
                                                           class_of_resource=ResourcePowerSwitch,
                                                           res_type=self.power_switch_tag))
            else:
                local_resources = [ResourceRequirement(tag=self.power_switch_tag,
                                                       class_of_resource=ResourcePowerSwitch,
                                                       res_type=self.power_switch_tag)]

        super(BaseGuiSquish, self).__init__(result, testsystem, local_resources=local_resources)
        self.panel_test_case = ""
        self.panel_test_suite = ""
        self.skip_tests = []
        self.squish_result = ""
        self.test_details = None
        self.system_type = ""
        self.test_case_inputs = {}
        self.start_squish_server = True
        self.stop_squish_server = True
        self.squish_tag = 'squish'
        self.bsp_cmdline_tag = "bsp_cmdline"
        self.ftp_tag = 'ftp_server'
        self.device_name = self.get_target_device()
        self.test_system.gui = gui
        self.retry_emu = True

        if "emu" in self.device_name:
            self.system_type = "EMU"
        else:
            self.system_type = "CDB"

        self.set_target_system_name_and_file()
        self.set_target_device_name()

        self.local_resources = self.test_system.local_claimed_resources

        if VIRTUAL_BSP not in self.get_target_device():
            self.power_switch = self.local_resources[self.power_switch_tag].resource
            self.power_switch.set_config_details()
            self.power_switch_socket = self.local_resources[self.power_switch_tag].config['socket_number']

        resources = [ResourceRequirement(tag=self.ftp_tag,
                                         class_of_resource=ResourceBase,
                                         res_type=self.ftp_tag),
                     ResourceRequirement(tag=self.squish_tag,
                                         class_of_resource=ResourceBase,
                                         res_type=self.squish_tag),
                     ResourceRequirement(tag=self.bsp_cmdline_tag,
                                         class_of_resource=ResourceBase,
                                         res_type=self.bsp_cmdline_tag)]
        self.request_resources(resources)
        self.squish_resource = self.resources[self.squish_tag]
        self.ftp_server = self.resources[self.ftp_tag]
        self.global_shared_folder = self.squish_resource.config['global_shared_folder']
        self.bsp_cmdline_resource = self.resources[self.bsp_cmdline_tag]
        self.bsp_cmdline_resource.set_config_details(self.bsp_cmdline_resource.config)
        self.test_case_inputs['real_system'] = 'sim' not in self.get_target_device()
        if self.test_case_inputs['real_system']:
            self.test_case_inputs['system_name'] = self.squish_resource.config['system_name']
        else:
            target_device_list = self.target_device_name.split(" ")
            if BSP.Berry in self.device_type:
                target_device_name = ''.join([target_device_list[0], self.get_target_device().split("_")[1]])
            else:
                target_device_name = self.target_device_name
            self.test_case_inputs['system_name'] = ' '.join([target_device_name, self.system_type])
        self.test_case_inputs['device_name'] = self.target_device_name
        self.test_case_inputs['test_inputs_path'] = self.squish_resource.config['test_inputs_path']
        self.test_case_inputs['test_inputs_common_path'] = self.squish_resource.config['test_inputs_common_path']
        self.squish_resource.config['target_system_name'] = self.get_target_device().split("_")[0]
        self.squish_resource.config['bsp_mapping'] = read_project_mapping_config()

    def setup(self):
        """
        Setup squish
            - set the squish inputs
            - start squish server
            - set the squish test specific inputs
        """
        super(BaseGuiSquish, self).setup()
        try:
            if self.start_squish_server:
                self.squish_resource.set_server_inputs(self.squish_resource.testhead.host,
                                                       self.squish_resource.config,
                                                       self.global_shared_folder)
                self.squish_resource.start_squish_server()
            self.squish_resource.create_yml_file(self.test_case_inputs)
        except XmlRpcRemoteException as exc:
            raise BaseGuiSquishError(exc.message)

    def initiate(self):
        """
        Run the squish test suite or test case
        """

        tries = 2 if self.retry_emu else 1

        for _ in range(tries):
            try:
                if self.panel_test_case:
                    # self.squish_resource.start_aut(aut_name='SoundClearStudio')
                    self.squish_result = self.squish_resource.run_test_case(self.panel_test_case, self.panel_test_suite)
                else:
                    self.squish_result = self.squish_resource.run_test_suite(self.panel_test_suite,
                                                                             exclude_tests_dir=self.skip_tests)
            except XmlRpcRemoteException as exc:
                raise BaseGuiSquishError(exc.message)

            if self.system_type != "EMU" \
               or not self.panel_test_case \
               or "Unable to discover system" not in str(self.squish_resource.get_test_case_info(self.panel_test_case)):
                    return

            # EMU, testcase & "Unable to discover system"
            self.log.info("Unable to discover system")
            self.log.info("powercycling emu device and retrying")

            # power cycle unit
            try:
                self.power_switch.power_off(self.power_switch_socket)
                time.sleep(30)
                self.power_switch.power_on(self.power_switch_socket)
            except ResourcePowerSwitchError:
                self.log.error("Could not power cycle device, power switch not found")

    def complete(self):
        """
        log the squish Result metrics
        download the scs logs
        """
        self.print_squish_results()
        self.result.assert_true(self.download_scs_logs(), "Download SCS logs")

    def teardown(self):
        """
        Stops the squish server
        """
        if self.stop_squish_server:
            self.squish_resource.stop_squish_server()

    def download_scs_logs(self):
        """
        Download latest scs logs
        """
        status_flag = True
        ftp_username = self.ftp_server.config['username']
        ftp_password = self.ftp_server.config['password']
        scs_logs_path = self.squish_resource.config['scs_logs_path']

        try:
            self.ftp_server.start_server(self.ftp_server.testhead.host, ftp_username, ftp_password, scs_logs_path)
        except http_lib.CannotSendRequest as connection_error:
            self.log.warning("FTP Server error occured: %s\n%s \nRetrying to establish the connection" % (
                connection_error.message, str(get_stack_trace())))
            try:
                self.ftp_server.start_server(self.ftp_server.testhead.host, ftp_username, ftp_password, scs_logs_path)
            except Exception as e:
                status_flag = False
                self.log.error("Exception while starting the ftp server: %s\n%s" % (e.message, str(get_stack_trace())))
                self.ftp_server = None
        except Exception as error:
            status_flag = False
            self.log.error("FTP Server issue: %s\n%s" % (error.message, str(get_stack_trace())))
            self.ftp_server = None
        if self.ftp_server:
            ftp_ip, ftp_port = self.ftp_server.get_ftp_ip_and_port()
            self.ftp_client = MyFTPClient(ftp_ip, ftp_port, ftp_username, ftp_password)
            scs_log_file_tc = "-".join([self.__class__.__name__, self.dut_type, self.get_test_platform(),
                                        'SCSLogs', log_file_time_stamp() + ".log"])
            scs_latest_log_tc = os.path.join(self.test_system.results_label, scs_log_file_tc)

            scs_log_prefix = 'scs_link'
            scs_log_extension = 'log'
            platform = self.test_system.get_test_platform()

            scs_latest_log_th = self.ftp_server.get_latest_file_in_path(scs_logs_path, scs_log_prefix, scs_log_extension)

            # Fallback on older versions of scs
            if not scs_latest_log_th and 'mac' in platform:
                self.log.info("Falling back to old mac prefix logs")
                scs_latest_log_th = self.ftp_server.get_latest_file_in_path(scs_logs_path, 'MacLink', scs_log_extension)

            if not scs_latest_log_th:
                status_flag = False
                self.log.info("No SCS log files found")
                return status_flag

            try:
                self.ftp_client.download_file(download_filename=os.path.split(scs_latest_log_th)[1],
                                              file_name=scs_latest_log_tc)
            except ResourceFTPError as ftp_error:
                status_flag = False
                self.log.warning(ftp_error)
        else:
            status_flag = False
            self.log.warning("Skipping the SCS logs collection due to FTP server issue.")
        return status_flag

    def download_srs_file(self, srs_file_names, append_test_name=False):
        """
        Download the srs file from test head
        @param srs_file_names: [str|list] srs file name or srs file names
        @param append_test_name [bool] Appends test class name to the file name
        """
        if isinstance(srs_file_names, str):
            srs_file_names = [srs_file_names]
        if "suite_register_map" in self.panel_test_suite:
            test_inputs_path = self.squish_resource.config['test_inputs_common_path']
        else:
            test_inputs_path = self.squish_resource.config['test_inputs_path']

        self.ftp_server.add_anonymous_user(os.path.join(test_inputs_path, self.panel_test_suite, 'shared', 'testdata'))
        ftp_ip, ftp_port = self.ftp_server.get_ftp_ip_and_port()
        anonymous_ftp_client = MyFTPClient(ftp_ip, ftp_port)
        for srs_file in srs_file_names:
            new_srs_file_name = "".join([os.path.splitext(srs_file)[0], "_", str(time.strftime('%Y%m%d%H%M%S')),
                                         os.path.splitext(srs_file)[1]])
            if append_test_name:
                new_srs_file_name = "".join([self.__class__.__name__, "_", new_srs_file_name])
            download_to_path = os.path.join(self.test_system.results_folder, new_srs_file_name)
            try:
                anonymous_ftp_client.download_file(srs_file, file_name=download_to_path)
            except ResourceFTPError as ftp_error:
                self.log.warning(ftp_error)

    def print_squish_results(self):
        """
        logging the Result metrics of squish
        """
        self.test_details = self.squish_resource.get_test_case_info(self.panel_test_case)
        log_msg = "Check overall squish result.\n%s" % "".join(self.test_details['result_metrics'])
        self.result.assert_equal(self.squish_result, PASS, log_msg)
