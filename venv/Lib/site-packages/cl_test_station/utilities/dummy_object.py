import random

class DummyObject:
    """
    **This Dummy Object serves to nullify all the code inside the 'with' block. All attribute gets/operators return
    itself, so the user test will not be affected by the code that runs locally in the block. references to this
    object will boil down to an int or bool, which then gives a random value (0 or 1) to navigate through logic and
    loops.**
    """
    __class__ = int
    __bases__ = int

    def __getattribute__(self, item):
        try:
            return object.__getattribute__(self, item)
        except AttributeError:
            if str(item) == 'value':
                return random.randint(0,1)
            else:
                return self

    def __setattr__(self, key, value):
        pass

    def __call__(self, *args, **kwargs):
        return self

    def __eq__(self, other):
        return bool(random.randint(0,1))

    def __add__(self, other):
        return self

    def __xor__(self, other):
        return self

    def __abs__(self):
        return self

    def __float__(self):
        return self

    def __len__(self):
        return 0

    def __lshift__(self, other):
        return self

    def __rshift__(self, other):
        return self

    def __mod__(self, other):
        return self

    def __rdiv__(self, other):
        return self

    def __divmod__(self, other):
        return self

    def __bool__(self):
        return bool(random.randint(0,1))

    def __int__(self):
        return random.randint(0,1)

    def __and__(self, other):
        return self

    def __or__(self, other):
        return self

    def __iter__(self):
        return iter([])

    def __getitem__(self, item):
        return self

    def __index__(self):
        return random.randint(0,1)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        pass
