from cl_test_station.test_station_object import TestStationObject
from cl_test_station.test_station import TestStation
from cl_test_station.register_map.block import Block
from cl_test_station.register_map.register import Register
from cl_test_station.register_map.field import Field
from cl_test_station.utilities.dummy_object import DummyObject
from cl_test_station.utilities.varilist import enumerate
import json


def ts_dumps(data):
    if isinstance(data, DummyObject):
        return
    data = ts_ref_to_str(data)
    return json.dumps(data)


def ts_ref_to_str(obj):
    if isinstance(obj, (TestStationObject, Block)):
        return obj.get_ts_path()
    elif isinstance(obj, (Register, Field)):
        return obj.component.get_ts_path() + '.' + obj.path
    elif isinstance(obj, dict):
        serializable_dict = {}
        for key in obj.keys():
            serializable_dict[ts_ref_to_str(key)] = ts_ref_to_str(obj[key])
        return serializable_dict
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            obj[i] = ts_ref_to_str(item)
        return obj
    elif isinstance(obj, tuple):
        new_tuple = tuple([ts_ref_to_str(item) for item in obj])
        return new_tuple
    else:
        return obj

def str_to_ts_ref(obj, test_station):
    if isinstance(obj, str):
        ref = test_station.resolve_path(obj)
        if ref is not None:
            return ref
        return obj
    elif isinstance(obj, dict):
        new_dict = {}
        for key in obj.keys():
            new_dict[str_to_ts_ref(key, test_station)] = str_to_ts_ref(obj[key], test_station)
        return new_dict
    elif isinstance(obj, list):
        for i, item in enumerate(obj):
            obj[i] = str_to_ts_ref(item, test_station)
        return obj
    elif isinstance(obj, tuple):
        new_tuple = tuple([str_to_ts_ref(item, test_station) for item in obj])
        return new_tuple
    else:
        return obj

def ts_loads(string, test_station=None):
    if isinstance(string, DummyObject):
        return
    if test_station is None:
        return json.loads(string)
    if not isinstance(test_station, TestStation):
        raise ValueError("%s is %s, not a TestStation" % (str(test_station), type(test_station)))
    raw_data = json.loads(string)
    return str_to_ts_ref(raw_data, test_station)
