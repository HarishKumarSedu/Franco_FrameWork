"""
Script to Generate PyCharm live template group file for CL Test Station project YAML config files

*Author: Evan Canter <evan.canter@cirrus.com>*
"""
import sys
import os
from importlib import import_module
import cl_test_station
from cl_test_station.test_station_object import TestStationObject
this_dir = os.path.join(os.path.dirname(cl_test_station.__file__), 'utilities', 'live_templates')
NL = '&#10;'
TAB = ' '*4


def gen_xml(project_name: str):
    """
    Generates live template group XML file contents that has class paths and definition templates

    :param project_name: Name of Validation project, for parsing the project_framework package
    :type project_name: str
    :return: XML file contents as string
    :rtype: str
    """
    with open(os.path.join(this_dir, 'single_template.xml'), 'r') as f:
        single_template = f.read()
    with open(os.path.join(this_dir, 'base.xml'), 'r') as f:
        base_xml = f.read()
    eof = '\n</templateSet>\n'
    dummy_tso = TestStationObject(ref_name='')  # TSO for calling load_classes_from_path
    templates = {}
    for package in ['cl_test_station', f'{project_name}_framework']:
        module = import_module(package)
        root_dir = os.path.dirname(module.__file__)
        classes = dummy_tso.load_classes_from_path(root_dir, package, base_cls=TestStationObject)
        for cls in classes.values():
            # Class path template
            cls_path = f'{cls.__module__}.{cls.__name__}'
            name = cls.__name__
            desc = f'({".".join(cls_path.split(".")[:-1])})'
            value = cls_path
            templates[name] = single_template.replace('NAME', name).replace('VALUE', value).replace('DESC', desc)
            # Yaml definition insert
            name = f'{name}_CONFIG_INSERT'
            desc = f'{cls.__name__} template'
            value = f'&#60;&#60;REF_NAME&#62;&#62;:{NL}{TAB}class_type: {cls_path}{NL}{TAB}'
            fields = cls.get_class_fields()
            req_fields = [f for f in fields if f.required]
            opt_fields = [f for f in fields if not f.required]
            # Add required fields entries
            if req_fields:
                value += f'# Required Fields{NL}{TAB}'
                value += f'{NL}{TAB}'.join([f'{f.name}:  # {f.desc}' for f in req_fields])
            # Optional fields will be commented out by default
            if opt_fields:
                value += f'{NL}{TAB}# Optional Fields{NL}{TAB}'
                value += f'{NL}{TAB}'.join([f'# {f.name}:  # {f.desc}' for f in opt_fields])
            # Escape invalid characters so that the XML can be loaded by PyCharm properly
            value = value.replace('"', "&#34;")
            value = value.replace("'", "&#39;")
            value = value.replace('>', "&#62;")
            value = value.replace('<', "&#60;")
            value += NL
            templates[name] = single_template.replace('NAME', name).replace('VALUE', value).replace('DESC', desc)

    # Combine all of the template nodes and close with the template group end tag
    yaml_xml = base_xml + '\n'.join(templates.values()) + eof
    return yaml_xml
