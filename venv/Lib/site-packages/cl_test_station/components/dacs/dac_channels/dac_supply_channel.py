from cl_test_station.components.component.component import Component
from cl_test_station.components.dacs.dac_channels.dac_channel import DacChannel
from cl_test_station.test_station_object import TsoField


class DacSupplyChannel(DacChannel):
    """**Abstract Class for dac channels with current sensing devices.**"""

    current_sense: Component = TsoField(ftype=str, required=True, desc='Current sensing device')

    current_sense_channel: int = TsoField(ftype=int, required=True, desc='Current sense channel the dac '
                                                                         'channel is using')

    rsense: float = TsoField(ftype=float, required=False, default=1, desc='Current sense resistor value in ohms')

    def post_construct_system(self, **kwargs):
        super().post_construct_system(**kwargs)
        self.current_sense = self.resolve_path(self.current_sense)

    def measure_current(self, **kwargs) -> float:
        """
        Wrapper for current sense measurement

        This function can be called as long as current_sense_channel and rsense are properly
        defined in the yaml file

        :return: Current value in Amps
        :rtype: float
        """
        return self.current_sense.measure_current(self.current_sense_channel, self.rsense, **kwargs)
