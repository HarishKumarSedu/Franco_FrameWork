import time
from typing import Union
from cl_test_station.components.dacs.dac_channels.dac_channel_base import DacChannelBase
from cl_test_station.test_station_object import TsoField

class InvalidEnableField(AttributeError):
    pass

class DacChannel(DacChannelBase):
    """**Base class for dac + op amp channel**"""

    enable_field: str = TsoField(ftype=str, required=True, desc='block the op amp attaches to')

    _on_values = ('ON', 'on', True, 1, '1')
    _off_values = ('OFF', 'off', False, 0, '0')

    def initialize(self, **kwargs):
        """
        Initialize the DacChannel class.

        :return:
        """
        super().initialize(**kwargs)
        if isinstance(self.enable_field, str):  # Resolve path only on first initialization
            str_enable_field = self.enable_field
            self.enable_field = self.resolve_path(self.enable_field)
            if self.enable_field == None:  # If Field object cannot be found, resolve_path() returns None, not an error.
                raise InvalidEnableField(f'{str_enable_field} op amp enable/disable field object for {self.ref_name}'
                                     f' channel on {self.container.ref_name} cannot be found.')

    def output_state(self, on_off: Union[str, int, bool] = None, zero_volt_out: bool = False, *args, **kwargs) -> str:
        """
        Set the output state of the dac channel to 'ON' or 'OFF'.

        Call with no parameters to return state of dac channel.

        Output voltage is volatile (will not retain previous voltage if turned of)f.

        :param on_off: Turn dac channel on or off.
        :type on_off: str, int, bool
        :param zero_volt_out: Set dac to zero volts but do not disable op amp. Default = False
        :type zero_volt_out: bool
        :return: Current output state.
        :rtype: str
        """
        if on_off is None:
            return "ON" if self.is_enabled() else "OFF"

        if on_off in self._on_values:
            self.enable_field.value = self.enable_value

        elif on_off in self._off_values:
            self.source_voltage(0)
            time.sleep(self.disable_wait)

            # Determine if off-state should be high Z or grounded
            if zero_volt_out:  # GND
                self.output_state('ON')
            else:  # High Z
                self.enable_field.value = self.disable_value

    def is_enabled(self) -> bool:
        """
        Check to see if DAC channel's op amp is enabled/disabled

        :return: None
        :rtype: None
        """
        if self.enable_field.value == self.enable_value:
            return True
        else:
            return False
