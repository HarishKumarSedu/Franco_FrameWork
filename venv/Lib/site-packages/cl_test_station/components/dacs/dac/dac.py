from typing import Union
from cl_test_station.test_station_object import TsoField
from cl_test_station.components.component.component import Component, static_component


@static_component
class Dac(Component):
    """**Abstract class for all DAC packages**"""

    bit_res: int = TsoField(ftype=int, required=True, desc='Bit Resolution of the DAC')
    ref_voltage: float = TsoField(ftype=float, required=True, desc='Reference voltage for the DAC')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._codes: int = 2 ** self.bit_res
        self.max_code: int = self._codes - 1

    def post_construct_system(self, *args, **kwargs):
        """
        Builds fields dictionary and filters out any fields that are not serializable from super.post_construct system.

        :return: If ref_voltage is str, object reference of ref_voltage from resolve_path function call.
        """
        super().post_construct_system()
        if isinstance(self.ref_voltage, str):
            self.ref_voltage = self.resolve_path(self.ref_voltage)

    @property
    def ref_voltage(self) -> float:
        """
        Set the reference voltage for the DAC.

        Usually set in yaml final on initialization, although reference voltage DOES NOT change dynamically.

        :return: Reference voltage
        :rtype: float
        """
        if self._ref_voltage.__class__.__name__ == 'Rail':
            return self._ref_voltage.measure_voltage()
        else:
            return self._ref_voltage

    @ref_voltage.setter
    def ref_voltage(self, ref: Union[int, float]):
        self._ref_voltage = ref

    def _calc_code(self, voltage: float, gain: int = 1, div: int = 1) -> int:
        """
        Calculate code from desired output voltage

        :param voltage: Voltage to be turned into code
        :type voltage: float
        :param gain: Gain of the DAC's internal op-amp(s). Not available on every DAC device. (Default: 1)
        :type gain: int
        :param div: Divide voltage reference by this number. (Default: 1)
        :type div: int
        :return: Code value for DAC channel
        :rtype: int
        """
        code = round(voltage / self.ref_voltage * self._codes)
        if code > self.max_code:
            self.log.warning(f'{self.ref_name} cannot be set to {voltage}V\n'
                             f'since the ref voltage is {self.ref_voltage}V. '
                             f'Setting to maximum voltage {self._calc_voltage(self.max_code, gain, div)}V.')
            code = self.max_code
        return code

    def _calc_voltage(self, code: int, gain: int = 1, div: int = 1) -> float:
        """
        Calculate voltage value interpreted from DAC channel code

        :param voltage: Voltage to be turned into code
        :type voltage: float
        :param gain: Gain of the DAC's internal op-amp(s). Not available on every DAC device. (Default: 1)
        :type gain: int
        :param div: Divide voltage reference by this number. (Default: 1)
        :type div: int
        :return: Voltage value
        :rtype: float
        """
        return code / self._codes * self.ref_voltage * gain * self.amp_gain / div
