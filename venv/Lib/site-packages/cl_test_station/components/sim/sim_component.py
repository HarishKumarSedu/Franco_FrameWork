from cl_test_station.components.component.component import Component


class SimComponent(Component):

    def __init__(self, *args, **kwargs):
        self.reg_dict = {}
        super().__init__(*args, **kwargs)

    def initialize(self, **kwargs):
        super().initialize(**kwargs)

    def shutdown(self, **kwargs):
        super().shutdown(**kwargs)

    def write_register(self, addr, data, iface_name='', update_clive=True, **kwargs):
        """
        Writes data to a simulated register.

        :param addr: register address, 32 bit
        :type addr: int
        :param data: word to write
        :type data: int
        :param iface_name: interface to perform the write, ex 'SPI'. Here to make interface identical to non-sim
            version.
        :type iface_name: str
        :param update_clive: true or false value for updating clive
        :type update_clive: bool
        :param ** kwargs: See below
        :Keyword Arguments:  Here to make interface identical to non-sim version.

            **ainc:** optional param for SPI auto increment

            **pointer:** optional param for SPMI 24-bit pointer index
        :return: none
        """

        print('\33[33m' + f'SIMULATING REG WRITE address={hex(addr)}, data={data} ' + '\33[0m')
        self.reg_dict[addr] = data

        # update CLIVE
        if update_clive and self.server_present:
            test_station_obj = self.find_top_level()
            test_station_obj.clive_tcp_client.update_register_write(self.ref_name, addr, data)

    def read_register(self, addr, iface_name='', update_clive=True, **kwargs):
        """
        Reads a simulated register and outputs read data as an int. Data value previously written or 0 if never written.

        :param addr: register address, 32 bit
        :type addr: int
        :param iface_name: interface to perform the read, ex 'SPI'.  Here to make interface identical to non-sim
            version.
        :type iface_name: str
        :param update_clive: true or false value for updating clive
        :type update_clive: bool
        :param ** kwargs: See below
        :Keyword Arguments:  Here to make interface identical to non-sim version.

            **ainc:** optional param for SPI auto increment
            pointer: optional param for SPMI 24-bit pointer index
        :return: word - read data
        """

        print('\33[33m' + f'SIMULATING REG READ  address={hex(addr)}' + '\33[0m')
        if addr in self.reg_dict:
            data = self.reg_dict[addr]
        else:
            data = 0

        # update CLIVE
        if update_clive and self.server_present:
            test_station_obj = self.find_top_level()
            test_station_obj.clive_tcp_client.update_register_read(self.ref_name, addr, data)

        return data

    def enter_reset(self):
        """ **PLACE HOLDER** """
        pass

    def exit_reset(self):
        """ **PLACE HOLDER** """
        pass
