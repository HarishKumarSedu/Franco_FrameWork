from abc import abstractmethod
from cl_test_station.components.component.component import Component


class CurrentSense(Component):
    """**Abstract Class for Current Measuring Devices**"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.num_channels = None  # Need to specify per current sense device

    @abstractmethod
    def measure_current(self, **kwargs) -> float:
        """
        Retrieve measured current from current sensor device. Parameters and means to measure current will vary from
        device to device, be sure to look at the specific current measuring device for further details.

        :return: Current value.
        :rtype: float
        """
        pass

    def _num_channel_handling(self, channel: int):
        """
        Ensure num_channels is defined and channel is within bounds

        :param channel: Current sense channel being used.
        :type channel: int
        :return: None
        :rtype: None
        """
        if channel < 0 or channel > self.num_channels:
            raise ValueError(f'{self.ref_name} does not have a channel {channel}')
