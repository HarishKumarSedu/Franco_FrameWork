from typing import *

from cl_test_station.components.component.component import Component
from cl_test_station.gpio.enums import *
from cl_test_station.gpio.pin import Pin
from cl_test_station.test_station_object import TsoField


class GpioExt(Component):
    """**Baseclass for family of GPIO extender components. Outlines necessary fields and functions.**"""

    # All classes must update this TsoField to have the corect default value
    num_pins: int = TsoField(ftype=int, required=False, default=0, desc='Total number of usable pins')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # All child classes must populate this list with all instantiated pin objects.
        self.pins = []  # type: List[Pin]

    def _check_pin_valid(self, pin: int) -> Pin:
        """
        Check if the given pin number is a valid GPIO.

        :param pin: pin number
        :type pin: int
        :return: pin corrosponding to pin number given
        :rtype: Pca9535Pin
        """
        if pin not in range(self.num_pins):
            raise ValueError(f"Invalid pin number, valid pins are 0-{self.num_pins - 1}")
        return self.pins[pin]

    def get_pin_dir(self, pin: int) -> PinDirection:
        """
        Get GPIO I/O direction, either INPUT or OUTPUT

        :param pin: GPIO pin to query
        :type pin: int
        :return: pin direction
        :rtype: GPIO
        """
        pin = self._check_pin_valid(pin)
        return pin.direction

    def get_pin_polarity(self, pin: int) -> PinPolarity:
        """
        Get pin input polarity setting. Either NORMAL or INVERTED

        :param pin: GPIO pin to query
        :type pin: int
        :returns: Polarity
        :rtype: PinPolarity
        """
        pin = self._check_pin_valid(pin)
        return pin.polarity

    def get_pin_value(self, pin: int) -> int:
        """
        Get pin value

        If direction is OUTPUT, returns drive level. If direction is
        INPUT, returns the measured level of the pin.

        :param pin: GPIO pin to query
        :type pin: int
        :returns: Pin value
        :rtype: int
        """
        pin = self._check_pin_valid(pin)
        return pin.value
