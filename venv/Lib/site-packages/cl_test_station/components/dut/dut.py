from cl_test_station.components.component.component import Component
from cl_test_station.pyro_support.pyro_receiver import PyroReceiver
from cl_test_station.board.board import Board
from cl_test_station.test_station_object import TsoField


class Dut(Component):
    """The Dut Component"""
    database_id: int = TsoField(ftype=int, required=False,
                                desc="DUT ID for database logging. "
                                     "Can hardcode this attribute in the config YML for EEPROMless boards. "
                                     "eeprom_name and database_id_field_name are not needed if this is specified.")

    eeprom_name: str = TsoField(ftype=str, required=False, desc="EEPROM component name defined for this board. "
                                                                "Use this attribute along with database_id_field_name.")

    database_id_field_name: str = TsoField(ftype=str, required=False,
                                           desc="Field name in EEPROM for this DUT ID. "
                                                "Will not be queried if database_id is not defined in the YML. "
                                                "Use this attribute along with eeprom_name.")

    def __init__(self, *args, **kwargs):
        self._database_id = None
        super().__init__(*args, **kwargs)

    def configure(self, config, *args, **kwargs):
        super().configure(config, *args, **kwargs)

    def construct_objects(self, *args, **kwargs):
        super().construct_objects(*args, **kwargs)

    def initialize(self, **kwargs):
        super().initialize(**kwargs)

    def shutdown(self, **kwargs):
        super().shutdown(**kwargs)

    @property
    def database_id(self):
        if self._database_id is None:
            if self.eeprom_name is None or self.database_id_field_name is None:
                raise AttributeError("If database_id is not defined in config.yml, "
                                     "then eeprom_name and database_id_field_name must be defined.")
            else:
                board = self.get_eeprom_host_board()
                attr = board.find_resource(self.eeprom_name)[0][1]
                for attr_name in self.database_id_field_name.split('.'):
                    attr = getattr(attr, attr_name)
                database_id = attr.value
                self.verify_database_id(database_id)
        else:
            database_id = self._database_id
            if self.eeprom_name is not None:
                self.verify_database_id(database_id)
        return database_id

    @database_id.setter
    def database_id(self, new_database_id):
        self._database_id = new_database_id

    def get_eeprom_host_board(self):
        """
        Returns the board object where the eeprom component named 'eeprom_name' resides.
        :param eeprom_name: name of the eeprom in the project config yml
        :type eeprom_name: str
        :return: Board object
        :rtype: object
        """
        board = self.find_container(Board)
        while board is not None:
            eeprom_host_board = board.find_resource(f'{self.eeprom_name}')
            if eeprom_host_board is None:
                board = board.find_container(Board)
            else:
                break
        eeprom_host_board = eeprom_host_board[0][1]
        board = eeprom_host_board.find_container(Board)
        if eeprom_host_board is None:
            raise Exception(f"No component named {self.eeprom_name} exists. "
                            f"Enter valid eeprom_name for {self.ref_name}.")
        return board

    def verify_database_id(self, dut_id):
        """
        Queries the database to check that the dut_id includes the specifed board id
        :param dut_id: database_id for the dut
        :type dut_id: int
        :param board_id: database_id for the board the eeprom resides on.
        :type board_id:
        :return:
        :rtype:
        """
        board_id = self.get_eeprom_host_board().database_id
        found =  self.find_top_level().get_val_db_attr().verify_dut_id(dut_id, board_id)
        if not found:
            raise ValueError(f"DUT ID {dut_id} is not a valid ID for board ID of {board_id}.")
        return found
