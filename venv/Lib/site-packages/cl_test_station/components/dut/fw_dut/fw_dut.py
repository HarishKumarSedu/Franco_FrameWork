import inspect, os
from cl_test_station.components.dut.dut import Dut
from cl_test_station.components.dut.emu_dut.emu_dut import EmuDut
from cl_test_station.test_station_object import TsoField


# Fields required for EmuDut register downloading
# register_map_path, register_map_name, regmap_auto_select
# Linked wrapper:
#   request_url, c4_reg_addr, build_cnt_addr

# For this class:
# fw_register_map_path: Optional, if not spec will use standardized folder in dut folder
# fw_register_map_name: Required for downloading from crystal
# fw_regmap_auto_select? Maybe make is related to if plugged or not - or use regular regmap_auto_select for both?

class FwDut(Dut):
    """PLACE HOLDER"""
    fw_register_map_name: str = TsoField(ftype=str,
                                         desc='Name of firmware register map file name. If fw_regmap_auto_select is '
                                              'True, the _xxxx_xxxx revision data does NOT need to be included '
                                              'in the name.')

    fw_register_map_path: str = TsoField(ftype=str, required=False,
                                         desc="Path to firmware regitser map files. If none is provided, "
                                              "the component will search in the"
                                              "'register_maps' folder located along side the component's module")

    fw_regmap_auto_select: bool = TsoField(ftype=bool, required=False, default=False,
                                           desc="Flag for auto selecting the firmware register map based on the "
                                                "component's revision.")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.fw_register_map_path is None:  # Try using standard directory structure
            cls_path = os.path.dirname(inspect.getfile(self.__class__))  # Get dut folder path
            regmap_path = os.path.join(cls_path, 'register_maps')
            if not os.path.isdir(regmap_path):  # Cannot continue without a home for the regmap
                raise IsADirectoryError('%s (%s) does not have a "register_maps" directory, '
                                        'add one or specify "fw_register_map_path" in YAML'
                                        % (self.ref_name, self.__class__.__name__))
            self.fw_register_map_path = regmap_path

    def construct_registers(self):
        """
        PLACE HOLDER

        :return:
        """
        if issubclass(self.__class__, EmuDut):  # Use update_registers for the fw regmap
            # Save Emu fields
            auto_save, name_save, path_save = self.regmap_auto_select, self.register_map_name, self.register_map_path
            # Re-map fields to firmware paths
            self.regmap_auto_select = self.fw_regmap_auto_select
            self.register_map_name = self.fw_register_map_name
            self.register_map_path = self.fw_register_map_path
            # Update registers using firmware fields
            EmuDut.construct_registers(self)
            # Restore Emu fields
            self.regmap_auto_select, self.register_map_name, self.register_map_path = auto_save, name_save, path_save
        else:  # User needs to specify local regmap to use for fw registers
            regmap_file = os.path.join(self.fw_register_map_path, self.fw_register_map_name)
            if os.path.isfile(regmap_file):
                self.log.info("Building registers from %s" % self.fw_register_map_name)
                self.build_registers_from_regmap(regmap_file)
            else:
                self.log.warning("Regmap file not found, cannot build FW registers: %s" % regmap_file)
