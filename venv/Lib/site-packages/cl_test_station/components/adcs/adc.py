from typing import Union
from cl_test_station.test_station_object import TsoField
from cl_test_station.components.component.component import Component, static_component


@static_component
class Adc(Component):
    """Abstract class for all ADC packages"""

    bit_res: int = TsoField(ftype=int, required=True, desc='Bit Resolution of the ADC')
    ref_voltage: float = TsoField(ftype=float, required=True, desc='Reference voltage for the ADC')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.max_code = 2**self.bit_res - 1

    def post_construct_system(self, *args, **kwargs):
        super().post_construct_system()

        if isinstance(self.ref_voltage, str):
            self.ref_voltage = self.resolve_path(self.ref_voltage)

    @property
    def ref_voltage(self) -> float:
        """
        Set the reference voltage for the ADC.

        Usually set in yaml final on initialization, although reference voltage DOES NOT change dynamically.

        :return: Reference voltage
        :rtype: float
        """
        return self._ref_voltage

    @ref_voltage.setter
    def ref_voltage(self, ref: Union[int, float]):
        self._ref_voltage = ref

    def _calc_voltage(self, code: int, gain: int = 1, div: int = 1) -> float:
        """
        Calculate voltage value interpreted from ADC channel code

        :param code: Code on DAC channel output
        :type code: int
        :return: Voltage value
        :rtype: float
        """
        # Vin / Vref =  code / max_code
        return (self.ref_voltage * (code/self.max_code)) * (gain / div)
