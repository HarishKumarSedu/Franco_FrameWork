import yaml
import os
from cl_test_station.register_map.block import Block


class SAB(Block):
    """**Place holder**"""

    maxchslot = 4095
    maxchwidth = 32
    maxchannels = 16

    fsddict = {
               0: 0,
               0.5: 1,
               1: 2,
               1.5: 3,
               2: 4
              }

    chloccfgmap = {
                 1: 1,
                 2: 1,
                 3: 2,
                 4: 2,
                 5: 3,
                 6: 3,
                 7: 4,
                 8: 4,
                 9: 5,
                 10: 5,
                 11: 6,
                 12: 6,
                 13: 7,
                 14: 7,
                 15: 8,
                 16: 8
    }

    def __init__(self, name, base_addr, component):
        super().__init__(name, base_addr, component)

    def config_sab(self, cfgfile = os.path.expandvars('$PROJECT_ROOT'
                                                      fr'\mahoney_fw_test\input_data\sab_configs\sabconfig.yaml')):
        """The function sets up SAB PORTA, PORTB playback and capture registers"""

        try:

            with open(cfgfile) as file:
                # The FullLoader parameter handles the conversion from YAML
                # scalar values to Python the dictionary format
                sab_raw_list = yaml.load(file, Loader=yaml.FullLoader)

        except FileNotFoundError:
            raise Exception("Sorry, the file " + cfgfile + " does not exist")

        portaplaybk = sab_raw_list['portaplaybk']
        portbplaybk = sab_raw_list['portbplaybk']
        portbcaptr = sab_raw_list['portbcptr']
        portacaptr = sab_raw_list['portacptr']

        self.config_plybk_clk('A', portaplaybk['framewidth'], portaplaybk['fsd'], portaplaybk['fsync_inv'])

        for chcnt in range(len(portaplaybk['chinfo'])):
            chnum =  portaplaybk['chinfo'][chcnt]['num']
            slotvalue = portaplaybk['chinfo'][chcnt]['slot']
            widthvalue = portaplaybk['chinfo'][chcnt]['width']
            envalue = portaplaybk['chinfo'][chcnt]['en']
            self.config_plybk_ch('A', chnum, envalue, slotvalue, widthvalue)

        self.config_plybk_clk('B', portbplaybk['framewidth'], portbplaybk['fsd'], portbplaybk['fsync_inv'])

        for chcnt in range(len(portbplaybk['chinfo'])):
            chnum = portbplaybk['chinfo'][chcnt]['num']
            slotvalue = portbplaybk['chinfo'][chcnt]['slot']
            widthvalue = portbplaybk['chinfo'][chcnt]['width']
            envalue = portbplaybk['chinfo'][chcnt]['en']
            self.config_plybk_ch('B', chnum, envalue, slotvalue, widthvalue)

        self.config_cptr_clk('B', portbcaptr['framewidth'], portbcaptr['fsd'], portbcaptr['fsync_inv'])

        for chcnt in range(len(portbcaptr['chinfo'])):
            chnum = portbcaptr['chinfo'][chcnt]['num']
            slotvalue = portbcaptr['chinfo'][chcnt]['slot']
            widthvalue = portbcaptr['chinfo'][chcnt]['width']
            envalue = portbcaptr['chinfo'][chcnt]['en']
            self.config_cptr_ch('B', chnum, envalue, slotvalue, widthvalue)

        self.config_cptr_clk('A', portacaptr['framewidth'], portacaptr['fsd'], portacaptr['fsync_inv'])

        for chcnt in range(len(portacaptr['chinfo'])):
            chnum = portacaptr['chinfo'][chcnt]['num']
            slotvalue = portacaptr['chinfo'][chcnt]['slot']
            widthvalue = portacaptr['chinfo'][chcnt]['width']
            envalue = portacaptr['chinfo'][chcnt]['en']
            self.config_cptr_ch('A', chnum, envalue, slotvalue, widthvalue)

    def config_plybk_clk(self, portside, framewidth=64, fsd=1, fsyncinv=1):
        """
        Configures PortA playback clock config

        :param portside: 'A' or 'B'
        :type portside: str

        :param framewidth:
                     0x000=1 sclk per frame

                     0x001=2 sclks per frame

                     0xFFE=4095 sclks per frame

                     0xFFF=4096 sclks per frame
        :type framewidth: int

        :param fsd:
                     0-sclk delay = 0

                     0.5-sclk delay = 1

                     1-sclk delay  = 2

                     1.5-sclk delay = 3

                     2-sclk delay = 4

                     2.5-sclk delay = 5

                     3-sclk delay [max] = 6
        :type fsd: int

        :param fsyncinv: 0 = don't invert fsync

                         1 = invert fsync
        :type fsyncinv: int
        """
        regname = 'PORT%s_PLYBK_CLK_CFG' % (portside.upper())

        field1 = 'CP_PORT%s_PLAYBK_NUM_SCLKS' % (portside.upper())
        field2 = 'CP_PORT%s_PLAYBK_FSD' % (portside.upper())
        field3 = 'CP_PORT%s_PLAYBK_FSYNC_INV' % (portside.upper())
        field4 = 'CP_PORT%s_PLAYBK_SCLK_INV' % (portside.upper())

        func1 = getattr(self, regname)
        func2 = getattr(func1, field1)
        func3 = getattr(func1, field2)
        func4 = getattr(func1, field3)
        func5 = getattr(func1, field4)


        func2.value = framewidth-1
        func3.value = self.fsddict[fsd]

        func4.value = fsyncinv

        func5.value = 0

    def config_plybk_ch(self,portside, channel, enable, slot, width):
        """
        The function calls ch_loc, ch_width and ch_en sub functions.

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param slot: 0 to 4095
        :type slot: int
        :param width: 0 to 32
        :type width: int
        """
        self.config_plybk_ch_loc(portside, channel, slot)
        self.config_plybk_ch_width(portside, channel, width)
        self.config_plybk_ch_en(portside, channel, enable)

    def config_plybk_ch_loc(self, portside, channel, slot):
        """
        The function configures channel location for PORTA or PORTB Playback.

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param slot: 0 to 4095
        :type slot: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        if slot < 0 or slot > self.maxchslot:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (slot, self.maxchslot))

        regname = 'PORT%s_PLYBK_CH_LOC_CFG%s' % (portside.upper(), self.chloccfgmap[channel])
        fieldname = 'CP_PORT%s_PLAYBK_CH%s_LOC' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = slot

    def config_plybk_ch_width(self, portside, channel, width):
        """
        The function configures channel width for PORTA or PORTB Playback

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param width: 0 to 32
        :type width: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        if width < 0 or width > self.maxchwidth:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (width, self.maxchwidth))

        if channel < 7:
            chcfgmap = 1
        elif channel >= 7 and channel < 13:
            chcfgmap = 2
        else:
            chcfgmap = 3

        regname = 'PORT%s_PLYBK_CH_WIDTH_CFG%s' % (portside.upper(), chcfgmap)
        fieldname = 'CP_PORT%s_PLAYBK_CH%s_WIDTH' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = width - 1

    def config_plybk_ch_en(self, portside, channel, enable):
        """
        The function configures channel enable for PORTA or PORTB Playback

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param enable: 0 or 1
        :type enable: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        regname = 'PORT%s_PLYBK_CH_EN' % (portside.upper())
        fieldname = 'CP_PORT%s_PLAYBK_CH%s_EN' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = enable

    def config_plybk_ch_srcsel(self, portside, channel, source):
        """
        The function configures PORTA or PORTB playback source select.

        :param portside:  'A' or 'B'
        :type portside: str
        :param channel:  1 to 16
        :type channel: int
        :param source: 0 to 4
        :type source: int
        """

        if (channel < 9):
            chcfgmap = 1
        else:
            chcfgmap = 2

        regname = 'PORT%s_PLYBK_CH_SRC_SEL%s' % (portside.upper(), chcfgmap)

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        fieldname = 'CP_PORT%s_PLAYBK_CH%s_SEL' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = source

    def config_cptr_clk(self, portside, framewidth=64, fsd=1, fsyncinv=1):
        """
        Configures PORTA playback for SAB

        :param portside: 'A' or 'B'
        :type portside: str
        :param framewidth:
                     0x000=1 sclk per frame

                     0x001=2 sclks per frame

                     0xFFE=4095 sclks per frame

                     0xFFF=4096 sclks per frame
        :type framewidth: int
        :param fsd: 0-sclk delay = 0

                     0.5-sclk delay = 1

                     1-sclk delay  = 2

                     1.5-sclk delay = 3

                     2-sclk delay = 4

                     2.5-sclk delay = 5

                     3-sclk delay [max] = 6
        :type fsd: int
        :param fsyncinv: 0 = don't invert fsync

                     1 = invert fsync
        :type fsyncinv: int
        """

        regname = 'PORT%s_CPTR_CLK_CFG' % (portside.upper())

        field1 = 'CP_PORT%s_CPTR_NUM_SCLKS' % (portside.upper())
        field2 = 'CP_PORT%s_CPTR_FSD' % (portside.upper())
        field3 = 'CP_PORT%s_CPTR_FSYNC_INV' % (portside.upper())
        field4 = 'CP_PORT%s_CPTR_SCLK_INV' % (portside.upper())

        func1 = getattr(self, regname)
        func2 = getattr(func1, field1)
        func3 = getattr(func1, field2)
        func4 = getattr(func1, field3)
        func5 = getattr(func1, field4)

        func2.value = framewidth-1
        func3.value = self.fsddict[fsd]

        func4.value = fsyncinv

        func5.value = 0

    def config_cptr_ch(self,portside, channel, enable, slot, width):

        self.config_cptr_ch_loc(portside, channel, slot)
        self.config_cptr_ch_width(portside, channel, width)
        self.config_cptr_ch_en(portside, channel, enable)

    def config_cptr_ch_loc(self, portside, channel, slot):
        """
        The function configures channel location for PORTA or PORTB Capture

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param slot: 0 to 4095
        :type slot: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        if slot < 0 or slot > self.maxchslot:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (slot, self.maxchslot))

        regname = 'PORT%s_CPTR_CH_LOC_CFG%s' % (portside.upper(), self.chloccfgmap[channel])
        fieldname = 'CP_PORT%s_CPTR_CH%s_LOC' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = slot

    def config_cptr_ch_width(self, portside, channel, width):

        """
        The function configures channel width for PORTA or PORTB Capture

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param width: 0 to 32
        :type width: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        if width < 0 or width > self.maxchwidth:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (width, self.maxchwidth))

        if (channel < 7):
            chcfgmap = 1
        elif(channel >= 7 and channel < 13):
            chcfgmap = 2
        else:
            chcfgmap = 3

        regname = 'PORT%s_CPTR_CH_WIDTH_CFG%s' % (portside.upper(), chcfgmap)
        fieldname = 'CP_PORT%s_CPTR_CH%s_WIDTH' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = width - 1

    def config_cptr_ch_en(self, portside, channel, enable):
        """
        The function configures channel enable for PORTA or PORTB Capture

        :param portside: 'A' or 'B'
        :type portside: str
        :param channel: 1 to 16
        :type channel: int
        :param enable: 0 or 1
        :type enable: int
        """

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        regname = 'PORT%s_CPTR_CH_EN' % (portside.upper())
        fieldname = 'CP_PORT%s_CPTR_CH%s_EN' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = enable

    def config_cptr_ch_srcsel(self, portside, channel, source):
        """
        The function configures PORTA or PORTB Capture source select.

        :param portside:  'A' or 'B'
        :type portside: str
        :param channel:  1 to 16
        :type channel: int
        :param source: 0 to 4
        :type source: int
        """

        if (channel < 9):
            chcfgmap = 1
        else:
            chcfgmap = 2

        regname = 'PORT%s_CPTR_CH_SRC_SEL%s' % (portside.upper(), chcfgmap)

        if channel < 0 or channel > self.maxchannels:
            raise ValueError('Invalid input: either chan %d < 0 or > maximum %s' % (channel, self.maxchannels))

        fieldname = 'CP_PORT%s_CPTR_CH%s_SEL' % (portside.upper(), channel)

        func1 = getattr(self, regname)
        func2 = getattr(func1, fieldname)
        func2.value = source
