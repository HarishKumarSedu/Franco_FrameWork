from multiprocessing import Process, Pipe, Lock
from cl_test_station.instrumentation.instrument import Instrument
from cl_test_station.instrumentation.instrument_support import InstrumentServerControl
from cl_test_station.pyro_support.pyro_transmitter import PyroTransmitter
from cl_test_station.test_station_object import TestStationObject

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class InstrumentBuilder(TestStationObject):
    """**Builds the instrument for the test station object.**"""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def construct_objects(self, specific_class=None):
        super().construct_objects(specific_class=specific_class)

        # server_container = self.find_container(TestStationServer)
        # if server_container is not None:
        #     isc_instance = InstrumentServerControl(self.resources)
        #     isc_instance.daemon = server_container.pyro4_daemon
        #     isc_uri = isc_instance.daemon.register(isc_instance)
        #     server_container.name_server.register("instrument_server", isc_uri)

    def register_instruments(self, ns, daemon):
        """Place Holder"""
        self.instruments = []
        for key, inst in self.resources.items():
            if (inst.config['State'] == 'FOUND'):
                pyro_obj = inst.config['host_if']
                print(': {}  = instrument type {} at address {}:{}'.format(
                    inst.ref_name,
                    inst.config['Type'],
                    inst.config['Interface'],
                    inst.config['Address']
                ))
                self.instruments.append(key)
                uri = daemon.register(pyro_obj)
                ns.register(key, uri)

    def serialize(self, top=False, exclude_classes=None, file_path = None):
        return {}

    def generate_id( *args, **kwargs):
        return 0
