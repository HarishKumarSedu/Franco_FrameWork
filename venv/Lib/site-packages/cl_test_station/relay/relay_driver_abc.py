from abc import ABCMeta, abstractmethod
from typing import Union

from cl_test_station.relay.enums import RelayState


class RelayDriverAbc(metaclass=ABCMeta):
    """Generic Relay driver interface"""

    @property
    @abstractmethod
    def state(self) -> RelayState:
        """
        Returns the driver's current state

        :return: Current state
        :rtype: RelayState
        """

    @state.setter
    @abstractmethod
    def state(self, value: Union[RelayState, str, bool]):
        """
        Sets the driver's current state

        :param value:
        :type value: RelayState | str | bool
        :return: None
        :rtype: None
        """
