from enum import Enum, auto, unique
from typing import Union


@unique
class RelayState(Enum):
    """Enumeration of Relay states"""
    OPEN = 0
    """Relay open: Driver is off (not pulling low)"""
    CLOSED = auto()
    """Relay closed: Driver is pulling low (on)"""

    # https://docs.python.org/3.7/library/enum.html#supported-sunder-names
    # Apparently not needed to support bool as wanted
    # def _missing_(cls, value):
    #     """
    #     Adding support for booleans as RelayState values
    #
    #     :param value: Undefined value
    #     :type value: bool
    #     :return: Corresponding RelayState
    #     :rtype: RelayState | None
    #     """
    #     return RelayState.CLOSED if value else RelayState.OPEN
    #     # attempted to use casting function and natively handling str & int,
    #     # but they ValueError and TypeError about missing value parameter
    #     # return cast_to_relay_state(value)


def cast_to_relay_state(value: Union[bool, int, str, RelayState]) -> RelayState:
    """
    Cast non-enumeration values into enumeration. Supports casting from any case insensitive strings of OPEN & CLOSED.
    For all other types like bool and int, it does evaluation to True being CLOSED.

    :param value: Value to cast into RelayState
    :type value: bool | int | str | RelayState
    :return: RelayState Enumeration
    :rtype: RelayState
    """
    # pass through existing enumeration
    if isinstance(value, RelayState):
        return value
    # cast string
    if isinstance(value, str):
        return RelayState[value.upper()]
    # cast bool and others
    return RelayState.CLOSED if value else RelayState.OPEN
