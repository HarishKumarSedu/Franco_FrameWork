from typing import Optional, Union

from cl_test_station.multisource.multisourceabc import MultiSourceABC
from cl_test_station.relay.enums import RelayState
from cl_test_station.relay.relay_driver_abc import RelayDriverAbc


class Relay(MultiSourceABC):
    """MultiSource Relay Abstraction"""

    def resolve_source(self, path: str) -> Optional[RelayDriverAbc]:
        """
        Resolves the specified path to a RelayDriver. Returns None if the given source is not available.

        :param path: Name of RelayDriver in project configuration
        :type path: str
        :return: RelayDriver or None if not present
        :rtype: RelayDriverAbc | None
        """
        obj = super().resolve_source(path)
        # verify object is a RelayDriver or None for not present
        if isinstance(obj, (RelayDriverAbc, type(None))):
            return obj
        # else return None and issue warning for invalid types
        self.log.warning(
            f"{path} is an invalid source for Relay {self.path}. Required to be RelayDriverAbc, not {type(obj)}")
        return None

    @property
    def active_source(self) -> Optional[RelayDriverAbc]:
        """
        Returns the current RelayDriver for the Relay

        :return: Current RelayDriver object
        :rtype: Optional[RelayDriverAbc]
        """
        return MultiSourceABC.active_source.fget(self)

    @active_source.setter
    def active_source(self, selection: str):
        """
        Changes the active source to the given source name. If defined, it also calls the connect function.
        Override was required to keep active_source interface working

        :param selection: Name of the available RelayDriver to be made active
        :type selection: str
        :return: None
        :rtype: None
        """
        MultiSourceABC.active_source.fset(self, selection)

    @property
    def state(self):
        """
        Returns the current RelayState from the active relay driver

        :return: Current RelayState
        :rtype: RelayState
        """
        return self.active_source.state

    @state.setter
    def state(self, value: Union[RelayState, str, bool]):
        """
        Sets the Relay's state

        :param value: State to set relay
        :type value: RelayState | str | bool
        :return: None
        :rtype: None
        """
        self.active_source.state = value
