import os
import sys
import importlib
import pkgutil
from abc import ABCMeta, abstractmethod
from inspect import isclass
from importlib import import_module
from pathlib import Path
from operator import attrgetter
from time import sleep

import cl_test_station.components.component.component as component
from cl_test_station.test_station_object import TestStationObject, TsoField


class Board(TestStationObject, metaclass=ABCMeta):
    """**The test station board object.**"""

    database_id: int = TsoField(ftype=int, required=False,
                                desc="Board ID for database logging. "
                                     "Can hardcode this attribute in the config YML for EEPROMless boards. "
                                     "eeprom_name and database_id_field_name are not needed if this is specified.")

    """Board ID for database logging. Can hardcode this attribute in the config YML for EEPROMless boards. eeprom_name
    and database_id_field_name are not needed if this is specified."""

    eeprom_name: str = TsoField(ftype=str, required=False, desc="EEPROM component name defined for this board. "
                                                                "Use this attribute along with database_id_field_name.")

    """EEPROM component name defined for this board. Use this attribute along with database_id_field_name."""

    database_id_field_name: str = TsoField(ftype=str, required=False,
                                           desc="Field name in EEPROM for this board ID. "
                                                "Will not be queried if database_id is not defined in the YML. "
                                                "Use this attribute along with eeprom_name.")

    """Field name in EEPROM for this board ID. Will not be queried if database_id is not defined in the YML.
    Use this attribute along with eeprom_name."""

    def __init__(self, *args, **kwargs):
        self._database_id = None
        super().__init__(*args, **kwargs)

    def initialize(self, **kwargs):
        """Initializes board for board object."""
        super().initialize(**kwargs)

    def shutdown(self, **kwargs):
        """Shutdowns board for the board object."""
        super().shutdown(**kwargs)

    def get_board_barcode(self) -> str:
        """Query database boards.board table and get barcode for board_id.

        :return: Board barcode
        :rtype: str
        """
        barcode = self.find_top_level().get_val_db_attr().get_board_barcode(self.database_id)
        return barcode

    @property
    def database_id(self):
        """Checks the value for database_id. If the database_id is an invalid value raises Error. """
        if self._database_id is None:
            if self.eeprom_name is None or self.database_id_field_name is None:
                raise AttributeError("If database_id is not defined in config.yml, "
                                     "then eeprom_name and database_id_field_name must be defined.")
            else:
                board = self
                while board is not None:
                    eeprom_host_board = board.find_resource(f'{self.eeprom_name}')
                    if eeprom_host_board is None:
                        board = board.find_container(Board)
                    else:
                        break
                if eeprom_host_board is None:
                    raise Exception(f"No component named {self.eeprom_name} exists. "
                                    f"Enter valid eeprom_name for {self.ref_name}.")
                attr = eeprom_host_board[0][1]
                for attr_name in self.database_id_field_name.split('.'):
                    attr = getattr(attr, attr_name)
                self._database_id = attr.value
        return self._database_id

    @database_id.setter
    def database_id(self, new_database_id):
        """Sets the database id to the new_database_id."""
        self._database_id = new_database_id

    def program_database_id(self, barcode: str = None):
        """Program ID EEPROM field.

        Use barcode to query DB and get board ID. If barcode argument is not provided, prompt for input.

        :param barcode: Board barcode
        :type barcode: str
        """
        if not barcode:
            barcode = input("Enter board barcode: ")
        barcode = barcode.strip('"')
        barcode = barcode.strip("'")

        db_boards = self.find_top_level().get_val_db_attr().db_boards
        success, rows = db_boards.get_records(table="board", new_row={"barcode": barcode})
        if (not success) or (len(rows) < 1):
            raise Exception(f"No board table entries found for barcode {barcode}")
        if len(rows) > 1:
            error_str = f"Multiple board table entries found for barcode {barcode}:\n\t"
            error_str += "\n\t".join([f"id: {row['id']}, barcode: {row['barcode']}" for row in rows])
            raise Exception(error_str)
        else:
            self.log.info("Board ID found, programming EEPROM...")
            id = rows[0]['id']
            if not self.eeprom_name:
                raise Exception(f"eeprom_name is not defined for {self.ref_name}")
            if not self.database_id_field_name:
                raise Exception(f"database_id_field_name is not defined for {self.ref_name}")
            eeprom = getattr(self, self.eeprom_name)
            save = eeprom.verify_writes
            eeprom.verify_writes = False
            db_id_field = attrgetter(self.database_id_field_name)(eeprom)
            db_id_field.value = id
            eeprom.verify_writes = save
            sleep(0.01)
            if db_id_field.readable:
                read_back = db_id_field.value
                if read_back != id:
                    self.log.error(f"EEPROM {eeprom.ref_name} programmed unsuccessfully. Expected {id}, read back {read_back}")
            self.log.info("done.")
