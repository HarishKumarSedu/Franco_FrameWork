from typing import Iterable, List, Union

from cl_test_station.gpio.digital_pin import DigitalPin
from cl_test_station.multisource.tso_group import TSOGroup


class DigitalPinGroup(TSOGroup):
    """Digital Pin abstraction."""

    def belongs_in_group(self, obj: DigitalPin) -> bool:
        """Group admittance filter. Return true if obj is of type DigitalPin.

        :param obj: DigitalPin to add to the group
        :type obj: DigitalPin
        :return: True if the obj was added, otherwise, False
        :rtype: bool
        """
        belongs = isinstance(obj, DigitalPin)
        if not belongs:
            self.log.warning(
                f"{obj} not added to DigitalPinGroup {self.path}, obj must be of type DigitalPin"
            )
        return belongs

    @property
    def outputs(self) -> List[int]:
        """Returns the current output value for all DigitalPins in group.

        :return: Pin levels
        :rtype: List[int]
        """
        return [dp.output for dp in self._elements.values()]

    @outputs.setter
    def outputs(self, value: Union[int, List[int]]):
        """Sets the output value of the pins in the group. A List of values can
        be passed, len must match the amount of items in the group. Otherwise,
        if an int is passed, then all pins are set to the same value.

        :param value:
        :type value: Union[int, List[int]]
        :return: None
        :rtype: None
        """

        if isinstance(value, int):
            value = [value] * len(self)
        elif isinstance(value, Iterable) and len(value) != len(self):
            raise RuntimeError(
                f"{self} outputs setter value size mismatch. Group contains {len(self)} elements, len(value)={len(value)}"
            )

        for elm, val in zip(self._elements.values(), value):
            elm.output = val

    @property
    def inputs(self) -> List[int]:
        """Reads the input value of all DigitalPins in group.

        :return: Input value
        :rtype: List[int]
        """
        return [dp.input for dp in self._elements.values()]
