from cl_test_station.host_controllers.mcu_controller.mcu_controller import McuController
from cl_test_station.interfaces.mcu_firmware.enums import SqaPortModes
from cl_test_station.interfaces.mcu_firmware.packets import McuResponse
from cl_test_station.test_station_object import TsoField


class NxpRt600Controller(McuController):

    # Field overwrites for auto-flashing firmware
    flash_target_name: str = TsoField(ftype=str, required=False, default='MIMXRT685S_M33',
                                      desc="Name of target device for flashing")
    flash_file_name: str = TsoField(ftype=str, required=False, default='rt600_st_firmware.hex',
                                    desc="Name of hex file to flash (non-revisioned)")

    def select_port_mode(self, port_mode: SqaPortModes, queue: bool = True) -> McuResponse:
        """
        Selects which port to use for all bus commmunication packets.

        :param port_mode: Port to select:
            * I2C: Normal I2C (SDA: J27-1, SCL: J27-2)
            * I3C_DM: I2C over the I2C Bus (SDA: J18-2, SCL: J18-1)
            * I3C_DM: Normal I3C (SDA: J18-2, SCL: J18-1)
        :type port_mode: SqaPortModes
        :param queue: True = queue packet and return placeholder response. False = Execute single packet and return response
        :type queue: bool
        :return: McuResponse dataclass that holds the updated header, payload, and time stamp
        :rtype: McuResponse
        """
        header = self._create_header(op=SqaOperations.SELECT_PORT_MODE, payload_size=4)
        payload = SelectPortModeStimulusPayload(port_mode)
        return self.__handle_packet_request(header, payload, queue)

    def enable_i2c(self):
        """
        Selects the I2C Port

        :return: None
        :rtype: None
        """
        self.select_port_mode(SqaPortModes.I2C, queue=False)

    def enable_i3c_default_mode(self):
        """
        Selects the I3C_DM Port. Performs I2C over the I3C bus

        :return: None
        :rtype: None
        """
        self.select_port_mode(SqaPortModes.I3C_DM, queue=False)

    def enable_i3c(self):
        """
        Selects the I3C Port

        :return: None
        :rtype: None
        """
        self.select_port_mode(SqaPortModes.I3C, queue=False)
