from array import array


def intList_to_byteArray(intList, width):
    """
    This function will create a byte array with Big-endian format.

    :param intList: list of ints
    :type intList: list[ints]
    :param width: number of bytes per integer
    :type width: int
    :return: Byte array
    """
    # width is the number of bytes per integer
    # this function will create a byte array with Big-endian format
    num_ints = len(intList)
    num_bytes = num_ints * width
    byteArray = array('B', [0]*num_bytes)
    for i in range(0, num_ints):
        for j in range(0, width):
            byteArray[j + (width * i)] = (intList[i] >> (8 * (width - 1 - j))) & 0xFF
    return byteArray


def byteArray_to_intList(byteArray, width):
    """
    Turns byte array to in int list.

    :param byteArray: an array of bytes
    :type byteArray: array
    :param width: number of bytes per integer
    :return: int list
    """
    # width is the number of bytes per integer
    # this function assumes the byte array has Big-endian format
    if len(byteArray) % width != 0:
        raise Exception("len(byteArray) isn't a multiple of 'width'")
    num_ints = int(len(byteArray) / width)
    intList = [0] * num_ints
    for i in range(0, num_ints):
        for j in range(0, width):
            intList[i] |= byteArray[((i * width) + j)] << (8 * (width - 1 - j))
    return intList
