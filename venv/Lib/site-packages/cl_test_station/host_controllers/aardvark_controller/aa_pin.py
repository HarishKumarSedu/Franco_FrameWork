from dataclasses import dataclass, field
from typing import TYPE_CHECKING, Union

from cl_test_station.gpio.enums import PinPolarity, PinKind, PinDirection
from cl_test_station.gpio.pin import Pin, output_only_kind, output_only_dir, input_only_kind, input_only_dir
from cl_test_station.host_controllers.aardvark_controller.enums import AaGpios

if TYPE_CHECKING:
    from cl_test_station.host_controllers.aardvark_controller.Aardvark import Aardvark


@dataclass(repr=False)
class AardvarkPin(Pin):
    """**Abstract baseclass that outlines standard functions/properties for a GPIO pin. Getters are required, setters are
    optional depending on the pin's functionality**"""

    _gpio: AaGpios
    _host: 'Aardvark'

    def __repr__(self):
        return f"{self.__class__.__name__}(name={self._gpio.name})"

    @property
    def kind(self) -> PinKind:
        """Returns the kind of pin. Can be INPUT_ONLY, OUTPUT_ONLY, or INOUT.

        :return: Pin kind
        :rtype: PinKind
        """
        return PinKind.INOUT

    @property
    def direction(self) -> PinDirection:
        """Returns the pin's direction.

        **If current pin configuration is an output:** PinDirection.OUTPUT

        **If current pin configuration is an input:** PinDirection.INPUT

        :return: Pin direction
        :rtype: PinDirection
        """
        dir_value = self._host.get_gpio_direction(self._gpio.bit_pos)  # 0 = INPUT, 1 = OUTPUT
        return PinDirection(dir_value ^ 1)

    @direction.setter
    def direction(self, value: Union[PinDirection, int]):
        """
        Sets direction. 0 = OUTPUT, 1 = INPUT.

        :param value: Desired direction
        :type value: int
        :return: None
        :rtype: None
        """
        if type(value) is PinDirection:
            value = value.value
        self._host.set_gpio_direction(self._gpio.bit_pos, value ^ 1)

    @property
    def polarity(self) -> PinPolarity:
        """Returns the pin's polarity.

        **PinPolarity.NORMAL indicates:** a value of 1 -> HIGH, 0 -> LOW.

        **PinPolarity.INVERTED indicates:** 1 -> LOW, 0 -> HIGH

        :return: Pin's polarity configuration
        :rtype: PinPolarity
        """
        return PinPolarity.NORMAL

    @property
    def value(self) -> int:
        """Returns the value of the pin, direction dependent.

        **If direction is OUTPUT:** returns drive level.

        **If direction is INPUT:** returns the measured level of the pin.

        .. warning::

           Pin.value will be deprecated in cl-test-station 2.0. Use explicit input/output methods instead

        :return: Pin level
        :rtype: int
        """
        raise NotImplementedError("Use output/input instead of value.")

    @property
    @output_only_dir
    @output_only_kind
    def output(self) -> int:
        """Returns the current output value.

        :return: Pin level
        :rtype: int
        """
        return self._host.get_gpio_output(self._gpio.bit_pos)

    @output.setter
    @output_only_dir
    @output_only_kind
    def output(self, value: int):
        """Sets the output value of the pin.

        :param value:
        :type value: int
        :return: None
        :rtype: None
        """
        self._host.set_gpio_output(self._gpio.bit_pos, value)

    @property
    @input_only_dir
    @input_only_kind
    def input(self) -> int:
        """Reads the input value of the pin.

        :return: Input value
        :rtype: int
        """
        return self._host.get_gpio_input(self._gpio.bit_pos)

    @property
    def pullup_en(self) -> bool:
        """
        Returns pullup resistor enable setting.

        NOTE: This is not the same as setting I2C pullups when operating in I2C mode.

        :return: Pullup enable
        :rtype: bool
        """
        return bool(self._host.get_gpio_pullup(self._gpio.bit_pos))

    @pullup_en.setter
    @input_only_dir
    def gpio_pullup_en(self, value: bool):
        """
        Sets internal pullup resistor enable for input line.

        NOTE: This is not the same as setting I2C pullups when operating in I2C mode.

        :param value: Pullup enable value
        :type value: bool
        :return: None
        :rtype: None
        """
        self._host.set_gpio_pullup(self._gpio.bit_pos, int(value))