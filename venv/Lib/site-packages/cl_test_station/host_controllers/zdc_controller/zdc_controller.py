"""
Class definition for Zync Daughter Card (ZDC) host controller.

Author: Evan Canter <evan.canter@cirus.com>
"""
import socket
import time
from cl_test_station.gpio.enums import *
from cl_test_station.host_controllers.audiohub_controller.linux_pin import LinuxPin
from cl_test_station.host_controllers.host_controller.host_controller import HostController
from cl_test_station.host_controllers.thrift_controller.thrift_controller import ThriftController
from cl_test_station.test_station_object import TsoField


class ZdcController(ThriftController):
    """Driver class for ZDC"""

    connection_timeout: int = TsoField(ftype=int, required=False, default=30,
                                       desc="Time to wait for a zdc connection (in seconds)")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.ipaddr: str = None

    def connect(self, modules=None):
        """
        Updates the code on controller and then attempts to open thrift transport. Will only attempt if there is not an
        existing connection open. Uses IP Address to open thrift transport to increase performance.

        :param modules: List of names for all modules loaded in python session. Tells the Audiohub what needs to be
            installed on its OS
        :type modules: list
        :return: None
        """
        if not self.is_connected():
            # ZDC might be booting up. Attempt to resolve hostname multiple times
            start = time.time()
            while time.time()-start <= self.connection_timeout:
                try:
                    self.ipaddr = socket.gethostbyname(self.hostname)
                    break
                except socket.gaierror:
                    continue
            else:
                raise Exception(f"Could not connect to {self.hostname}, "
                                f"exceeded timeout of {self.connection_timeout} seconds.")
            # Re-create thrift client with IP Address to improve performance
            self.client.open(self.ipaddr, self.socket)
            # Procees with normal connection process
            super().connect(modules)
        # Grab IP Address if Controller is already connected
        if self.ipaddr is None:
            self.ipaddr = socket.gethostbyname(self.hostname)
        # Attempt to create GPIO pin objects
        try:
            self.log.debug("Executing create_pins()")
            self.create_pins()
        except Exception as err:
            self.log.exception(f"Received {type(err)} in create_pins()")

    def create_pins(self):
        """
        Create pin attributes for libgpiod pins on the ZDC's gpiochips

        :return: None
        :rtype: None
        """
        self.pins['gpio_39'] = LinuxPin('GPIO_39', self)
        self.pins['gpio_41'] = LinuxPin('GPIO_41', self)
        self.pins['gpio_42'] = LinuxPin('GPIO_42', self)
        self.pins['gpio_43'] = LinuxPin('GPIO_43', self)

class EmbeddedZdcController(ZdcController):
    """Reduced wrapper class for ah_ctrl_server use only"""

    def configure(self, config, *args, **kwargs):
        """
        Configures the ZDC controller
        :param config: configure
        :type config: str | dict
        """
        HostController.configure(self, config, *args, **kwargs)
