from queue import Empty
from typing import List

from cl_test_station.host_controllers.sim_host_controller.sim_thrift_controller import SimThriftController
from cl_test_station.utilities.dummy_object import DummyObject


class SimAhController(SimThriftController):
    """Simulation Audiohub class"""

    __resource_names__ = ['fpga', 'spmi_manager', 'arm', 'pins', 'variants']

    def construct_registers(self):
        """Empty construct registers definition"""
        pass

    def set_rail_voltage(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.set_rail_voltage(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def program_xmos_image(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.program_xmos_image(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def enable_spmi(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.enable_spmi(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def reset_spmi_master(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.reset_spmi_master(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def spmi_device_initialize(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.spmi_device_initialize(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def spmi_device_disable(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.spmi_device_disable(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def spmi_dump_registers(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.spmi_dump_registers(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def spmi_poll_command_sent_flag(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.spmi_poll_command_sent_flag(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def empty_server_queue(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.empty_server_queue(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def clear_queue(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.clear_queue(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def pop_interrupt_queue(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.pop_interrupt_queue(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def hcc_set_speed(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.hcc_set_speed(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def hcc_driver_unregister(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.hcc_driver_unregister(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def hcc_driver_register(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.hcc_driver_register(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def hcc_driver_register(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console."""
        self.log.debug(f"SimThriftController.hcc_driver_register(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")

    def hcc_hint_queue_get(self, *args, **kwargs):
        """Simulated function. Prints attempted call to the console. Raises queue.Empty Exception"""
        self.log.debug(f"SimThriftController.hcc_hint_queue_get(), args: {args}, kwargs: ({', '.join(kwargs.keys())})")
        raise Empty('Simulation AudioHub does not have an interrupt queue')
