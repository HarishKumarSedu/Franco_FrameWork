import os

from cl_test_station.components.component.component import Component
from cl_test_station.interfaces.ctrl_interface import map_word, ByteOrder
from cl_test_station.utilities.reusables import get_revision_file, get_latest_revision_file
from cl_test_station.test_station_object import TsoField


class SqaMachine(Component):
    """Component that represents MCU firmware app"""

    _gen_separate_pyi_file = True
    firmware_version_addr: int = TsoField(ftype=int, desc="Address of firmware version register")

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.register_map_name = "sqa_machine_registers.csv"

    def get_revision(self) -> str:
        """
        Reads firmware register from address, then splits value into major, minor, and patch numbers.
        Format of revision string: 'major_minor_patch'

        :return: Revision string
        :rtype: str
        """
        fw_reg_value = self.read_register(self.firmware_version_addr)
        # 24 bits, 8 bits each for major, minor, and patch number
        fw_reg_bytes = map_word(fw_reg_value, 3, ByteOrder.MSB_FIRST)
        # Assemble revision numbers in form: major_minor_patch
        return '_'.join(map(str, fw_reg_bytes))

    def get_firmware_version(self) -> str:
        """
        Gets current firmware version by reading each field. Returns version in form 'major.minor.patch'.

        :return: Firmware version string
        :rtype: str
        """
        fields = {}
        with self.ReadFieldsOptimizer(fields):
            self.firmware_version_major.value
            self.firmware_version_minor.value
            self.firmware_version_patch.value
        return '.'.join(map(str, fields.values()))

    # ToDo: Remove this when component revisioning gets implemented in the base class
    def construct_registers(self):
        fw_revision = self.get_revision()
        regmap_path = get_revision_file(self.register_map_path, self.register_map_name, fw_revision)
        self.register_map_name = os.path.basename(regmap_path)
        super().construct_registers()
