from cl_test_station.utilities.packets.packets import PacketBase
from cl_test_station.interfaces.mcu_firmware.enums import SqaOperations
from cl_test_station.interfaces.mcu_firmware.packets import McuResponse
from typing import Iterator

class McuPacketList(list):
    """
    Extension of list type that adds filtering by SqaOperation or McuResponse/McuStimulus type.

    e.g. if the McuPacketList packets = [Set speed and tick rate, I2C write, I2C read, I2C write, I2C write], then:
        * packets[0] = McuResponse(SET_SPEED_AND_TICK_RATE...)
        * packets[SqaOperations.I2C_WRITE] = [McuResponse(I2C_WRITE), McuResponse(I2C_WRITE), McuResponse(I2C_WRITE)]
        * packets[McuI2cReadResponse] = [McuI2cReadResponse(I2C_READ)]

    """

    def __iter__(self) -> Iterator[McuResponse]:
        return super().__iter__()

    def __getitem__(self, item) -> McuResponse:
        # Filter by operation
        if type(item) is SqaOperations:
            return [elem for elem in self if elem.header.operation is item]
        # Filter by class type
        # if issubclass(item, McuResponse):
        #     return [elem for elem in self if isinstance(elem, item)]
        return super().__getitem__(item)

    def rindex(self, value):
        # Reversing and indexing is faster than looping in python
        rev = list(reversed(self))
        return rev.index(value)
