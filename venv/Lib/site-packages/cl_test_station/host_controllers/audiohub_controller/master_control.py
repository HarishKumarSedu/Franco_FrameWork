class Register:
    """Class that represents SmartDV SPMI registers in the AudioHub"""

    def __init__(self, name, addr, audiohub):
        self.name = name
        self.addr = addr
        self.container = audiohub

    @property
    def value(self) -> int:
        """
        Performs memio read through mmap to read register from AudioHub.

        :return: Register value
        :rtype: int
        """
        return self.container.memio_read(self.addr)

    @value.setter
    def value(self, data: int):
        """
        Performs memio write through mmap to write data to register.

        :param data: Write data
        :type data: int
        :return: None
        :rtype: None
        """
        self.container.memio_write(self.addr, data)


class SpmiMasterCtrl:
    """Class that defines SmartDv register offsets, builds Register classes, and maps out the manager write data
    (0x100-0x1FF)"""
    offsets = {
        "CONTROL": 0x00 * 4,  # CONTROL
        "VERSION": 0x01 * 4,  # VERSION
        "INT_MASK": 0x02 * 4,  # INT_MASK
        "INT_STATUS": 0x03 * 4,  # INT_STATUS
        "ARB_TBT_LSB": 0x04 * 4,  # ARB_TST_LSB
        "ARB_TBT_MSB": 0x05 * 4,  # ARB_TST_MSB
        "RSP_ADDR": 0x06 * 4,  # RSP_ADDR
        "ARB_SYNC": 0x07 * 4,  # ARB_SYNC
        "ARB_SYNC_ID": 0x08 * 4,  # ARB_SYNC_ID
        "RSP_CMD": 0x09 * 4,  # RSP_CMD
        "REQ_PRESCALER": 0x10 * 4,  # INTerrupt flags orig now REQ_PRES
        "REQ_COMMAND": 0x11 * 4,  # INTerrupt enable orig now REQ_COMMAND
        "REQ_SLVA_BC": 0x12 * 4,  # NEW stuff
        "REQ_ADDRESS_LO": 0x13 * 4,  # REQ ADDR LOW
        "REQ_ADDRESS_HI": 0x14 * 4,  # REQ ADDR HI
        "REQ_STATUS": 0x15 * 4,  # REQ ADDR LOW
        "REQ_RD_WAIT": 0x16 * 4,  # REQ ADDR HI
        "REQ_DATA0": 0x20 * 4,  # REQ DATA 0
        "REQ_DATA1": 0x21 * 4,  # REQ
        "REQ_DATA2": 0x22 * 4,  # REQ
        "REQ_DATA3": 0x23 * 4,  # REQ
        "REQ_DATA4": 0x24 * 4,  # REQ
        "REQ_DATA5": 0x25 * 4,  # REQ
        "REQ_DATA6": 0x26 * 4,  # REQ
        "REQ_DATA7": 0x27 * 4,  # REQ
        "REQ_DATA8": 0x28 * 4,  # REQ
        "REQ_DATA9": 0x29 * 4,  # REQ
        "REQ_DATAA": 0x2A * 4,  # REQ
        "REQ_DATAB": 0x2B * 4,  # REQ
        "REQ_DATAC": 0x2C * 4,  # REQ
        "REQ_DATAD": 0x2D * 4,  # REQ
        "REQ_DATAE": 0x2E * 4,  # REQ
        "REQ_DATAF": 0x2F * 4,  # REQ  DATA F
        "REQ_RD_STATUS0": 0x30 * 4,  # REQ RD STATUS0
        "REQ_RD_STATUS1": 0x31 * 4,  # REQ RD STATUS1
        "ABORT_WAIT_LSB": 0x32 * 4,  # REQ ABORT WAIT LSB
        "ABORT_WAIT_MSB": 0x33 * 4,  # REQ ABORT WAIT MSB
        "ERROR_INJECT": 0x40 * 4,  # ERROR INJECT
        "ERROR_VALUE": 0x41 * 4,  # REQ ABORT WAIT LSB
        "ERROR_INDEX": 0x42 * 4,  # REQ ERROR VALUE
        "MST_CLOCK_SEL": 0xFF * 4,  # REQ ERROR VALUE
        "MST_WRITE_DATA0": 0x100 * 4  # MASTER WRITE ADDRESS
    }

    def __init__(self, audiohub):
        self.container = audiohub
        for reg_name in self.offsets.keys():
            new_reg = Register(reg_name, self.offsets[reg_name], self.container)
            setattr(self, reg_name.upper(), new_reg)
        self.MST_WRITE_DATA = []
        for i in range(0, 256):
            self.MST_WRITE_DATA.append(Register('MST_WRITE_DATA%d'%i, (0x100 + i)*4, self.container))


if __name__ == '__main__':
    import csv
    import os
    file_path = os.path.join(os.environ['USERPROFILE'], 'Documents', 'spmi_regs.csv')
    with open(file_path, 'a', newline='') as f:
        writer = csv.writer(f)
        rows=[]
        for reg_name, offset in SpmiMasterCtrl.offsets.items():
            f_name = f'SPMI.{reg_name}.{reg_name}'
            rows.append([f_name, '_'.join(f_name.split('.')), None, f'SPMI.{reg_name}', f'SPMI.{reg_name}', hex(0x43c00000+offset), 8,
                   '0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7', 0, 8, 'RW', 0, 'N', 'none', 'N', 'U8.0', 'N', None, None])
        writer.writerows(rows)
