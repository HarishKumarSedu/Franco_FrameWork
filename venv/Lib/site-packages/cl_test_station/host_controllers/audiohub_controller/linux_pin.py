from dataclasses import dataclass, field
from typing import Union

from cl_test_station.components.component.component import Component
from cl_test_station.gpio.enums import *
from cl_test_station.gpio.pin import (
    Pin,
    input_only_dir,
    input_only_kind,
    output_only_dir,
    output_only_kind,
)


@dataclass
class LinuxPin(Pin):
    """Dataclass that represents an input/output pin on the Audiohub."""

    _consumer_name: str
    _controller: Component = field(repr=False)
    _default_direction: PinDirection = None
    _default_value: int = None

    def __post_init__(self):
        if self._default_direction is not None:
            self.direction = self._default_direction
        if self._default_value is not None:
            if self.direction == PinDirection.OUTPUT:
                self.value = self._default_value
            else:
                self._controller.log.warning(
                    "Direction is set to input. Can not set default value."
                )

    @property
    def kind(self) -> PinKind:
        """Audiohub Linux pins can be configured as inputs or outputs via the
        direction property.

        :return: PinKind.INOUT
        :rtype: PinKind
        """
        return PinKind.INOUT

    @property
    def direction(self) -> PinDirection:
        """Queries the direction of current pin.

        :return: Currently configured direction, either INPUT(1) or OUTPUT(0)
        :rtype: PinDirection
        """
        return PinDirection(
            self._controller.get_gpio_direction_by_name(self._consumer_name)
        )

    @direction.setter
    def direction(self, value: Union[PinDirection, int]):
        """Sets the desired direction. 0 -> OUTPUT, 1 -> INPUT.

        :param value: Desired pin direction
        :type value: PinDirection | int
        :return: None
        :rtype: None
        """
        if type(value) is PinDirection:
            value = value.value
        self._controller.set_gpio_direction_by_name(self._consumer_name, value)

    @property
    def value(self) -> int:
        """Reads the value of the pin.

        If output it reads what it is set to output.
        :return:
        :rtype:
        """
        return self._controller.get_gpio_by_name(self._consumer_name)

    @value.setter
    def value(self, value: int):
        """Sets the output value of the pin. Can only be set if direction is
        output.

        :param value:
        :type value:
        :return:
        :rtype:
        """
        if self.direction == PinDirection.INPUT:
            raise Exception(
                f"GPIO pin {self._consumer_name} is configured as input. You must change the direction in order to set the output value."
            )
        self._controller.set_gpio_by_name(self._consumer_name, value)

    @property
    @output_only_dir
    def output(self) -> int:
        """Returns the current output value.

        :return: Pin level
        :rtype: int
        """
        return self._controller.get_gpio_by_name(self._consumer_name)

    @output.setter
    @output_only_dir
    def output(self, value: int):
        """Sets the output value of the pin.

        :param value:
        :type value: int
        :return: None
        :rtype: None
        """
        self._controller.set_gpio_by_name(self._consumer_name, value)

    @property
    @input_only_dir
    def input(self) -> int:
        """Reads the input value of the pin.

        :return: Input value
        :rtype: int
        """
        return self._controller.get_gpio_by_name(self._consumer_name)

    @property
    def polarity(self) -> PinPolarity:
        return PinPolarity.NORMAL

    @output_only_dir
    def toggle(self, active_edge=0, delay=0.2, pulse_width=0.2):
        """Toggles the gpio pin high or low. Active edge 0= -_-  1= _-_

        :param active_edge: 0 - active low; 1 - active high
        :type active_edge: int
        :return: None
        :rtype: None
        """
        if self.direction == PinDirection.INPUT:
            raise Exception(
                f"GPIO pin {self._consumer_name} is configured as input. You must change the direction in order to toggle the output."
            )
        self._controller.toggle_gpio_by_name(
            name=self._consumer_name,
            active_edge=active_edge,
            delay=delay,
            pulse_width=pulse_width,
        )
