import re
from dataclasses import dataclass, field
from typing import *

from cl_test_station.components.component.component import Component
from cl_test_station.gpio.enums import *
from cl_test_station.gpio.pin import Pin, input_only_dir, input_only_kind


@dataclass
class InterruptPin(Pin):
    """Dataclass that represents an input/output pin on the Audiohub."""

    _controller: Component = field(repr=False)
    _int_num: int

    @property
    def kind(self) -> PinKind:
        """Audiohub interrupt pins are input only.

        :return: PinKind.INPUT_ONLY
        :rtype: PinKind
        """
        return PinKind.INPUT_ONLY

    @property
    def direction(self) -> PinDirection:
        """Queries the direction of current pin.

        :return: Currently configured direction, either INPUT(1) or OUTPUT(0)
        :rtype: PinDirection
        """
        return PinDirection.INPUT

    @direction.setter
    def direction(self, value: Union[PinDirection, int]):
        """Sets the desired direction. 0 -> OUTPUT, 1 -> INPUT.

        :param value: Desired pin direction
        :type value: PinDirection | int
        :return: None
        :rtype: None
        """
        raise AttributeError(
            f"PinKind is {PinKind.INPUT_ONLY.name}, direction will always be {PinDirection.INPUT.name}"
        )

    @property
    def value(self) -> int:
        """Reads the value of the pin.

        If output it reads what it is set to output.
        :return:
        :rtype:
        """
        return self._controller.arm.get_interrupt_status(self._int_num)

    @value.setter
    def value(self, value: int):
        """Sets the output value of the pin. Can only be set if direction is
        output.

        :param value:
        :type value:
        :return:
        :rtype:
        """
        raise AttributeError("Cannot set value for interrupt pins.")

    @property
    def polarity(self) -> PinPolarity:
        return PinPolarity.NORMAL

    def toggle(self, active_edge=0, delay=0.2, pulse_width=0.2):
        """Toggles the gpio pin high or low. Active edge 0= -_-  1= _-_

        :param active_edge: 0 - active low; 1 - active high
        :type active_edge: int
        :return: None
        :rtype: None
        """
        raise AttributeError("Cannot toggle interrupt pins, they are input only.")

    @property
    @input_only_dir
    @input_only_kind
    def input(self) -> int:
        """Reads the input value of the pin.

        :return: Input value
        :rtype: int
        """
        return self._controller.arm.get_interrupt_status(self._int_num)
