class EmbeddedResults:
    """**Creates new results entry, and all the test results methods.**"""
    def __init__(self, group_name, id):
        """
        Creates new results entry

        :param id: interrupt id
        """
        self.result_calls = []
        self.data = {}
        self.results = {'GROUP_NAME': group_name, 'ID': id, 'DATA': self.data, 'result_calls': self.result_calls}

    def record_data(self, data, key):
        """Place Holder"""
        self.data[key] = data

    def get_data(self):
        """Returns self.data"""
        return self.data

    # TEST RESULTS METHODS
    def test_step(self, step_msg):
        """Place Holder"""
        self.result_calls.append({"method": "test_step", "args": [step_msg]})

    def assert_true(self, state, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_true", "args": [state, assert_message]})

    def assert_false(self, state, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_false", "args": [state, assert_message]})

    def assert_equal(self, actual, expected, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_equal", "args": [actual, expected, assert_message]})

    def assert_almost_equal(self, actual, expected, within, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_almost_equal", "args": [actual, expected, within, assert_message]})

    def assert_within_percentage(self, actual, expected, percentage, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_within_percentage", "args": [actual, expected, percentage, assert_message]})

    def assert_not_within_percentage(self, actual, expected, percentage, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_not_within_percentage", "args": [actual, expected, percentage, assert_message]})

    def assert_regexp_matches(self, actual, regexp, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_regexp_matches", "args": [actual, regexp, assert_message]})

    def assert_regexp_not_matches(self, actual, regexp, assert_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_regexp_not_matches", "args": [actual, regexp, assert_message]})

    def current_outcome(self):
        """Place Holder"""
        self.result_calls.append({"method": "current_outcome", "args": []})

    def get_overall_outcome(self):
        """Place Holder"""
        self.result_calls.append({"method": "get_overall_outcome", "args": []})

    def step_outcome(self):
        """Place Holder"""
        self.result_calls.append({"method": "step_outcome", "args": []})

    def assert_outcome(self, html=True):
        """Place Holder"""
        self.result_calls.append({"method": "assert_outcome", "args": [html]})

    def step_outcome(self):
        """Place Holder"""
        self.result_calls.append({"method": "step_outcome", "args": []})

    def assert_message(self, assertion_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_message", "args": [assertion_message]})

    def record_fail(self, assertion_message):
        """Place Holder"""
        self.result_calls.append({"method": "record_fail", "args": [assertion_message]})

    def record_pass(self, assertion_message):
        """Place Holder"""
        self.result_calls.append({"method": "record_pass", "args": [assertion_message]})

    def record_abort(self, abort_string):
        """Place Holder"""
        self.result_calls.append({"method": "record_abort", "args": [abort_string]})

    def assert_greater(self, actual, expected_greater_than, check_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_greater", "args": [actual, expected_greater_than, check_message]})

    def assert_greater_or_equal(self, actual, expected_greater_or_equal, check_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_greater_or_equal", "args": [actual, expected_greater_or_equal, check_message]})

    def assert_less(self, actual, expected_less_than, check_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_less", "args": [actual, expected_less_than, check_message]})

    def assert_less_than_or_equal(self, actual, expected_less_or_equal, check_message):
        """Place Holder"""
        self.result_calls.append({"method": "assert_less_than_or_equal", "args": [actual, expected_less_or_equal, check_message]})
