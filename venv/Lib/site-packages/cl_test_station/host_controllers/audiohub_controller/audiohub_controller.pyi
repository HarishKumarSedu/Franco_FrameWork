from builtins import NoneType
from builtins import bool
from builtins import classmethod
from builtins import dict
from builtins import int
from builtins import list
from builtins import staticmethod
from builtins import str
from cl_test_station.host_controllers.audiohub_controller.interrupt_pin import InterruptPin
from cl_test_station.host_controllers.audiohub_controller.linux_pin import LinuxPin
from cl_test_station.host_controllers.audiohub_controller.master_control import SpmiMasterCtrl
from cl_test_station.host_controllers.audiohub_controller.regmap_pin import RegmapPin
from cl_test_station.host_controllers.mixins import ExtendedConfigMixin
from cl_test_station.host_controllers.mixins import I3cControllerMixin
from cl_test_station.host_controllers.thrift_controller.thrift_controller import ThriftController
from cl_test_station.interfaces.ctrl_interface import ByteOrder
from cl_test_station.interfaces.ctrl_interface import EnumMeta
from cl_test_station.test_station_object import TestStationObject
from cl_test_station.utilities.ts_logging import TsLoggingAdapter
from cl_test_station.utilities.tso_container import TsoContainer
from component_ah3_arm.ah3_arm import Ah3Arm as arm
from component_ah3_fpga.ah3_fpga import Ah3Fpga as fpga
from component_sdv_spmi_manager.sdv_spmi_manager import SdvSpmiManager as spmi_manager
from embedded_thrift_server.tclient import TClient
from embedded_thrift_server.utilities.update_ah_thrift import SSH
from queue import Queue
from str import builtins
from typing import _GenericAlias
from typing import _SpecialForm
import cl_test_station
from typing import *
class AudioHubController(ThriftController, I3cControllerMixin, ExtendedConfigMixin):
    FORCE_UPDATE:bool
    I2C_SPEEDS:dict
    SPI_ROOT_CLK:int
    arm:arm
    def attempt_spmi_func(self, func, args):pass
    auto_update:bool
    check_iface_arguments:staticmethod
    class_fields:list
    class_type:str
    def clear_interrupt_handler(self):pass
    def clear_queue(self):pass
    client:TClient
    config:dict
    config_file:NoneType
    config_files:NoneType
    def connect(self, modules: List[str] = None, check_variant: bool = True):pass
    def copy_image_register_map(self):pass
    create_path:staticmethod
    def create_pins(self):pass
    def inner(self, *args, **kwargs):pass
    default_variant:NoneType
    def inner(self, *args, **kwargs):pass
    def disable_i3c(self, bus_num: int):pass
    dump_class_fields:classmethod
    dump_class_fields_csv:classmethod
    def empty_server_queue(self, timeout=0):pass
    def inner(self, *args, **kwargs):pass
    def enable_i3c(self, bus_num: int) -> bool:pass
    def enable_spmi(self):pass
    env_to_dict:staticmethod
    excluded_classes:NoneType
    extended_config:dict
    fpga:fpga
    fpga_block_config_name:str
    fpga_block_config_path:NoneType
    fpga_class_type:str
    fpga_register_map_name:str
    get_class_fields:classmethod
    get_class_fields_table:classmethod
    def inner(self, *args, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    has_dynamic_attrs:bool
    def inner(self, *args, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    def hcc_execute_packet_queue(self, **kwargs):pass
    def hcc_hint_queue_get(self, timeout=0):pass
    def hcc_queue_packets(self, packets, cs_delays, **kwargs):pass
    def hcc_send_packet(self, packet, cs_delay, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    def inner(self, *args, **kwargs):pass
    hostname:str
    i3c_auto_add_devices:bool
    def i3c_controller_add_device(self, bus_num: int, static_addr: int = None, dyn_addr: int = None, **kwargs):pass
    def i3c_controller_add_i2c_device(self, bus_num: int, address: int, replace: bool = True):pass
    def i3c_controller_disec(self, bus_num: int, events: Union[int, I3cEvents] = 0, address: int = I3C_BROADCAST, **kwargs):pass
    def i3c_controller_dodaa(self, bus_num: int, reset_addr_assignments: bool = True, **kwargs) -> Dict[int, int]:pass
    def i3c_controller_dump_devices(self, bus_num: int, log_level='INFO'):pass
    def i3c_controller_enec(self, bus_num: int, events: int = 0, address: Union[int, I3cEvents] = I3C_BROADCAST, **kwargs):pass
    def i3c_controller_get_devices(self, bus_num: int) -> List[str]:pass
    def i3c_controller_getbcr(self, bus_num: int, address: int, **kwargs) -> int:pass
    def i3c_controller_getdcr(self, bus_num: int, address: int, **kwargs) -> int:pass
    def i3c_controller_getpid(self, bus_num: int, address: int, **kwargs) -> int:pass
    def i3c_controller_getstatus(self, bus_num: int, address: int, **kwargs) -> int:pass
    def i3c_controller_remove_device(self, bus_num: int, address: int):pass
    def i3c_controller_reset_driver(self, bus_num: int):pass
    def i3c_controller_rstdaa(self, bus_num: int, address: int = 0x7E, detach_devs: bool = False, **kwargs):pass
    def i3c_controller_setaasa(self, bus_num: int, **kwargs):pass
    def i3c_controller_setdasa(self, bus_num: int, static_addr: int, dyn_addr: int, **kwargs):pass
    def i3c_controller_setnewda(self, bus_num: int, old_addr: int, new_addr: int, **kwargs):pass
    def i3c_legacy_i2c_read_device(self, bus_num: int, address: int, num_bytes: int,
                               preamble_bytes: List[int] = None, **kwargs) -> List[int]:pass
    def i3c_legacy_i2c_read_reg(self, bus_num: int, address: int, reg_addr: int, num_bytes: int = 4,
                            preamble_bytes: List[int] = None, read_reg_addr_size: int = 4,
                            addr_byte_order: ByteOrder = ByteOrder.MSB_FIRST, **kwargs) -> List[int]:pass
    def i3c_legacy_i2c_write_device(self, bus_num: int, address: int, write_data: List[int], preamble_bytes: List[int] = None, **kwargs):pass
    def i3c_legacy_i2c_write_reg(self, bus_num: int, address: int, reg_addr: int, write_data: List[int],
                  preamble_bytes: List[int] = None, write_reg_addr_size: int = 4,
                  addr_byte_order: ByteOrder = ByteOrder.MSB_FIRST, **kwargs):pass
    def i3c_read_device(self, bus_num: int, address: int, num_bytes: int,
                    preamble_bytes: List[int] = None, **kwargs) -> List[int]:pass
    def i3c_read_reg(self, bus_num: int, address: int, reg_addr: int, num_bytes: int = 4,
                 preamble_bytes: List[int] = None, read_reg_addr_size: int = 4,
                 addr_byte_order: ByteOrder = ByteOrder.MSB_FIRST, **kwargs) -> List[int]:pass
    def i3c_write_device(self, bus_num: int, address: int, write_data: List[int], preamble_bytes: List[int] = None, **kwargs):pass
    def i3c_write_reg(self, bus_num: int, address: int, reg_addr: int, write_data: List[int],
                  preamble_bytes: List[int] = None, write_reg_addr_size: int = 4,
                  addr_byte_order: ByteOrder = ByteOrder.MSB_FIRST, **kwargs):pass
    import_error_log:str
    def inject_input_files(self):pass
    interrupt_queue:Queue
    def interrupt_queue_empty(self):pass
    load_yaml:staticmethod
    log:TsLoggingAdapter
    num_i2c_retries:<class 'int'>
    path:str
    class pins(TsoContainer):
        def add_resource(self, resource: Any, ref_name: str = None, force: bool = False):pass
        class_fields:list
        class_type:str
        config:dict
        config_file:NoneType
        config_files:NoneType
        create_path:staticmethod
        dev_asp1_bclk:RegmapPin
        dev_asp1_data1:RegmapPin
        dev_asp1_data2:RegmapPin
        dev_asp1_fclk:RegmapPin
        dev_asp2_bclk:RegmapPin
        dev_asp2_data1:RegmapPin
        dev_asp2_data2:RegmapPin
        dev_asp2_fclk:RegmapPin
        dev_asp3_bclk:RegmapPin
        dev_asp3_data1:RegmapPin
        dev_asp3_data2:RegmapPin
        dev_asp3_fclk:RegmapPin
        dev_dut_reset_n:LinuxPin
        dev_gpio0:LinuxPin
        dev_gpio1:LinuxPin
        dev_gpio2:LinuxPin
        dev_gpio3:LinuxPin
        dev_int0_n:InterruptPin
        dev_int1_n:InterruptPin
        dev_int2_n:InterruptPin
        dev_int3_n:InterruptPin
        dev_mclk1:RegmapPin
        dev_mclk2:RegmapPin
        dev_pdm1_clk:RegmapPin
        dev_pdm1_data:RegmapPin
        dev_pdm2_clk:RegmapPin
        dev_pdm2_data:RegmapPin
        dev_pdm3_clk:RegmapPin
        dev_pdm3_data:RegmapPin
        dev_pdm4_clk:RegmapPin
        dev_pdm4_data:RegmapPin
        dev_pdm5_clk:RegmapPin
        dev_pdm5_data:RegmapPin
        dev_pdm6_clk:RegmapPin
        dev_pdm6_data:RegmapPin
        dev_pdm7_clk:RegmapPin
        dev_pdm7_data:RegmapPin
        dev_sys_reset_n:LinuxPin
        dump_class_fields:classmethod
        dump_class_fields_csv:classmethod
        def dump_resources(self):pass
        excluded_classes:NoneType
        def gen_pyi(self, *args, indent: int = 0, **kwargs) -> Tuple[str, Set[Tuple[str, str]]]:pass
        generate_stubs:bool
        get_class_fields:classmethod
        get_class_fields_table:classmethod
        has_dynamic_attrs:bool
        import_error_log:str
        def inner(self, *args, **kwargs):pass
        def items(self):pass
        def keys(self):pass
        load_yaml:staticmethod
        log:TsLoggingAdapter
        path:str
        pll_clk_in:RegmapPin
        def pop(self, key: str):pass
        def inner(self, *args, **kwargs):pass
        protect_resources:bool
        ref_name:str
        remove_fields:classmethod
        remove_tags:classmethod
        resource_type:NoneType
        resources:dict
        sai_bclk:RegmapPin
        sai_fclk:RegmapPin
        sai_mclk:RegmapPin
        sao_bclk:RegmapPin
        sao_fclk:RegmapPin
        sao_sdo1:RegmapPin
        usb_audio_sdin1:RegmapPin
        valid_config_files:dict
        valid_configs:list
        def values(self):pass
        # Resources (may be duplicates)
    pins:pins
    def poll_for_int(self, int_id=-1):pass
    def pop_interrupt_queue(self, timeout=0):pass
    def print_from_buffer(self):pass
    def program_xmos_image(self, image: Union[XmosConfigs, str]) -> str:pass
    py_version:str
    ref_name:str
    remove_fields:classmethod
    remove_tags:classmethod
    def inner(self, *args, **kwargs):pass
    def reset_fpga(self):pass
    def reset_spmi_master(self):pass
    def inner(self, *args, **kwargs):pass
    resources:dict
    def set_rail_voltage(self, voltage:float):pass
    def inner(self, *args, **kwargs):pass
    socket:int
    def spmi_24bit_read(self, slave_id, address, word_count, priority=0, pointer=0, **kwargs):pass
    def spmi_24bit_write(self, slave_id, address, write_data, priority=0, pointer=0, **kwargs):pass
    spmi_base_addr:int
    def spmi_block_read(self, peripheral_id, start_addr, byte_count, addressibility, priority=0, **kwargs):pass
    def spmi_block_write(self, peripheral_id, start_addr, write_data, addressibility, priority=0, **kwargs):pass
    def spmi_chain_read(self, peripheral_id, address, num_reads, read_size, addressibility, priority=0, **kwargs):pass
    def spmi_chain_write(self, peripheral_id, address, write_data, write_size, addressibility, priority=0, **kwargs):pass
    def spmi_device_disable(self):pass
    def spmi_device_initialize(self, device_type, device_id, f_tclk, ddba_addr, inten, enr):pass
    def spmi_dump_registers(self):pass
    def spmi_extended_register_read(self, peripheral_id, address, length, priority=0, **kwargs):pass
    def spmi_extended_register_read_long(self, peripheral_id, address, length, priority=0, **kwargs):pass
    def spmi_extended_register_write(self, peripheral_id, address, write_data, priority=0, **kwargs):pass
    def spmi_extended_register_write_long(self, peripheral_id, address, write_data, priority=0, **kwargs):pass
    spmi_manager:spmi_manager
    spmi_master:SpmiMasterCtrl
    def spmi_master_read(self, master_id, address, length=1, use_a_bit=False, use_sr_bit=False, **kwargs):pass
    def spmi_master_write(self, master_id, address, write_data, use_a_bit=False, use_sr_bit=False, **kwargs):pass
    def spmi_poll_command_sent_flag(self, clear_all_flags=True):pass
    def spmi_register_read(self, peripheral_id, address, priority=0, **kwargs):pass
    def spmi_register_write(self, peripheral_id, address, write_data, priority=0, **kwargs):pass
    def spmi_set_ip_version(self, version):pass
    def spmi_set_master_addr(self, addr):pass
    def spmi_set_master_req_prescaler(self, rate):pass
    def spmi_set_slave_addr(self, addr):pass
    ssh:SSH
    def start_embedded_interrupt_handling(self, int_map, verbose=False, functions=''):pass
    def stop_embedded_interrupt_handling(self):pass
    thrift_file:str
    thrift_service:str
    def toggle_pin(self, pin, mode, invert=False):pass
    valid_config_files:dict
    valid_configs:list
    class variants(TsoContainer):
        def add_resource(self, resource: Any, ref_name: str = None, force: bool = False):pass
        audiohub3_apps:str
        audiohub3_apps_armspmi:str
        audiohub3_apps_bigsab:str
        audiohub3_apps_dualsab:str
        audiohub3_apps_i3c:str
        audiohub3_apps_spmi:str
        class_fields:list
        class_type:str
        config:dict
        config_file:NoneType
        config_files:NoneType
        create_path:staticmethod
        dump_class_fields:classmethod
        dump_class_fields_csv:classmethod
        def dump_resources(self):pass
        excluded_classes:NoneType
        def gen_pyi(self, *args, indent: int = 0, **kwargs) -> Tuple[str, Set[Tuple[str, str]]]:pass
        generate_stubs:bool
        get_class_fields:classmethod
        get_class_fields_table:classmethod
        has_dynamic_attrs:bool
        import_error_log:str
        def inner(self, *args, **kwargs):pass
        def items(self):pass
        def keys(self):pass
        load_yaml:staticmethod
        log:TsLoggingAdapter
        path:str
        def pop(self, key: str):pass
        def inner(self, *args, **kwargs):pass
        protect_resources:bool
        ref_name:str
        remove_fields:classmethod
        remove_tags:classmethod
        resource_type:str
        resources:dict
        valid_config_files:dict
        valid_configs:list
        def values(self):pass
        # Resources (may be duplicates)
        audiohub3_apps_dualsab:str
        audiohub3_apps_bigsab:str
        audiohub3_apps:str
        audiohub3_apps_spmi:str
        audiohub3_apps_armspmi:str
        audiohub3_apps_i3c:str
    variants:variants
