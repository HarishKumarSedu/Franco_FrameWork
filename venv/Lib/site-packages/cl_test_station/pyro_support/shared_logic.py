import traceback
from enum import Enum, auto
from importlib import import_module
from typing import Any, Dict, List, Union

from cl_test_station.utilities.ts_logging import TsLoggingAdapter


SPECIAL_RESULT_KEY = "__pyro_clts_custom_type"
FAILED_IMPORTS = set()


class CustomResultTypes(Enum):
    ENUM = auto()
    RECEIVER = auto()


def is_pyro_clts_custom_type(result) -> bool:
    return type(result) is dict and SPECIAL_RESULT_KEY in result

def get_pyro_clts_custom_type(result) -> CustomResultTypes:
    return CustomResultTypes[result[SPECIAL_RESULT_KEY]]


def serialize_enum(enum_ref: Enum) -> Dict[str, Any]:
    """
    Creates a dictionary that represents an enum to be transmitted across the pyro server

    :param enum_ref: Enum member
    :type enum_ref: Enum
    :return: Dictionary of form:
        {module: "...", enum_name: "...", member: "...", value: Any}
    :rtype: dict
    """
    return {
        SPECIAL_RESULT_KEY: CustomResultTypes.ENUM.name,
        'module': enum_ref.__class__.__module__,
        'enum_name': enum_ref.__class__.__name__,
        'member': enum_ref.name,
        'value': enum_ref.value
    }

def deserialize_enum(enum_dict: dict, logger: TsLoggingAdapter = None) -> Union[Enum, Any]:
    # If enum has already been imported, get it from global dict TODO: Maybe change globals to a custom {}?
    enum_name = enum_dict['enum_name']
    if enum_name in globals():
        enum_ref = globals()[enum_name]
    # This enum has previously failed to import, no need to try again
    elif enum_name in FAILED_IMPORTS:
        return enum_dict['value']
    # Need to import the enum
    else:
        try:  # Attempt to get the Enum from a dynamically imported module
            module = import_module(enum_dict['module'])
            enum_ref = getattr(module, enum_name)
            # print(f"Adding {enum_ref} to globals under key '{enum_name}'")
            globals()[enum_name] = enum_ref
        except (ImportError, AttributeError):  # Something went wrong, just
            if logger:
                logger.debug(f"Could not import Enum {enum_ref}, enum_dict will not be cast.\n{traceback.format_exc()}")
            FAILED_IMPORTS.add(enum_name)
            return enum_dict['value']
    return enum_ref[enum_dict['member']]


def serialize_trasnmitter(transmitter, call_hash: str) -> Dict[str, Any]:
    return {
        SPECIAL_RESULT_KEY: CustomResultTypes.RECEIVER.name,
        'my_name': transmitter.my_name,
        'register_list': transmitter.__register_list__,
        'attribute_set': list(transmitter._PyroTransmitter__attribute_set),
        'internal_preamble': transmitter.internal_preamble,
        'call_hash': call_hash
    }
