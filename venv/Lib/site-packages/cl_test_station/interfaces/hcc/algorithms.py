"""
This file contains functions for the HCC checksum algorithms defined in the HCC spec v2.1.3
author: Evan Canter <evan.canter@cirrus.com>
"""
from typing import List
from math import ceil

import cl_test_station.interfaces.hcc.config as hcc_cfg


def hcc_hdr_checksum(hcc_hdr: List[int]) -> int:
    """
    Performs algorithm 3.2.4.5 from HCC spec 2.1.3. Used by Host and Device to calculate checksum of HDR phase

    :param hcc_hdr: List of Bytes from the HDR
    :type hcc_hdr: list
    :return: Integer containing the checksum result
    :rtype: int
    """
    valid_size = hcc_cfg.HCC_HDR_SIZE  # This will always be 8 as long as the Host sends a full HDR
    hdr_mask = 2 ** (hcc_cfg.HCC_HDR_CHK_SIZE << 3) - 1
    sumation = 0
    for i in range(int(valid_size/2)):  # -1 omitted by python's exclusive range
        sumation += (hcc_hdr[2*i+1] << 8) + hcc_hdr[2*i]
    return (~sumation) & hdr_mask


def hcc_rsp_checksum(hcc_rsp: List[int]) -> int:
    """
    Performs algorithm 3.2.4.6 from HCC spec 2.1.3. Used by Device to calculate checksum of HCC_RSP (HCC Status)

    :param hcc_rsp: List of Bytes from Host (RSP)
    :type hcc_rsp: list
    :return: Integer containing the checksum result
    :rtype: int
    """
    rsp_mask = 2 ** (hcc_cfg.HCC_RSP_CHK_SIZE << 3) - 1
    sumation = (hcc_rsp[1] << 8) + hcc_rsp[0] + (hcc_rsp[3] << 8) + hcc_rsp[2]
    return (~sumation) & rsp_mask


def hcc_pld_checksum(hcc_count: int, hcc_pld: List[int]) -> int:
    """
    Performs algorithms 3.2.4.7-8 from HCC spec 2.1.3. Used by Host and Device to calculate checksum of HCC_R/WPLD

    :param hcc_count: Value of HCC Count
    :type hcc_count: int
    :param hcc_pld: List of Bytes containing write payload data
    :type hcc_pld: list
    :return: Integer containing the checksum result
    :rtype: int
    """
    if hcc_count != len(hcc_pld):
        raise ValueError(f"hcc_count {hcc_count} does not match payload length {len(hcc_pld)}, cannot perform checksum")
    pld_mask = 2 ** (hcc_cfg.HCC_PLD_CHK_SIZE << 3) - 1
    sumation = 0
    for i in range(ceil(hcc_count/4)):  # -1 omitted by python's exclusive range
        sumation += (hcc_pld[4*i+3] << 24) + (hcc_pld[4*i+2] << 16) + (hcc_pld[4*i+1] << 8) + hcc_pld[4*i]
    return (~sumation) & pld_mask
