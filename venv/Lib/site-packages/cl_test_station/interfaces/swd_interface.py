from typing import List
from cl_test_station.interfaces.ctrl_interface import CtrlInterface, ByteOrder
from cl_test_station.interfaces.ctrl_interface import build_word, build_words_from_bytes, map_words_to_bytes


class SwdInterface(CtrlInterface):

    def __swd_write(self, host_controller, address: int, write_data: List[int]):
        bytes_out = map_words_to_bytes(write_data, self.write_reg_data_size, self.data_byte_order)
        self.check_args(host_controller.swd_write, extra=['address', 'bytes_out'])
        host_controller.swd_write(address=address, bytes_out=bytes_out, **self.fields)

    def __swd_read(self, host_controller, address, word_count):
        byte_count = word_count * self.read_reg_data_size
        self.check_args(host_controller.swd_read, extra=['address', 'byte_count'])
        return host_controller.swd_read(address=address, byte_count=byte_count, **self.fields)

    def read_register(self, host_controller, reg_addr: int, **kwargs) -> int:
        """Place Holder"""
        bytes_in = self.__swd_read(host_controller, address=reg_addr, word_count=1)
        return build_word(bytes_in, self.read_reg_data_size, self.data_byte_order)

    def write_register(self, host_controller, reg_addr: int, write_data: int, **kwargs):
        """Place Holder"""
        self.__swd_write(host_controller, address=reg_addr, write_data=[write_data])

    def block_read(self, host_controller, start_addr, word_count, **kwargs):
        """Place Holder"""
        bytes_in = self.__swd_read(host_controller, address=start_addr, word_count=word_count)
        return build_words_from_bytes(bytes_in, self.read_reg_data_size, self.data_byte_order)

    def block_write(self, host_controller, start_addr: int, write_data: List[int], **kwargs):
        """Place Holder"""
        self.__swd_write(host_controller, address=start_addr, write_data=write_data)

    def chain_read(self, host_controller, reg_addr, word_count, **kwargs):
        """
        Reads words from single address 'reg_addr', without incrementing. Returns list of words read.

        :param host_controller: [HostController, PyroReceiver] Reference to controller to use
        :type host_controller: HostController
        :param reg_addr: Register/Buffer address to read from
        :type reg_addr: int
        :param word_count: Number of words to read
        :type word_count: int
        :return: List of words
        :rtype: list
        """
        words_in = []
        for i in range(word_count):
            words_in.append(self.read_register(host_controller, reg_addr))
        return words_in

    def chain_write(self, host_controller, reg_addr, write_data, **kwargs):
        """
        Writes words sequentially to single address, without incrementing.

        :param host_controller: [HostController, PyroReceiver] Reference to controller to use
        :type host_controller: HostController
        :param reg_addr: Register/Buffer address to read from
        :type reg_addr: int
        :param write_data: List of words to write
        :type write_data: list
        :return: None
        """
        for word in write_data:
            self.write_register(host_controller, reg_addr, word)
