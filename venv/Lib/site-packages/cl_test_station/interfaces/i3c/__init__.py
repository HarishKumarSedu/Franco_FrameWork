from typing import Dict

from cl_test_station.interfaces.i3c.exceptions import I3cError, I3cNackError, I3cParityError
from Pyro5.api import config, register_dict_to_class

# I3C Broadcast address that the user can import
I3C_BROADCAST = 0x7E

_exc_dict = {
    'cl_test_station.interfaces.i3c.exceptions.I3cError': I3cError,
    'cl_test_station.interfaces.i3c.exceptions.I3cParityError':  I3cParityError,
    'cl_test_station.interfaces.i3c.exceptions.I3cNackError': I3cNackError
}

def _deserialize_i3c_error(classname: str, obj_dict: Dict):  # pragma: no cover
    """
    Custom deserializer for all I3C interface exceptions.

    Converts serpent dictionary into the exception. This function does check and only deserialized if Pyro is using
     serpent as the serializer.
    :param classname: Full path class name
    :type classname: str
    :param obj_dict: Serpent object dictionary
    :type obj_dict: dict
    :return: Deserialized NI-Digital DriverError exception
    :rtype: DriverError
    """
    if config.SERIALIZER == 'serpent':
        exc = _exc_dict[classname](*obj_dict['args'])
        exc._pyroTraceback = obj_dict['attributes']['_pyroTraceback']
        return exc
    else:
        print('Unable to deserialize as not using serpent serializer for Pyro')

for exc in [I3cError, I3cNackError, I3cParityError]:
    register_dict_to_class(f"{exc.__module__}.{exc.__name__}", _deserialize_i3c_error)
