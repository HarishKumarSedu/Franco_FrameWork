from dataclasses import dataclass, field
from typing import List, Union


class I3C_CCC_DEF:
    I3C_CCC_DIRECT = 1 << 7

    @classmethod
    def I3C_CCC_ID(cls, id: int, broadcast: bool):
        num = 0 if broadcast else cls.I3C_CCC_DIRECT
        return id | num

    # Commands valid in both broadcast and unicast modes
    @classmethod
    def I3C_CCC_ENEC(cls, broadcast):
        return cls.I3C_CCC_ID(0x0, broadcast)

    @classmethod
    def I3C_CCC_DISEC(cls, broadcast):
        return cls.I3C_CCC_ID(0x1, broadcast)

    @classmethod
    def I3C_CCC_ENTAS(cls, as_val, broadcast):
        return cls.I3C_CCC_ID(0x2 + as_val, broadcast)

    @classmethod
    def I3C_CCC_RSTDAA(cls, broadcast):
        return cls.I3C_CCC_ID(0x6, broadcast)

    @classmethod
    def I3C_CCC_SETMWL(cls, broadcast):
        return cls.I3C_CCC_ID(0x9, broadcast)

    @classmethod
    def I3C_CCC_SETMRL(cls, broadcast):
        return cls.I3C_CCC_ID(0xa, broadcast)

    @classmethod
    def I3C_CCC_SETXTIME(cls, broadcast):
        return 0x28 if broadcast else 0x98

    @classmethod
    def I3C_CCC_VENDOR(cls, id, broadcast):
        num = 0x61 if broadcast else 0xe0
        return id + num

    # Broadcast-only commands
    @classmethod
    def I3C_CCC_ENTDAA(cls):
        return cls.I3C_CCC_ID(0x7, True)

    @classmethod
    def I3C_CCC_DEFSLVS(cls):
        return cls.I3C_CCC_ID(0x8, True)

    @classmethod
    def I3C_CCC_ENTTM(cls):
        return cls.I3C_CCC_ID(0xb, True)

    @classmethod
    def I3C_CCC_ENTHDR(cls, x):
        return cls.I3C_CCC_ID(0x20 + x, True)

    @classmethod
    def I3C_CCC_SETAASA(cls):
        return cls.I3C_CCC_ID(0x29, True)

    # Unicast-only commands
    @classmethod
    def I3C_CCC_SETDASA(cls):
        return cls.I3C_CCC_ID(0x7, False)
    @classmethod
    def I3C_CCC_SETNEWDA(cls):
        return cls.I3C_CCC_ID(0x8, False)
    @classmethod
    def I3C_CCC_GETMWL(cls):
        return cls.I3C_CCC_ID(0xb, False)
    @classmethod
    def I3C_CCC_GETMRL(cls):
        return cls.I3C_CCC_ID(0xc, False)
    @classmethod
    def I3C_CCC_GETPID(cls):
        return cls.I3C_CCC_ID(0xd, False)
    @classmethod
    def I3C_CCC_GETBCR(cls):
        return cls.I3C_CCC_ID(0xe, False)
    @classmethod
    def I3C_CCC_GETDCR(cls):
        return cls.I3C_CCC_ID(0xf, False)
    @classmethod
    def I3C_CCC_GETSTATUS(cls):
        return cls.I3C_CCC_ID(0x10, False)
    @classmethod
    def I3C_CCC_GETACCMST(cls):
        return cls.I3C_CCC_ID(0x11, False)
    @classmethod
    def I3C_CCC_SETBRGTGT(cls):
        return cls.I3C_CCC_ID(0x13, False)
    @classmethod
    def I3C_CCC_GETMXDS(cls):
        return cls.I3C_CCC_ID(0x14, False)
    @classmethod
    def I3C_CCC_GETHDRCAP(cls):
        return cls.I3C_CCC_ID(0x15, False)
    @classmethod
    def I3C_CCC_GETXTIME(cls):
        return cls.I3C_CCC_ID(0x19, False)

    I3C_CCC_EVENT_SIR = 1 << 0
    I3C_CCC_EVENT_MR = 1 << 1
    I3C_CCC_EVENT_HJ = 1 << 3


@dataclass
class i3c_ccc_cmd_dest:
    """CCC command destination
    @addr: can be an I3C device address or the broadcast address if this is a broadcast CCC
    @payload: payload to be sent to this device or broadcasted
    """
    addr: int  # u8
    payload: bytearray = None
    payload_len: int = 0


@dataclass
class i3c_ccc_cmd:
    """
    struct i3c_ccc_cmd - CCC command

    @rnw: true if the CCC should retrieve data from the device. Only valid for unicast commands
    @id: CCC command id
    @ndests: number of destinations. Should always be one for broadcast commands
    @dests: array of destinations and associated payload for this CCC. Most of the time, only one destination is provided
    @err: I3C error code
    """
    rnw: int  # u8
    id: int  # u8
    dests: List[i3c_ccc_cmd_dest] = field(default_factory=list)
    err: Union[str, None] = None  # enum i3c_error_code

