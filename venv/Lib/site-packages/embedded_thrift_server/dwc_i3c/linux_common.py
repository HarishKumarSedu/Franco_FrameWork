from math import pow, ceil
import struct


class LinuxCommon:

    @classmethod
    def BIT(cls, nr: int):
        return 1 << nr

    @classmethod
    def GENMASK(cls, h: int, l: int):
        width = h - l + 1
        return (int(pow(2, width)) - 1) << l

    @classmethod
    def DIV_ROUND_UP(cls, x: int, y: int) -> int:
        return ceil(x / y)

    _IOC_NRBITS = 8
    _IOC_TYPEBITS = 8
    _IOC_SIZEBITS = 14
    _IOC_DIRBITS = 2

    _IOC_NRSHIFT = 0
    _IOC_TYPESHIFT = (_IOC_NRSHIFT + _IOC_NRBITS)
    _IOC_SIZESHIFT = (_IOC_TYPESHIFT + _IOC_TYPEBITS)
    _IOC_DIRSHIFT = (_IOC_SIZESHIFT + _IOC_SIZEBITS)

    _IOC_NONE = 0
    _IOC_WRITE = 1
    _IOC_READ = 2

    @classmethod
    def _IOC(cls, dir, type, nr, size):
        if isinstance(size, str) or isinstance(size, bytes):
            size = struct.calcsize(size)
        return (dir << cls._IOC_DIRSHIFT |
                type << cls._IOC_TYPESHIFT |
                nr << cls._IOC_NRSHIFT |
                size << cls._IOC_SIZESHIFT) & 0xFFFFFFFF

    @classmethod
    def _IO(cls, type, nr): return cls._IOC(cls._IOC_NONE, type, nr, 0)

    @classmethod
    def _IOR(cls, type, nr, size): return cls._IOC(cls._IOC_READ, type, nr, size)

    @classmethod
    def _IOW(cls, type, nr, size): return cls._IOC(cls._IOC_WRITE, type, nr, size)

    @classmethod
    def _IOWR(cls, type, nr, size): return cls._IOC(cls._IOC_READ | cls._IOC_WRITE, type, nr, size)
