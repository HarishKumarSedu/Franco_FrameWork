# coding:utf-8
from thriftpy2.thrift import TException
from typing import List, Dict


# noinspection PyPep8Naming, PyShadowingNames
class I2c_error(TException):
    error_output: str
    command: str

    def __init__(self, error_output: str = None, command: str = None) -> None:
        ...


_Thrift2Pyi_I2c_error = I2c_error


# noinspection PyPep8Naming, PyShadowingNames
class Spmi_timeout(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_Spmi_timeout = Spmi_timeout


# noinspection PyPep8Naming, PyShadowingNames
class Spmi_arb_failure(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_Spmi_arb_failure = Spmi_arb_failure


# noinspection PyPep8Naming, PyShadowingNames
class GpioAccessError(TException):
    message: str

    def __init__(self, message: str = None) -> None:
        ...


_Thrift2Pyi_GpioAccessError = GpioAccessError


# noinspection PyPep8Naming, PyShadowingNames
class HccDriverError(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_HccDriverError = HccDriverError


# noinspection PyPep8Naming, PyShadowingNames
class JSONSerializeError(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_JSONSerializeError = JSONSerializeError


# noinspection PyPep8Naming, PyShadowingNames
class ServerError(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_ServerError = ServerError


# noinspection PyPep8Naming, PyShadowingNames
class VariantError(TException):
    error_output: str

    def __init__(self, error_output: str = None) -> None:
        ...


_Thrift2Pyi_VariantError = VariantError


# noinspection PyPep8Naming, PyShadowingNames
class I3cError(TException):
    error_code: str
    msg: str

    def __init__(self, error_code: str = None, msg: str = None) -> None:
        ...


_Thrift2Pyi_I3cError = I3cError


# noinspection PyPep8Naming, PyShadowingNames
class I3cDriverError(TException):
    error_msg: str

    def __init__(self, error_msg: str = None) -> None:
        ...


_Thrift2Pyi_I3cDriverError = I3cDriverError


# noinspection PyPep8Naming, PyShadowingNames
class TClient(object):

    def ping(self, ) -> str:
        ...

    def server_eval(self, expression: str = None) -> str:
        ...

    def reload_modules(self, modules: List[str] = None) -> None:
        ...

    def embed_test_station(self,
                           serialized_station: str = None,
                           env_vars: str = None) -> str:
        ...

    def ping_test_station(self, ) -> str:
        ...

    def burst(self,
              lines: List[str] = None,
              vars: str = None,
              aliases: str = None) -> str:
        ...

    def get_traceback(self, ) -> str:
        ...

    def program_xmos_image(self, image: str = None) -> str:
        ...

    def get_variants(self, ) -> List[str]:
        ...

    def get_current_variant(self, ) -> str:
        ...

    def set_variant(self, variant: str = None, reboot: bool = None) -> None:
        ...

    def gpioinfo(self, ) -> str:
        ...

    def get_active_gpio_info(self, ) -> str:
        ...

    def get_active_gpios_list(self, ) -> List[str]:
        ...

    def get_gpio(self, chip_num: int = None, line_num: int = None) -> int:
        ...

    def set_gpio(self,
                 chip_num: int = None,
                 line_num: int = None,
                 value: int = None) -> None:
        ...

    def get_gpio_by_name(self, name: str = None) -> int:
        ...

    def set_gpio_by_name(self, name: str = None, value: int = None) -> None:
        ...

    def get_gpio_direction(self,
                           chip_num: int = None,
                           line_num: int = None) -> int:
        ...

    def set_gpio_direction(self,
                           chip_num: int = None,
                           line_num: int = None,
                           direction: int = None) -> None:
        ...

    def get_gpio_direction_by_name(self, name: str = None) -> int:
        ...

    def set_gpio_direction_by_name(self,
                                   name: str = None,
                                   direction: int = None) -> None:
        ...

    def toggle_gpio(self,
                    chip_num: int = None,
                    line_num: int = None,
                    active_low: bool = None,
                    delay: float = None,
                    pulse_width: float = None) -> None:
        ...

    def toggle_gpio_by_name(self,
                            name: str = None,
                            active_low: bool = None,
                            delay: float = None,
                            pulse_width: float = None) -> None:
        ...

    def reset_dut(self, mode: int = None, active_low: bool = None) -> None:
        ...

    def reset_wrapper(self, mode: int = None, active_low: bool = None) -> None:
        ...

    def set_rail_voltage(self, voltage: float = None) -> None:
        ...

    def write_i2c_reg(self,
                      reg_addr: int = None,
                      write_data: List[int] = None,
                      dev_addr: int = None,
                      bus_num: int = None,
                      speed: int = None,
                      repeat_start: bool = None,
                      write_reg_addr_size: int = None,
                      ainc: bool = None,
                      address_stride: int = None,
                      write_reg_data_size: int = None) -> int:
        ...

    def read_i2c_reg(self,
                     reg_addr: int = None,
                     byte_count: int = None,
                     dev_addr: int = None,
                     bus_num: int = None,
                     speed: int = None,
                     repeat_start: bool = None,
                     read_reg_addr_size: int = None,
                     ainc: bool = None,
                     address_stride: int = None,
                     read_reg_data_size: int = None) -> List[int]:
        ...

    def i2c_device_write(self,
                         bus_num: int = None,
                         speed: int = None,
                         dev_addr: int = None,
                         write_data: List[int] = None) -> int:
        ...

    def i2c_device_read(self,
                        bus_num: int = None,
                        speed: int = None,
                        dev_addr: int = None,
                        byte_count: int = None) -> List[int]:
        ...

    def i2c_check_ack(self,
                      bus_num: int = None,
                      speed: int = None,
                      dev_addr: int = None) -> bool:
        ...

    def i2c_scan(self, bus_num: int = None) -> str:
        ...

    def set_i2c_bus_speed(self,
                          bus_num: int = None,
                          speed: int = None) -> None:
        ...

    def spi_fd(self,
               bytes_out: List[int] = None,
               bus_num: int = None,
               chip_select: int = None,
               speed: int = None,
               keep_cs: bool = None,
               clk_mode: int = None) -> List[int]:
        ...

    def spi_apb_block_read(self,
                           bus_num: int = None,
                           chip_select: int = None,
                           speed: int = None,
                           address: int = None,
                           addr_size: int = None,
                           data_size: int = None,
                           length: int = None) -> List[int]:
        ...

    def spi_apb_block_write(self,
                            bus_num: int = None,
                            chip_select: int = None,
                            speed: int = None,
                            address: int = None,
                            values: List[int] = None,
                            addr_size: int = None,
                            data_size: int = None) -> None:
        ...

    def mmap_add(self,
                 base_addr: int = None,
                 size: int = None,
                 word_size: int = None) -> None:
        ...

    def mmap_read(self,
                  base_addr: int = None,
                  offset: int = None,
                  num_bytes: int = None) -> List[int]:
        ...

    def mmap_write(self,
                   base_addr: int = None,
                   offset: int = None,
                   bytes_out: List[int] = None) -> None:
        ...

    def memio_write(self, addr: int = None, data: int = None) -> int:
        ...

    def memio_read(self, addr: int = None) -> int:
        ...

    def handle_interrupt(self, int_id: int = None) -> str:
        ...

    def start_embedded_interrupt_handling(self,
                                          int_map: Dict[int, str] = None,
                                          verbose: bool = None,
                                          functions: str = None) -> bool:
        ...

    def print_from_buffer(self, ) -> str:
        ...

    def stop_embedded_interrupt_handling(self, ) -> bool:
        ...

    def empty_server_queue(self, ) -> List[str]:
        ...

    def release_lock(self, ) -> None:
        ...

    def enable_spmi(self, base_addr: int = None) -> int:
        ...

    def disable_spmi(self, ) -> None:
        ...

    def spmi_device_initialize(self,
                               device_type: str = None,
                               device_id: int = None,
                               f_tclk: float = None,
                               ddba_addr: int = None,
                               inten: int = None,
                               enr: int = None) -> int:
        ...

    def spmi_device_disable(self, ) -> int:
        ...

    def spmi_set_master_req_prescaler(self, rate: int = None) -> int:
        ...

    def spmi_set_slave_addr(self, addr: int = None) -> int:
        ...

    def spmi_set_master_addr(self, addr: int = None) -> int:
        ...

    def spmi_set_ip_version(self, version: int = None) -> int:
        ...

    def spmi_poll_command_sent_flag(self, clear_all_flags: bool = None) -> int:
        ...

    def spmi_master_write(self,
                          master_id: int = None,
                          address: int = None,
                          data: int = None,
                          use_a_bit: bool = None,
                          use_sr_bit: bool = None) -> int:
        ...

    def spmi_master_read(self,
                         master_id: int = None,
                         address: int = None,
                         size: int = None,
                         use_a_bit: bool = None,
                         use_sr_bit: bool = None) -> int:
        ...

    def spmi_register_write(self,
                            slave_id: int = None,
                            address: int = None,
                            data: List[int] = None,
                            priority: int = None) -> int:
        ...

    def spmi_register_read(self,
                           slave_id: int = None,
                           address: int = None,
                           priority: int = None) -> int:
        ...

    def spmi_extended_register_write(self,
                                     slave_id: int = None,
                                     address: int = None,
                                     data: List[int] = None,
                                     priority: int = None) -> int:
        ...

    def spmi_extended_register_read(self,
                                    slave_id: int = None,
                                    address: int = None,
                                    size: int = None,
                                    priority: int = None) -> List[int]:
        ...

    def spmi_extended_register_write_long(self,
                                          slave_id: int = None,
                                          address: int = None,
                                          data: List[int] = None,
                                          priority: int = None) -> int:
        ...

    def spmi_extended_register_read_long(self,
                                         slave_id: int = None,
                                         address: int = None,
                                         size: int = None,
                                         priority: int = None) -> List[int]:
        ...

    def spmi_24bit_write(self,
                         slave_id: int = None,
                         address: int = None,
                         data: List[int] = None,
                         priority: int = None,
                         p_inx: int = None) -> int:
        ...

    def spmi_24bit_read(self,
                        slave_id: int = None,
                        address: int = None,
                        word_count: int = None,
                        priority: int = None,
                        p_inx: int = None) -> List[int]:
        ...

    def spmi_block_read(self,
                        peripheral_id: int = None,
                        start_addr: int = None,
                        byte_count: int = None,
                        addressibility: int = None,
                        priority: int = None) -> List[int]:
        ...

    def spmi_block_write(self,
                         peripheral_id: int = None,
                         start_addr: int = None,
                         data: List[int] = None,
                         addressibility: int = None,
                         priority: int = None) -> None:
        ...

    def spmi_chain_read(self,
                        peripheral_id: int = None,
                        address: int = None,
                        num_reads: int = None,
                        read_size: int = None,
                        addressibility: int = None,
                        priority: int = None) -> List[int]:
        ...

    def spmi_chain_write(self,
                         peripheral_id: int = None,
                         address: int = None,
                         data: List[int] = None,
                         write_size: int = None,
                         addressibility: int = None,
                         priority: int = None) -> None:
        ...

    def master_write(self,
                     master_id: int = None,
                     address: int = None,
                     data: int = None,
                     use_a_bit: bool = None) -> int:
        ...

    def spmi_dump_registers(self, ) -> List[str]:
        ...

    def hcc_queue_packets(self,
                          packets: List[List[int]] = None,
                          cs_delays: List[int] = None) -> None:
        ...

    def hcc_send_packet(self,
                        packet: List[int] = None,
                        cs_delay: int = None) -> List[int]:
        ...

    def hcc_execute_packet_queue(self, ) -> List[List[int]]:
        ...

    def enable_hcc(self, bus_num: int = None, chip_select: int = None) -> None:
        ...

    def disable_hcc(self, ) -> None:
        ...

    def hcc_set_speed(self, speed: int = None) -> None:
        ...

    def hcc_set_setup_delay(self, delay: int = None) -> None:
        ...

    def hcc_set_bit_order(self, order: int = None) -> None:
        ...

    def hcc_set_clk_mode(self, mode: int = None) -> None:
        ...

    def hcc_register(self, handler: str = None) -> None:
        ...

    def hcc_unregister(self, ) -> None:
        ...

    def hcc_hint_queue_get(self, timeout: float = None) -> str:
        ...

    def enable_i3c(self, bus_num: int = None) -> bool:
        ...

    def disable_i3c(self, bus_num: int = None) -> None:
        ...

    def i3c_controller_rstdaa(self,
                              bus_num: int = None,
                              address: int = None,
                              detach_devs: bool = None) -> None:
        ...

    def i3c_controller_setaasa(self, bus_num: int = None) -> None:
        ...

    def i3c_controller_setdasa(self,
                               bus_num: int = None,
                               static_addr: int = None,
                               dyn_addr: int = None) -> None:
        ...

    def i3c_controller_setnewda(self,
                                bus_num: int = None,
                                old_addr: int = None,
                                new_addr: int = None) -> None:
        ...

    def i3c_controller_dodaa(
            self,
            bus_num: int = None,
            reset_addr_assignments: bool = None) -> Dict[int, int]:
        ...

    def i3c_controller_disec(self,
                             bus_num: int = None,
                             address: int = None,
                             payload: int = None) -> None:
        ...

    def i3c_controller_enec(self,
                            bus_num: int = None,
                            payload: int = None) -> None:
        ...

    def i3c_controller_getpid(self,
                              bus_num: int = None,
                              address: int = None,
                              add_device: bool = None) -> int:
        ...

    def i3c_controller_getbcr(self,
                              bus_num: int = None,
                              address: int = None,
                              add_device: bool = None) -> int:
        ...

    def i3c_controller_getdcr(self,
                              bus_num: int = None,
                              address: int = None,
                              add_device: bool = None) -> int:
        ...

    def i3c_controller_getstatus(self,
                                 bus_num: int = None,
                                 address: int = None,
                                 add_device: bool = None) -> int:
        ...

    def i3c_controller_add_device(self,
                                  bus_num: int = None,
                                  static_addr: int = None,
                                  dyn_addr: int = None) -> None:
        ...

    def i3c_controller_get_devices(self, bus_num: int = None) -> List[str]:
        ...

    def i3c_read_device(self,
                        bus_num: int = None,
                        address: int = None,
                        num_bytes: int = None,
                        preamble_bytes: List[int] = None,
                        add_device: bool = None) -> List[int]:
        ...

    def i3c_read_reg(self,
                     bus_num: int = None,
                     address: int = None,
                     reg_addr: List[int] = None,
                     num_bytes: int = None,
                     preamble_bytes: List[int] = None,
                     add_device: bool = None) -> List[int]:
        ...

    def i3c_write_device(self,
                         bus_num: int = None,
                         address: int = None,
                         write_data: List[int] = None,
                         preamble_bytes: List[int] = None,
                         add_device: bool = None) -> None:
        ...

    def i3c_write_reg(self,
                      bus_num: int = None,
                      address: int = None,
                      reg_addr: List[int] = None,
                      write_data: List[int] = None,
                      preamble_bytes: List[int] = None,
                      add_device: bool = None) -> None:
        ...

    def i3c_controller_add_i2c_device(self,
                                      bus_num: int = None,
                                      address: int = None,
                                      replace: bool = None) -> None:
        ...

    def i3c_controller_get_i2c_devices(self, bus_num: int = None) -> List[str]:
        ...

    def i3c_controller_remove_device(self,
                                     bus_num: int = None,
                                     address: int = None) -> None:
        ...

    def i3c_legacy_i2c_read_device(self,
                                   bus_num: int = None,
                                   address: int = None,
                                   num_bytes: int = None,
                                   preamble_bytes: List[int] = None,
                                   add_device: bool = None) -> List[int]:
        ...

    def i3c_legacy_i2c_read_reg(self,
                                bus_num: int = None,
                                address: int = None,
                                reg_addr: List[int] = None,
                                num_bytes: int = None,
                                preamble_bytes: List[int] = None,
                                add_device: bool = None) -> List[int]:
        ...

    def i3c_legacy_i2c_write_device(self,
                                    bus_num: int = None,
                                    address: int = None,
                                    write_data: List[int] = None,
                                    preamble_bytes: List[int] = None,
                                    add_device: bool = None) -> None:
        ...

    def i3c_legacy_i2c_write_reg(self,
                                 bus_num: int = None,
                                 address: int = None,
                                 reg_addr: List[int] = None,
                                 write_data: List[int] = None,
                                 preamble_bytes: List[int] = None,
                                 add_device: bool = None) -> None:
        ...
