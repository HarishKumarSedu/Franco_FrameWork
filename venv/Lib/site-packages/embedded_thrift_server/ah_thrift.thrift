namespace csharp AH_THRIFT

exception I2c_error {
    1: string error_output
    2: string command
}

exception Spmi_timeout {
    1: string error_output
}

exception Spmi_arb_failure {
    1: string error_output
}

exception GpioAccessError {
    1: string message
}

exception HccDriverError {
    1: string error_output
}

exception JSONSerializeError {
    1: string error_output
}

exception ServerError {
    1: string error_output
}

exception VariantError {
    1: string error_output
}

exception I3cError {
    1: string error_code
    2: string msg
}

exception I3cDriverError {
    1: string error_msg
}

service ah_thrift {

    /*
    ================================================================================
                           AH server and Linux OS functions
    ================================================================================
    */

    string ping(),

    string server_eval(1: string expression)
        throws (1: JSONSerializeError json_err, 2: ServerError server_err),

    void reload_modules(1: list<string> modules),

    string embed_test_station(1:string serialized_station, 2:string env_vars),

    string ping_test_station(),

    string burst(1: list<string> lines, 2: string vars, 3: string aliases),

    string get_traceback(),

    string program_xmos_image(1: string image),

    list<string> get_variants(),

    string get_current_variant(),

    void set_variant(1: string variant, 2: bool reboot),

    /*
    ================================================================================
                                     GPIO functions
    ================================================================================
    */

    string gpioinfo(),

    string get_active_gpio_info(),

    list<string> get_active_gpios_list(),

    i32 get_gpio(1:i32 chip_num, 2:i32 line_num)
        throws (1: GpioAccessError err),

    void set_gpio(1:i32 chip_num, 2:i32 line_num, 3:i32 value)
        throws (1: GpioAccessError err),

    i32 get_gpio_by_name(1:string name)
        throws (1: GpioAccessError err),

    void set_gpio_by_name(1:string name, 2:i32 value)
        throws (1: GpioAccessError err),

    i32 get_gpio_direction(1:i32 chip_num, 2:i32 line_num)
        throws (1: GpioAccessError err),

    void set_gpio_direction(1:i32 chip_num, 2:i32 line_num, 3:i32 direction)
        throws (1: GpioAccessError err),

    i32 get_gpio_direction_by_name(1:string name)
        throws (1: GpioAccessError err),

    void set_gpio_direction_by_name(1:string name, 2:i32 direction)
        throws (1: GpioAccessError err),

    void toggle_gpio(1:i32 chip_num, 2:i32 line_num, 3:bool active_low, 4:double delay, 5:double pulse_width)
        throws (1: GpioAccessError err),

    void toggle_gpio_by_name(1:string name, 2:bool active_low, 3:double delay, 4:double pulse_width)
        throws (1: GpioAccessError err),

    void reset_dut(1:i32 mode, 2:bool active_low),

    void reset_wrapper(1:i32 mode, 2:bool active_low),

    void set_rail_voltage(1:double voltage),

    /*
    ================================================================================
                              Control interface functions
    ================================================================================
    */

    // ----------------------------------  I2C  ----------------------------------

    i32 write_i2c_reg(1:i64 reg_addr, 2:list<i16> write_data, 3:i32 dev_addr, 4:i32 bus_num, 5:i32 speed, 6:bool repeat_start,
                      7:i32 write_reg_addr_size, 8:bool ainc, 9:i32 address_stride, 10:i32 write_reg_data_size)
        throws (1: I2c_error err),

    list<i16> read_i2c_reg(1:i64 reg_addr, 2:i32 byte_count, 3:i32 dev_addr, 4:i32 bus_num, 5:i32 speed, 6:bool repeat_start,
                           7:i32 read_reg_addr_size, 8:bool ainc, 9:i32 address_stride, 10:i32 read_reg_data_size)
        throws (1: I2c_error err),

    i32 i2c_device_write(1:i32 bus_num, 2:i32 speed, 3:i32 dev_addr, 4:list<i16> write_data)
        throws (1: I2c_error err),

    list<i16> i2c_device_read(1:i32 bus_num, 2:i32 speed, 3:i32 dev_addr, 4:i32 byte_count)
        throws (1: I2c_error err),

    bool i2c_check_ack(1:i32 bus_num, 2:i32 speed, 3:i32 dev_addr),

    string i2c_scan(1:i16 bus_num),

    void set_i2c_bus_speed(1: i16 bus_num, 2: i32 speed),

    // ----------------------------------  SPI  ----------------------------------

    list<i16> spi_fd(1:list<i16> bytes_out, 2:i16 bus_num, 3:i16 chip_select, 4:i64 speed,  5:bool keep_cs, 6:i16 clk_mode),

    list<i64> spi_apb_block_read(1:i16 bus_num, 2:i16 chip_select, 3:i64 speed, 4:i64 address, 5:i32 addr_size, 6:i32 data_size, 7:i64 length),

    void spi_apb_block_write(1:i16 bus_num, 2:i16 chip_select, 3:i64 speed, 4:i64 address, 5:list<i64> values, 6:i32 addr_size, 7:i32 data_size)

    /*
    ================================================================================
                                  Memory map functions
    ================================================================================
    */

    void mmap_add(1: i64 base_addr, 2: i64 size, 3: i16 word_size),

    list<i16> mmap_read(1: i64 base_addr, 2: i64 offset, 3: i64 num_bytes),

    void mmap_write(1: i64 base_addr, 2: i64 offset, 3: list<i16> bytes_out),

    i32 memio_write(1:i64 addr, 2:i64 data),
   
    i64 memio_read(1:i64 addr),

    /*
    ================================================================================
                              SPMI RCS interrupt functions
    ================================================================================
    */

    string handle_interrupt(1:i16 int_id),

    bool start_embedded_interrupt_handling(1: map<i32, string> int_map, 2:bool verbose, 3:string functions),

    string print_from_buffer(),

    bool stop_embedded_interrupt_handling(),

    list<string> empty_server_queue(),

    void release_lock(),

    /*
    ================================================================================
                       SPMI transaction and core config functions
    ================================================================================
    */

    i32 enable_spmi(1:i64 base_addr),

    void disable_spmi(),

    i32 spmi_device_initialize(1:string device_type, 2:i32 device_id, 3:double f_tclk, 4:i32 ddba_addr, 5:i32 inten, 6:i32 enr),

    i32 spmi_device_disable(),

    i32 spmi_set_master_req_prescaler(1:i32 rate),

    i32 spmi_set_slave_addr(1:i32 addr),

    i32 spmi_set_master_addr(1:i32 addr),

    i32 spmi_set_ip_version(1:i32 version),

    i32 spmi_poll_command_sent_flag(1:bool clear_all_flags),

    i32 spmi_master_write(1:i32 master_id, 2:i64 address, 3:i64 data, 4:bool use_a_bit, 5:bool use_sr_bit),

    i64 spmi_master_read(1:i32 master_id, 2:i64 address, 3:i32 size, 4:bool use_a_bit, 5:bool use_sr_bit),

    i32 spmi_register_write(1:i32 slave_id, 2:i64 address, 3:list<i16> data, 4:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    i64 spmi_register_read(1:i32 slave_id, 2:i64 address,  3:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    i32 spmi_extended_register_write(1:i32 slave_id, 2:i64 address, 3:list<i16> data, 4:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    list<i16> spmi_extended_register_read(1:i32 slave_id, 2:i64 address,3:i32 size, 4:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    i32 spmi_extended_register_write_long(1:i32 slave_id, 2:i64 address, 3:list<i16> data,  4:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    list<i16> spmi_extended_register_read_long(1:i32 slave_id, 2:i64 address, 3:i32 size, 4:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    i32 spmi_24bit_write(1:i64 slave_id, 2:i64 address, 3:list<i64> data, 4:i32 priority, 5:i32 p_inx)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    list<i64> spmi_24bit_read(1:i64 slave_id, 2:i64 address, 3:i64 word_count, 4:i32 priority, 5:i32 p_inx)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    list<i16> spmi_block_read(1:i16 peripheral_id, 2:i64 start_addr, 3:i64 byte_count, 4:i16 addressibility, 5: i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    void spmi_block_write(1:i16 peripheral_id, 2:i64 start_addr, 3:list<i16> data, 4:i16 addressibility, 5: i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    list<i16> spmi_chain_read(1:i16 peripheral_id, 2:i64 address, 3:i32 num_reads, 4:i16 read_size, 5:i16 addressibility, 6:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    void spmi_chain_write(1:i16 peripheral_id, 2:i64 address, 3:list<i16> data, 4:i16 write_size, 5:i16 addressibility, 6:i32 priority)
        throws (1: Spmi_timeout timeout_err, 2: Spmi_arb_failure arb_err),

    i16 master_write(1:i16 master_id, 2:i32 address, 3:i32 data, 4:bool use_a_bit),

    list<string> spmi_dump_registers(),

    /*
    ================================================================================
                                     HCC functions
    ================================================================================
    */

    void hcc_queue_packets(1: list<list<i16>> packets, 2: list<i32> cs_delays)
        throws (1: HccDriverError hcc_err),

    list<i16> hcc_send_packet(1: list<i16> packet, 2: i32 cs_delay)
        throws (1: HccDriverError hcc_err),

    list<list<i16>> hcc_execute_packet_queue()
        throws (1: HccDriverError hcc_err),

    void enable_hcc(1: i8 bus_num, 2: i8 chip_select)
        throws (1: HccDriverError hcc_err, 2: I2c_error i2c_err),

    void disable_hcc()
        throws (1: HccDriverError hcc_err, 2: I2c_error i2c_err),

    void hcc_set_speed(1: i8 speed)
        throws (1: HccDriverError hcc_err, 2: I2c_error i2c_err),

    void hcc_set_setup_delay(1: i32 delay)
        throws (1: HccDriverError hcc_err),

    void hcc_set_bit_order(1: i8 order)
        throws (1: HccDriverError hcc_err),

    void hcc_set_clk_mode(1: i8 mode)
        throws (1: HccDriverError hcc_err),

    void hcc_register(1: string handler)
        throws (1: HccDriverError hcc_err),

    void hcc_unregister()
        throws (1: HccDriverError hcc_err),

    string hcc_hint_queue_get(1: double timeout)
        throws (1: HccDriverError hcc_err),

    /*
    ================================================================================
                                     I3C functions
    ================================================================================
    */

    bool enable_i3c(1: i16 bus_num)
        throws (1: I3cDriverError i3c_err, 2: VariantError variant_err),

    void disable_i3c(1: i16 bus_num)
        throws (1: VariantError variant_err),

    void i3c_controller_rstdaa(1: i16 bus_num, 2: i16 address, 3: bool detach_devs)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_setaasa(1: i16 bus_num)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_setdasa(1: i16 bus_num, 2: i16 static_addr, 3: i16 dyn_addr)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_setnewda(1: i16 bus_num, 2: i16 old_addr, 3: i16 new_addr)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    map<i64, i32> i3c_controller_dodaa(1: i16 bus_num, 2: bool reset_addr_assignments)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_disec(1: i16 bus_num, 2: i16 address, 3: i16 payload)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_enec(1: i16 bus_num, 2: i16 payload)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    i64 i3c_controller_getpid(1: i16 bus_num, 2: i16 address, 3: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    i64 i3c_controller_getbcr(1: i16 bus_num, 2: i16 address, 3: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    i64 i3c_controller_getdcr(1: i16 bus_num, 2: i16 address, 3: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    i64 i3c_controller_getstatus(1: i16 bus_num, 2: i16 address, 3: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_controller_add_device(1: i16 bus_num, 2: i16 static_addr, 3: i16 dyn_addr)
        throws (1: I3cDriverError i3c_driver_err),

    list<string> i3c_controller_get_devices(1: i16 bus_num)
        throws (1: I3cDriverError i3c_driver_err),

    list<i16> i3c_read_device(1: i16 bus_num, 2: i16 address, 3: i64 num_bytes, 4: list<i16> preamble_bytes, 5: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    list<i16> i3c_read_reg(1: i16 bus_num, 2: i16 address, 3: list<i16> reg_addr, 4: i64 num_bytes, 5: list<i16> preamble_bytes, 6: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_write_device(1: i16 bus_num, 2: i16 address, 3: list<i16> write_data, 4: list<i16> preamble_bytes, 5: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_write_reg(1: i16 bus_num, 2: i16 address, 3: list<i16> reg_addr, 4: list<i16> write_data, 5: list<i16> preamble_bytes, 6: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    /* I3C Legacy I2C functions */

    void i3c_controller_add_i2c_device(1: i16 bus_num, 2: i16 address, 3: bool replace)
        throws (1: I3cDriverError i3c_driver_err),

    list<string> i3c_controller_get_i2c_devices(1: i16 bus_num)
        throws (1: I3cDriverError i3c_driver_err),

    void i3c_controller_remove_device(1: i16 bus_num, 2: i16 address)
            throws (1: I3cDriverError i3c_driver_err),

    list<i16> i3c_legacy_i2c_read_device(1: i16 bus_num, 2: i16 address, 3: i64 num_bytes, 4: list<i16> preamble_bytes, 5: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    list<i16> i3c_legacy_i2c_read_reg(1: i16 bus_num, 2: i16 address, 3: list<i16> reg_addr, 4: i64 num_bytes, 5: list<i16> preamble_bytes, 6: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_legacy_i2c_write_device(1: i16 bus_num, 2: i16 address, 3: list<i16> write_data, 4: list<i16> preamble_bytes, 5: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),

    void i3c_legacy_i2c_write_reg(1: i16 bus_num, 2: i16 address, 3: list<i16> reg_addr, 4: list<i16> write_data, 5: list<i16> preamble_bytes, 6: bool add_device)
        throws (1: I3cError i3c_err, 2: I3cDriverError i3c_driver_err),


}

