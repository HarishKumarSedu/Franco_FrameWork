import os
import subprocess
import argparse
from importlib_metadata import version

import thrift
from thrift2pyi.convert import Thrift2pyi
from pypeg2 import compose
from yapf.yapflib.yapf_api import FormatCode


package_path = os.path.dirname(os.path.realpath(__file__))
thrift_version = version(thrift.__name__)


def gen_stub_file(thrift_file: str, thrift_service: str, stub_path: str, class_name: str):
    """
    Converts a service in given thrift file to a pyi stub file for a specified class

    :param thrift_file: Path to .thrift file
    :type thrift_file: str
    :param thrift_service: Name of service to create stubs for
    :type thrift_service: str
    :param stub_path: Path to .pyi file to write to
    :type stub_path: str
    :param class_name: Name of stubbed class that will contain all thrift methods
    :type class_name: str
    :return: None
    :rtype: None
    """
    saved = os.getcwd()
    os.chdir(package_path)  # change dir to /utilities
    converter = Thrift2pyi(thrift_file, None, None)
    converter._thrift2pyi()
    out = FormatCode(compose(converter.pyi))[0]
    out = out.replace('class ' + thrift_service, 'class ' + class_name)
    with open(stub_path, 'w') as f:
        f.write(out)
    os.chdir(saved)


def gen_single_thrift(target: str, thrift_file: str, out_dir: str = None):
    """
    Invokes thrift compiler to generate service from .thrift file.

    :param target: Target language, e.g. py (Python), cpp, csharp, etc.
    :type target: str
    :param thrift_file: Path to .thrift file to compile
    :type thrift_file: str
    :param out_dir: Generated content output directory. If None is provided, default is embedded_thrift_server/gen_*
    :type out_dir: str
    :return: None
    :rtype: None
    """
    if not out_dir:  # Default to gen_py
        out_dir = f"{package_path}/../gen_{target}"
    if not os.path.isdir(out_dir):
        os.makedirs(out_dir)
    command = [f"{package_path}/../thrift-{thrift_version}.exe", '-r', f'--gen', target, f'-out', out_dir,  thrift_file]
    subprocess.call(command, shell=False, cwd=package_path, stdout=subprocess.DEVNULL)


def gen_thrift(target_list, thrift_file):
    for target in target_list:
        gen_single_thrift(target, thrift_file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Thrift generation script')
    parser.add_argument('tfile', nargs=1, help='Path to .thrift file')
    parser.add_argument("--targets", "-t", help='Target SW platform for code generation. Supported values are: "c_glib"\
                         | "cpp" | "csharp" | "delphi" | "go" | "java" | "js" | "lua" | "netcore" | "perl" | "php" | \
                         "py" | "py.twisted" | "rb" | "st" | "xsd"', default='py', nargs='*')

    args = parser.parse_args()
    gen_thrift(args.targets, args.tfile[0])
