from time import sleep
from paramiko import client
from pprint import pprint
import sys, os
import re
import subprocess
import json
import shlex
from embedded_thrift_server.utilities.update_ah_thrift import SSH, Progress

def install_numpy(ssh: SSH, log, py_version='3.7'):
    """
    Makes sure that Numpy is properly installed for specified version of python.

    :param ssh: SSH connection to the AH
    :type ssh: SSH
    :param log: TsLoggingAdapter used to print progress bar to the console
    :type log: TsLoggingAdapter
    :param py_version: Version of python nupmy should be installed for
    :type py_version: str
    :return: None
    """
    dist_path = f'/usr/local/lib/python{py_version}/dist-packages/embedded_thrift_server'
    log_file = dist_path + '/utilities/scripts/numpy_log.txt'
    bar = Progress(7, 25, log)

    bar.step("Checking numpy install")
    nupmy_valid = int(ssh.communicate(f'python3.7 {dist_path}/utilities/scripts/check_numpy.py'))
    if nupmy_valid:
        bar.clear()
        print(f"Numpy is already installed for python {py_version}")
        return

    # # Bad numpy install, go through installation process # #
    # Gather parameters
    networks = ssh.communicate('nmcli -f SSID dev wifi')
    networks = [l.strip() for l in networks.split('\n')[1:]]
    networks = [n for n in networks if n not in ['', '--']]
    networks = ', '.join(set(networks))
    script_path = os.path.join(os.path.dirname(__file__), 'get_credentials.py')
    cred_file = os.path.join(os.path.dirname(__file__), 'cred.json')
    p = subprocess.Popen(['start', '/wait', 'cmd', '/c', 'python', script_path, networks, cred_file],
                         shell=True, stdout=subprocess.PIPE)
    p.wait()
    with open(cred_file, 'r') as f:
        creds = json.loads(f.read())
    os.remove(cred_file)
    ssid = creds['ssid']
    user = creds['user']
    pw = creds['pw']

    # Create log file for console output
    ssh.sendcommand(f'echo "" > {log_file}')

    bar.step("Checking network adapters")
    try:
        ssh.communicate('ip a | grep wlan')
    except:
        print("Wifi adapter not found, please see 'Driver Setup' section in https://docs.cirrus.com/display/MSP/Configure+HUB+WiFi")
        return

    # Use parameters to connect AH to wifi
    bar.step(f"Connecting to {ssid}")
    script_path = dist_path + '/utilities/scripts/connect_wifi.sh'
    ssh.sendcommand(f'dos2unix {script_path}; chmod +x {script_path}; {script_path} "{ssid}" {user} {pw} &>> {log_file}')

    bar.step('Uninstalling bad numpy install')
    ssh.sendcommand(f'python3 -m pip uninstall -y numpy &>> {log_file}')

    bar.step("Installing cython")
    ssh.sendcommand(f'python{py_version} -m pip install cython &>> {log_file}')

    bar.step("Installing wheel")
    ssh.sendcommand(f'python{py_version} -m pip install wheel &>> {log_file}')

    bar.step("Installing numpy (this might take a while)")
    ssh.sendcommand(f'python{py_version} -m pip install -I numpy &>> {log_file}')

    bar.show("Validating install")
    nupmy_valid = int(ssh.communicate(f'python3.7 {dist_path}/utilities/scripts/check_numpy.py'))
    if nupmy_valid:
        bar.show("Done!")
        sleep(1)
        bar.clear()
        print(f"Successfully installed numpy for python {py_version}")
    else:  # Get AH console output and print to PC console
        bar.clear()
        print()
        print("\033[91m", end='')
        print(" ERROR INSTALLING NUMPY ".center(80, '='))
        pprint(ssh.communicate(f'cat {log_file}'))
        print(" END OF CONSOLE LOG ".center(80, '='))
        print("\033[0m", end='')
