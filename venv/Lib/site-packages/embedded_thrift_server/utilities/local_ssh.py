import subprocess


# TODO: Make this name better and adhere to conventions
class LocalSSH:

    def open(self):
        pass

    def send_command(self, command):
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        console_output, error_output = process.communicate("")
        if error_output:
            raise OSError(error_output.decode('utf-8'))

    def communicate(self, command):
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        console_output, error_output = process.communicate("")
        if error_output:
            raise OSError(error_output.decode('utf-8'))
        return console_output.decode('utf-8')

    def scp(self, localpath, remotepath, put=True):
        if put:
            self.send_command(f'cp -R {localpath} {remotepath}')
        else:
            self.send_command(f'cp -R {remotepath} {localpath}')

    def scp_relative(self, localpath, remotepath, items):
        localpath = os.path.expandvars(localpath)
        remotepath = os.path.expandvars(remotepath)
        fw_name = os.path.basename(os.path.realpath(localpath))
        self.sendcommand('cd %s; mkdir -p %s/%s' % (remotepath, remotepath, fw_name))
        remotepath += '/' + fw_name
        for item in os.scandir(localpath):
            if item.name in items:
                self.scp(item.path, remotepath)

    def is_open(self):
        return True