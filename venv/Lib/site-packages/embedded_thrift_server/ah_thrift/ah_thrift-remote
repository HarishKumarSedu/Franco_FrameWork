#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ah_thrift import ah_thrift
from ah_thrift.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string ping()')
    print('  string server_eval(string expression)')
    print('  void reload_modules( modules)')
    print('  string embed_test_station(string serialized_station, string env_vars)')
    print('  string ping_test_station()')
    print('  string burst( lines, string vars, string aliases)')
    print('  string get_traceback()')
    print('  string program_xmos_image(string image)')
    print('   get_variants()')
    print('  string get_current_variant()')
    print('  void set_variant(string variant, bool reboot)')
    print('  string gpioinfo()')
    print('  string get_active_gpio_info()')
    print('   get_active_gpios_list()')
    print('  i32 get_gpio(i32 chip_num, i32 line_num)')
    print('  void set_gpio(i32 chip_num, i32 line_num, i32 value)')
    print('  i32 get_gpio_by_name(string name)')
    print('  void set_gpio_by_name(string name, i32 value)')
    print('  i32 get_gpio_direction(i32 chip_num, i32 line_num)')
    print('  void set_gpio_direction(i32 chip_num, i32 line_num, i32 direction)')
    print('  i32 get_gpio_direction_by_name(string name)')
    print('  void set_gpio_direction_by_name(string name, i32 direction)')
    print('  void toggle_gpio(i32 chip_num, i32 line_num, bool active_low, double delay, double pulse_width)')
    print('  void toggle_gpio_by_name(string name, bool active_low, double delay, double pulse_width)')
    print('  void reset_dut(i32 mode, bool active_low)')
    print('  void reset_wrapper(i32 mode, bool active_low)')
    print('  void set_rail_voltage(double voltage)')
    print('  i32 write_i2c_reg(i64 reg_addr,  write_data, i32 dev_addr, i32 bus_num, i32 speed, bool repeat_start, i32 write_reg_addr_size, bool ainc, i32 address_stride, i32 write_reg_data_size)')
    print('   read_i2c_reg(i64 reg_addr, i32 byte_count, i32 dev_addr, i32 bus_num, i32 speed, bool repeat_start, i32 read_reg_addr_size, bool ainc, i32 address_stride, i32 read_reg_data_size)')
    print('  i32 i2c_device_write(i32 bus_num, i32 speed, i32 dev_addr,  write_data)')
    print('   i2c_device_read(i32 bus_num, i32 speed, i32 dev_addr, i32 byte_count)')
    print('  bool i2c_check_ack(i32 bus_num, i32 speed, i32 dev_addr)')
    print('  string i2c_scan(i16 bus_num)')
    print('  void set_i2c_bus_speed(i16 bus_num, i32 speed)')
    print('   spi_fd( bytes_out, i16 bus_num, i16 chip_select, i64 speed, bool keep_cs, i16 clk_mode)')
    print('   spi_apb_block_read(i16 bus_num, i16 chip_select, i64 speed, i64 address, i32 addr_size, i32 data_size, i64 length)')
    print('  void spi_apb_block_write(i16 bus_num, i16 chip_select, i64 speed, i64 address,  values, i32 addr_size, i32 data_size)')
    print('  void mmap_add(i64 base_addr, i64 size, i16 word_size)')
    print('   mmap_read(i64 base_addr, i64 offset, i64 num_bytes)')
    print('  void mmap_write(i64 base_addr, i64 offset,  bytes_out)')
    print('  i32 memio_write(i64 addr, i64 data)')
    print('  i64 memio_read(i64 addr)')
    print('  string handle_interrupt(i16 int_id)')
    print('  bool start_embedded_interrupt_handling( int_map, bool verbose, string functions)')
    print('  string print_from_buffer()')
    print('  bool stop_embedded_interrupt_handling()')
    print('   empty_server_queue()')
    print('  void release_lock()')
    print('  i32 enable_spmi(i64 base_addr)')
    print('  void disable_spmi()')
    print('  i32 spmi_device_initialize(string device_type, i32 device_id, double f_tclk, i32 ddba_addr, i32 inten, i32 enr)')
    print('  i32 spmi_device_disable()')
    print('  i32 spmi_set_master_req_prescaler(i32 rate)')
    print('  i32 spmi_set_slave_addr(i32 addr)')
    print('  i32 spmi_set_master_addr(i32 addr)')
    print('  i32 spmi_set_ip_version(i32 version)')
    print('  i32 spmi_poll_command_sent_flag(bool clear_all_flags)')
    print('  i32 spmi_master_write(i32 master_id, i64 address, i64 data, bool use_a_bit, bool use_sr_bit)')
    print('  i64 spmi_master_read(i32 master_id, i64 address, i32 size, bool use_a_bit, bool use_sr_bit)')
    print('  i32 spmi_register_write(i32 slave_id, i64 address,  data, i32 priority)')
    print('  i64 spmi_register_read(i32 slave_id, i64 address, i32 priority)')
    print('  i32 spmi_extended_register_write(i32 slave_id, i64 address,  data, i32 priority)')
    print('   spmi_extended_register_read(i32 slave_id, i64 address, i32 size, i32 priority)')
    print('  i32 spmi_extended_register_write_long(i32 slave_id, i64 address,  data, i32 priority)')
    print('   spmi_extended_register_read_long(i32 slave_id, i64 address, i32 size, i32 priority)')
    print('  i32 spmi_24bit_write(i64 slave_id, i64 address,  data, i32 priority, i32 p_inx)')
    print('   spmi_24bit_read(i64 slave_id, i64 address, i64 word_count, i32 priority, i32 p_inx)')
    print('   spmi_block_read(i16 peripheral_id, i64 start_addr, i64 byte_count, i16 addressibility, i32 priority)')
    print('  void spmi_block_write(i16 peripheral_id, i64 start_addr,  data, i16 addressibility, i32 priority)')
    print('   spmi_chain_read(i16 peripheral_id, i64 address, i32 num_reads, i16 read_size, i16 addressibility, i32 priority)')
    print('  void spmi_chain_write(i16 peripheral_id, i64 address,  data, i16 write_size, i16 addressibility, i32 priority)')
    print('  i16 master_write(i16 master_id, i32 address, i32 data, bool use_a_bit)')
    print('   spmi_dump_registers()')
    print('  void hcc_queue_packets( packets,  cs_delays)')
    print('   hcc_send_packet( packet, i32 cs_delay)')
    print('   hcc_execute_packet_queue()')
    print('  void enable_hcc(i8 bus_num, i8 chip_select)')
    print('  void disable_hcc()')
    print('  void hcc_set_speed(i8 speed)')
    print('  void hcc_set_setup_delay(i32 delay)')
    print('  void hcc_set_bit_order(i8 order)')
    print('  void hcc_set_clk_mode(i8 mode)')
    print('  void hcc_register(string handler)')
    print('  void hcc_unregister()')
    print('  string hcc_hint_queue_get(double timeout)')
    print('  bool enable_i3c(i16 bus_num)')
    print('  void disable_i3c(i16 bus_num)')
    print('  void i3c_controller_rstdaa(i16 bus_num, i16 address, bool detach_devs)')
    print('  void i3c_controller_setaasa(i16 bus_num)')
    print('  void i3c_controller_setdasa(i16 bus_num, i16 static_addr, i16 dyn_addr)')
    print('  void i3c_controller_setnewda(i16 bus_num, i16 old_addr, i16 new_addr)')
    print('   i3c_controller_dodaa(i16 bus_num, bool reset_addr_assignments)')
    print('  void i3c_controller_disec(i16 bus_num, i16 address, i16 payload)')
    print('  void i3c_controller_enec(i16 bus_num, i16 payload)')
    print('  i64 i3c_controller_getpid(i16 bus_num, i16 address, bool add_device)')
    print('  i64 i3c_controller_getbcr(i16 bus_num, i16 address, bool add_device)')
    print('  i64 i3c_controller_getdcr(i16 bus_num, i16 address, bool add_device)')
    print('  i64 i3c_controller_getstatus(i16 bus_num, i16 address, bool add_device)')
    print('  void i3c_controller_add_device(i16 bus_num, i16 static_addr, i16 dyn_addr)')
    print('   i3c_controller_get_devices(i16 bus_num)')
    print('   i3c_read_device(i16 bus_num, i16 address, i64 num_bytes,  preamble_bytes, bool add_device)')
    print('   i3c_read_reg(i16 bus_num, i16 address,  reg_addr, i64 num_bytes,  preamble_bytes, bool add_device)')
    print('  void i3c_write_device(i16 bus_num, i16 address,  write_data,  preamble_bytes, bool add_device)')
    print('  void i3c_write_reg(i16 bus_num, i16 address,  reg_addr,  write_data,  preamble_bytes, bool add_device)')
    print('  void i3c_controller_add_i2c_device(i16 bus_num, i16 address, bool replace)')
    print('   i3c_controller_get_i2c_devices(i16 bus_num)')
    print('  void i3c_controller_remove_device(i16 bus_num, i16 address)')
    print('   i3c_legacy_i2c_read_device(i16 bus_num, i16 address, i64 num_bytes,  preamble_bytes, bool add_device)')
    print('   i3c_legacy_i2c_read_reg(i16 bus_num, i16 address,  reg_addr, i64 num_bytes,  preamble_bytes, bool add_device)')
    print('  void i3c_legacy_i2c_write_device(i16 bus_num, i16 address,  write_data,  preamble_bytes, bool add_device)')
    print('  void i3c_legacy_i2c_write_reg(i16 bus_num, i16 address,  reg_addr,  write_data,  preamble_bytes, bool add_device)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ah_thrift.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'server_eval':
    if len(args) != 1:
        print('server_eval requires 1 args')
        sys.exit(1)
    pp.pprint(client.server_eval(args[0],))

elif cmd == 'reload_modules':
    if len(args) != 1:
        print('reload_modules requires 1 args')
        sys.exit(1)
    pp.pprint(client.reload_modules(eval(args[0]),))

elif cmd == 'embed_test_station':
    if len(args) != 2:
        print('embed_test_station requires 2 args')
        sys.exit(1)
    pp.pprint(client.embed_test_station(args[0], args[1],))

elif cmd == 'ping_test_station':
    if len(args) != 0:
        print('ping_test_station requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping_test_station())

elif cmd == 'burst':
    if len(args) != 3:
        print('burst requires 3 args')
        sys.exit(1)
    pp.pprint(client.burst(eval(args[0]), args[1], args[2],))

elif cmd == 'get_traceback':
    if len(args) != 0:
        print('get_traceback requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_traceback())

elif cmd == 'program_xmos_image':
    if len(args) != 1:
        print('program_xmos_image requires 1 args')
        sys.exit(1)
    pp.pprint(client.program_xmos_image(args[0],))

elif cmd == 'get_variants':
    if len(args) != 0:
        print('get_variants requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_variants())

elif cmd == 'get_current_variant':
    if len(args) != 0:
        print('get_current_variant requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_current_variant())

elif cmd == 'set_variant':
    if len(args) != 2:
        print('set_variant requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_variant(args[0], eval(args[1]),))

elif cmd == 'gpioinfo':
    if len(args) != 0:
        print('gpioinfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.gpioinfo())

elif cmd == 'get_active_gpio_info':
    if len(args) != 0:
        print('get_active_gpio_info requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_active_gpio_info())

elif cmd == 'get_active_gpios_list':
    if len(args) != 0:
        print('get_active_gpios_list requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_active_gpios_list())

elif cmd == 'get_gpio':
    if len(args) != 2:
        print('get_gpio requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_gpio(eval(args[0]), eval(args[1]),))

elif cmd == 'set_gpio':
    if len(args) != 3:
        print('set_gpio requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_gpio(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_gpio_by_name':
    if len(args) != 1:
        print('get_gpio_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_gpio_by_name(args[0],))

elif cmd == 'set_gpio_by_name':
    if len(args) != 2:
        print('set_gpio_by_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_gpio_by_name(args[0], eval(args[1]),))

elif cmd == 'get_gpio_direction':
    if len(args) != 2:
        print('get_gpio_direction requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_gpio_direction(eval(args[0]), eval(args[1]),))

elif cmd == 'set_gpio_direction':
    if len(args) != 3:
        print('set_gpio_direction requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_gpio_direction(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_gpio_direction_by_name':
    if len(args) != 1:
        print('get_gpio_direction_by_name requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_gpio_direction_by_name(args[0],))

elif cmd == 'set_gpio_direction_by_name':
    if len(args) != 2:
        print('set_gpio_direction_by_name requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_gpio_direction_by_name(args[0], eval(args[1]),))

elif cmd == 'toggle_gpio':
    if len(args) != 5:
        print('toggle_gpio requires 5 args')
        sys.exit(1)
    pp.pprint(client.toggle_gpio(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'toggle_gpio_by_name':
    if len(args) != 4:
        print('toggle_gpio_by_name requires 4 args')
        sys.exit(1)
    pp.pprint(client.toggle_gpio_by_name(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'reset_dut':
    if len(args) != 2:
        print('reset_dut requires 2 args')
        sys.exit(1)
    pp.pprint(client.reset_dut(eval(args[0]), eval(args[1]),))

elif cmd == 'reset_wrapper':
    if len(args) != 2:
        print('reset_wrapper requires 2 args')
        sys.exit(1)
    pp.pprint(client.reset_wrapper(eval(args[0]), eval(args[1]),))

elif cmd == 'set_rail_voltage':
    if len(args) != 1:
        print('set_rail_voltage requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_rail_voltage(eval(args[0]),))

elif cmd == 'write_i2c_reg':
    if len(args) != 10:
        print('write_i2c_reg requires 10 args')
        sys.exit(1)
    pp.pprint(client.write_i2c_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'read_i2c_reg':
    if len(args) != 10:
        print('read_i2c_reg requires 10 args')
        sys.exit(1)
    pp.pprint(client.read_i2c_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]), eval(args[9]),))

elif cmd == 'i2c_device_write':
    if len(args) != 4:
        print('i2c_device_write requires 4 args')
        sys.exit(1)
    pp.pprint(client.i2c_device_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'i2c_device_read':
    if len(args) != 4:
        print('i2c_device_read requires 4 args')
        sys.exit(1)
    pp.pprint(client.i2c_device_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'i2c_check_ack':
    if len(args) != 3:
        print('i2c_check_ack requires 3 args')
        sys.exit(1)
    pp.pprint(client.i2c_check_ack(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i2c_scan':
    if len(args) != 1:
        print('i2c_scan requires 1 args')
        sys.exit(1)
    pp.pprint(client.i2c_scan(eval(args[0]),))

elif cmd == 'set_i2c_bus_speed':
    if len(args) != 2:
        print('set_i2c_bus_speed requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_i2c_bus_speed(eval(args[0]), eval(args[1]),))

elif cmd == 'spi_fd':
    if len(args) != 6:
        print('spi_fd requires 6 args')
        sys.exit(1)
    pp.pprint(client.spi_fd(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'spi_apb_block_read':
    if len(args) != 7:
        print('spi_apb_block_read requires 7 args')
        sys.exit(1)
    pp.pprint(client.spi_apb_block_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'spi_apb_block_write':
    if len(args) != 7:
        print('spi_apb_block_write requires 7 args')
        sys.exit(1)
    pp.pprint(client.spi_apb_block_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'mmap_add':
    if len(args) != 3:
        print('mmap_add requires 3 args')
        sys.exit(1)
    pp.pprint(client.mmap_add(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mmap_read':
    if len(args) != 3:
        print('mmap_read requires 3 args')
        sys.exit(1)
    pp.pprint(client.mmap_read(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'mmap_write':
    if len(args) != 3:
        print('mmap_write requires 3 args')
        sys.exit(1)
    pp.pprint(client.mmap_write(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'memio_write':
    if len(args) != 2:
        print('memio_write requires 2 args')
        sys.exit(1)
    pp.pprint(client.memio_write(eval(args[0]), eval(args[1]),))

elif cmd == 'memio_read':
    if len(args) != 1:
        print('memio_read requires 1 args')
        sys.exit(1)
    pp.pprint(client.memio_read(eval(args[0]),))

elif cmd == 'handle_interrupt':
    if len(args) != 1:
        print('handle_interrupt requires 1 args')
        sys.exit(1)
    pp.pprint(client.handle_interrupt(eval(args[0]),))

elif cmd == 'start_embedded_interrupt_handling':
    if len(args) != 3:
        print('start_embedded_interrupt_handling requires 3 args')
        sys.exit(1)
    pp.pprint(client.start_embedded_interrupt_handling(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'print_from_buffer':
    if len(args) != 0:
        print('print_from_buffer requires 0 args')
        sys.exit(1)
    pp.pprint(client.print_from_buffer())

elif cmd == 'stop_embedded_interrupt_handling':
    if len(args) != 0:
        print('stop_embedded_interrupt_handling requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_embedded_interrupt_handling())

elif cmd == 'empty_server_queue':
    if len(args) != 0:
        print('empty_server_queue requires 0 args')
        sys.exit(1)
    pp.pprint(client.empty_server_queue())

elif cmd == 'release_lock':
    if len(args) != 0:
        print('release_lock requires 0 args')
        sys.exit(1)
    pp.pprint(client.release_lock())

elif cmd == 'enable_spmi':
    if len(args) != 1:
        print('enable_spmi requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_spmi(eval(args[0]),))

elif cmd == 'disable_spmi':
    if len(args) != 0:
        print('disable_spmi requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_spmi())

elif cmd == 'spmi_device_initialize':
    if len(args) != 6:
        print('spmi_device_initialize requires 6 args')
        sys.exit(1)
    pp.pprint(client.spmi_device_initialize(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'spmi_device_disable':
    if len(args) != 0:
        print('spmi_device_disable requires 0 args')
        sys.exit(1)
    pp.pprint(client.spmi_device_disable())

elif cmd == 'spmi_set_master_req_prescaler':
    if len(args) != 1:
        print('spmi_set_master_req_prescaler requires 1 args')
        sys.exit(1)
    pp.pprint(client.spmi_set_master_req_prescaler(eval(args[0]),))

elif cmd == 'spmi_set_slave_addr':
    if len(args) != 1:
        print('spmi_set_slave_addr requires 1 args')
        sys.exit(1)
    pp.pprint(client.spmi_set_slave_addr(eval(args[0]),))

elif cmd == 'spmi_set_master_addr':
    if len(args) != 1:
        print('spmi_set_master_addr requires 1 args')
        sys.exit(1)
    pp.pprint(client.spmi_set_master_addr(eval(args[0]),))

elif cmd == 'spmi_set_ip_version':
    if len(args) != 1:
        print('spmi_set_ip_version requires 1 args')
        sys.exit(1)
    pp.pprint(client.spmi_set_ip_version(eval(args[0]),))

elif cmd == 'spmi_poll_command_sent_flag':
    if len(args) != 1:
        print('spmi_poll_command_sent_flag requires 1 args')
        sys.exit(1)
    pp.pprint(client.spmi_poll_command_sent_flag(eval(args[0]),))

elif cmd == 'spmi_master_write':
    if len(args) != 5:
        print('spmi_master_write requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_master_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_master_read':
    if len(args) != 5:
        print('spmi_master_read requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_master_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_register_write':
    if len(args) != 4:
        print('spmi_register_write requires 4 args')
        sys.exit(1)
    pp.pprint(client.spmi_register_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_register_read':
    if len(args) != 3:
        print('spmi_register_read requires 3 args')
        sys.exit(1)
    pp.pprint(client.spmi_register_read(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'spmi_extended_register_write':
    if len(args) != 4:
        print('spmi_extended_register_write requires 4 args')
        sys.exit(1)
    pp.pprint(client.spmi_extended_register_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_extended_register_read':
    if len(args) != 4:
        print('spmi_extended_register_read requires 4 args')
        sys.exit(1)
    pp.pprint(client.spmi_extended_register_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_extended_register_write_long':
    if len(args) != 4:
        print('spmi_extended_register_write_long requires 4 args')
        sys.exit(1)
    pp.pprint(client.spmi_extended_register_write_long(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_extended_register_read_long':
    if len(args) != 4:
        print('spmi_extended_register_read_long requires 4 args')
        sys.exit(1)
    pp.pprint(client.spmi_extended_register_read_long(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_24bit_write':
    if len(args) != 5:
        print('spmi_24bit_write requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_24bit_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_24bit_read':
    if len(args) != 5:
        print('spmi_24bit_read requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_24bit_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_block_read':
    if len(args) != 5:
        print('spmi_block_read requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_block_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_block_write':
    if len(args) != 5:
        print('spmi_block_write requires 5 args')
        sys.exit(1)
    pp.pprint(client.spmi_block_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'spmi_chain_read':
    if len(args) != 6:
        print('spmi_chain_read requires 6 args')
        sys.exit(1)
    pp.pprint(client.spmi_chain_read(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'spmi_chain_write':
    if len(args) != 6:
        print('spmi_chain_write requires 6 args')
        sys.exit(1)
    pp.pprint(client.spmi_chain_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'master_write':
    if len(args) != 4:
        print('master_write requires 4 args')
        sys.exit(1)
    pp.pprint(client.master_write(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'spmi_dump_registers':
    if len(args) != 0:
        print('spmi_dump_registers requires 0 args')
        sys.exit(1)
    pp.pprint(client.spmi_dump_registers())

elif cmd == 'hcc_queue_packets':
    if len(args) != 2:
        print('hcc_queue_packets requires 2 args')
        sys.exit(1)
    pp.pprint(client.hcc_queue_packets(eval(args[0]), eval(args[1]),))

elif cmd == 'hcc_send_packet':
    if len(args) != 2:
        print('hcc_send_packet requires 2 args')
        sys.exit(1)
    pp.pprint(client.hcc_send_packet(eval(args[0]), eval(args[1]),))

elif cmd == 'hcc_execute_packet_queue':
    if len(args) != 0:
        print('hcc_execute_packet_queue requires 0 args')
        sys.exit(1)
    pp.pprint(client.hcc_execute_packet_queue())

elif cmd == 'enable_hcc':
    if len(args) != 2:
        print('enable_hcc requires 2 args')
        sys.exit(1)
    pp.pprint(client.enable_hcc(eval(args[0]), eval(args[1]),))

elif cmd == 'disable_hcc':
    if len(args) != 0:
        print('disable_hcc requires 0 args')
        sys.exit(1)
    pp.pprint(client.disable_hcc())

elif cmd == 'hcc_set_speed':
    if len(args) != 1:
        print('hcc_set_speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_set_speed(eval(args[0]),))

elif cmd == 'hcc_set_setup_delay':
    if len(args) != 1:
        print('hcc_set_setup_delay requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_set_setup_delay(eval(args[0]),))

elif cmd == 'hcc_set_bit_order':
    if len(args) != 1:
        print('hcc_set_bit_order requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_set_bit_order(eval(args[0]),))

elif cmd == 'hcc_set_clk_mode':
    if len(args) != 1:
        print('hcc_set_clk_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_set_clk_mode(eval(args[0]),))

elif cmd == 'hcc_register':
    if len(args) != 1:
        print('hcc_register requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_register(args[0],))

elif cmd == 'hcc_unregister':
    if len(args) != 0:
        print('hcc_unregister requires 0 args')
        sys.exit(1)
    pp.pprint(client.hcc_unregister())

elif cmd == 'hcc_hint_queue_get':
    if len(args) != 1:
        print('hcc_hint_queue_get requires 1 args')
        sys.exit(1)
    pp.pprint(client.hcc_hint_queue_get(eval(args[0]),))

elif cmd == 'enable_i3c':
    if len(args) != 1:
        print('enable_i3c requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_i3c(eval(args[0]),))

elif cmd == 'disable_i3c':
    if len(args) != 1:
        print('disable_i3c requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_i3c(eval(args[0]),))

elif cmd == 'i3c_controller_rstdaa':
    if len(args) != 3:
        print('i3c_controller_rstdaa requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_rstdaa(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_setaasa':
    if len(args) != 1:
        print('i3c_controller_setaasa requires 1 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_setaasa(eval(args[0]),))

elif cmd == 'i3c_controller_setdasa':
    if len(args) != 3:
        print('i3c_controller_setdasa requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_setdasa(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_setnewda':
    if len(args) != 3:
        print('i3c_controller_setnewda requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_setnewda(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_dodaa':
    if len(args) != 2:
        print('i3c_controller_dodaa requires 2 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_dodaa(eval(args[0]), eval(args[1]),))

elif cmd == 'i3c_controller_disec':
    if len(args) != 3:
        print('i3c_controller_disec requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_disec(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_enec':
    if len(args) != 2:
        print('i3c_controller_enec requires 2 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_enec(eval(args[0]), eval(args[1]),))

elif cmd == 'i3c_controller_getpid':
    if len(args) != 3:
        print('i3c_controller_getpid requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_getpid(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_getbcr':
    if len(args) != 3:
        print('i3c_controller_getbcr requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_getbcr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_getdcr':
    if len(args) != 3:
        print('i3c_controller_getdcr requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_getdcr(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_getstatus':
    if len(args) != 3:
        print('i3c_controller_getstatus requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_getstatus(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_add_device':
    if len(args) != 3:
        print('i3c_controller_add_device requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_add_device(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_get_devices':
    if len(args) != 1:
        print('i3c_controller_get_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_get_devices(eval(args[0]),))

elif cmd == 'i3c_read_device':
    if len(args) != 5:
        print('i3c_read_device requires 5 args')
        sys.exit(1)
    pp.pprint(client.i3c_read_device(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'i3c_read_reg':
    if len(args) != 6:
        print('i3c_read_reg requires 6 args')
        sys.exit(1)
    pp.pprint(client.i3c_read_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'i3c_write_device':
    if len(args) != 5:
        print('i3c_write_device requires 5 args')
        sys.exit(1)
    pp.pprint(client.i3c_write_device(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'i3c_write_reg':
    if len(args) != 6:
        print('i3c_write_reg requires 6 args')
        sys.exit(1)
    pp.pprint(client.i3c_write_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'i3c_controller_add_i2c_device':
    if len(args) != 3:
        print('i3c_controller_add_i2c_device requires 3 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_add_i2c_device(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'i3c_controller_get_i2c_devices':
    if len(args) != 1:
        print('i3c_controller_get_i2c_devices requires 1 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_get_i2c_devices(eval(args[0]),))

elif cmd == 'i3c_controller_remove_device':
    if len(args) != 2:
        print('i3c_controller_remove_device requires 2 args')
        sys.exit(1)
    pp.pprint(client.i3c_controller_remove_device(eval(args[0]), eval(args[1]),))

elif cmd == 'i3c_legacy_i2c_read_device':
    if len(args) != 5:
        print('i3c_legacy_i2c_read_device requires 5 args')
        sys.exit(1)
    pp.pprint(client.i3c_legacy_i2c_read_device(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'i3c_legacy_i2c_read_reg':
    if len(args) != 6:
        print('i3c_legacy_i2c_read_reg requires 6 args')
        sys.exit(1)
    pp.pprint(client.i3c_legacy_i2c_read_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'i3c_legacy_i2c_write_device':
    if len(args) != 5:
        print('i3c_legacy_i2c_write_device requires 5 args')
        sys.exit(1)
    pp.pprint(client.i3c_legacy_i2c_write_device(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'i3c_legacy_i2c_write_reg':
    if len(args) != 6:
        print('i3c_legacy_i2c_write_reg requires 6 args')
        sys.exit(1)
    pp.pprint(client.i3c_legacy_i2c_write_reg(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
