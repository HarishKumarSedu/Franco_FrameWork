# Parse command line arguments
array set optional [list -hw_server "" -hw_device "" -bit_file "" -hw_target "" -speed "" {*}$argv]
set hw_server $optional(-hw_server)
set hw_device $optional(-hw_device)
set bit_file $optional(-bit_file)
set hw_target $optional(-hw_target)
set speed $optional(-speed)

# Program the hardware device with the bit file provided
proc programHwDevice {hw_device bit_file} {
	current_hw_device [get_hw_devices $hw_device]
	refresh_hw_device -update_hw_probes false [lindex [get_hw_devices $hw_device] 0]
	set_property PROBES.FILE {} [get_hw_devices $hw_device]
	set_property FULL_PROBES.FILE {} [get_hw_devices $hw_device]
	set_property PROGRAM.FILE $bit_file [get_hw_devices $hw_device]
	program_hw_devices [get_hw_devices $hw_device]
}

# Set up the hardware target with the speed provided
proc setUpHwTarget {hw_target speed} {
	if {[string match "2*" $hw_target]} {
		current_hw_target [get_hw_targets */xilinx_tcf/Digilent/$hw_target]
	    set_property PARAM.FREQUENCY $speed [get_hw_targets */xilinx_tcf/Digilent/$hw_target]
	} elseif {[string match "0*" $hw_target]} {
		current_hw_target [get_hw_targets */xilinx_tcf/Xilinx/$hw_target]
	    set_property PARAM.FREQUENCY $speed [get_hw_targets */xilinx_tcf/Xilinx/$hw_target]
	} else {
	    current_hw_target [get_hw_targets */xilinx_tcf/$hw_target]
	    set_property PARAM.FREQUENCY $speed [get_hw_targets */xilinx_tcf/$hw_target]
	}
}

# Below sequence can be found in the Vivado Hardware Manager GUI (Tcl Console) when programming device manually
open_hw
connect_hw_server -url $hw_server
if {$hw_target eq "auto"} {
	set hw_targets [get_hw_targets]
    set found 0
	for {set i 0} {$found eq 0 && $i < [llength $hw_targets]} {incr i} {
		current_hw_target [lindex $hw_targets $i]
		set_property PARAM.FREQUENCY $speed [lindex $hw_targets $i]
		open_hw_target
		set hw_devices [get_hw_devices]
		for {set j 0} {$found eq 0 && $j < [llength $hw_devices]} {incr j} {
			# Check if current hardware target contains the requested hardware device
			if {[lindex $hw_devices $j] eq $hw_device} {
				incr found
				programHwDevice $hw_device $bit_file
			}
		}
		close_hw_target
	}
} else {
	setUpHwTarget $hw_target $speed
	open_hw_target
	programHwDevice $hw_device $bit_file
	close_hw_target
}
disconnect_hw_server [current_hw_server]
close_hw