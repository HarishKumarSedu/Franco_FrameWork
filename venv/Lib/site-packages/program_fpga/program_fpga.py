# This script programs the FPGA with the image provided. Can be done through JTAG or cldbprog tool.
import os
import typer
import logging
import datetime
import subprocess

app = typer.Typer(add_completion=False, help='Try "program_fpga.py jtag --help" for jtag command help OR "program_fpga.py cldbprog --help" for cldbprog command help')
logger = logging.getLogger('program_fpga')

def set_logger(log):
    logger.setLevel(logging.INFO)
    set_handler(logging.StreamHandler())
    if log:
        set_handler(logging.FileHandler(filename='program_fpga.log', mode='w+'))

def set_handler(handler):
    handler_format = '%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(message)s'
    handler.setLevel(logging.INFO)
    handler.setFormatter(logging.Formatter(handler_format))
    logger.addHandler(handler)

@app.command()
def jtag(hw_device: str=typer.Argument(..., help='Hardware device name'),
          bit_file: str=typer.Argument(..., help='Bit programming file'),
         hw_target: str=typer.Argument('auto', help='Hardware target id'),
             speed: str=typer.Argument('auto', help='Programming speed'),
               log: bool=typer.Option(False, is_flag=True, help='Generate log')):
    """
    Program the FPGA through JTAG.                                              
    Usage example: python program_fpga.py jtag xcku085_1 e1697_00_1.bit Digilent/210299AFB247 30000000                                                                  
    Note: Get the hardware device and target names from the Vivado Hardware Manager GUI
    """
    set_logger(log)
    current_path = os.path.realpath(__file__)
    current_path = os.path.dirname(current_path)

    # Check Vivado Lab is installed and use latest version
    vivado_path = "C:\\Xilinx\\Vivado_Lab\\"
    if os.path.exists(vivado_path):
        if os.path.exists(bit_file):
            vivado_vers = [ver for ver in os.listdir(vivado_path) if os.path.isdir(os.path.join(vivado_path, ver))]
            vivado_root = vivado_path + vivado_vers[-1]
            
            digilent_speeds = ['15000000', '10000000', '7500000', '6000000', '5000000', '3750000', '3000000', '2000000', '1000000', '500000', '250000', '125000']
            xilinx_speeds = ['12000000', '6000000', '3000000', '1500000', '750000']
            speed_error = ['ERROR', 'not', 'valid', 'PARAM.FREQUENCY'] 
            if hw_target != 'auto':
                hw_target = hw_target[0].upper() + hw_target[1:]
            if speed != 'auto':
                speeds = [speed]
            elif 'Xilinx' in hw_target or hw_target.startswith('0'):
                speeds = xilinx_speeds
            else:
                speeds = digilent_speeds
            
            jtag_res = False
            for sel_speed in speeds:
                # Set up and run Vivado Lab tools to program a hardware target device
                setup_vivado = "%s\\bin\\setupEnv.bat %s\\bin XILINX_VIVADO" % (vivado_root, vivado_root)
                logger.info("Setting up Vivado '%s'" % (setup_vivado))
                
                loader = vivado_root + "\\bin\\loader.bat -exec vivado_lab -mode batch"
                tcl_cmd = "-tclargs -hw_server localhost:3121 -hw_device %s -bit_file %s -hw_target %s -speed %s" % (hw_device, bit_file, hw_target, sel_speed)
                load_vivado = '%s -source "%s\\program_fpga.tcl" %s' % (loader, current_path, tcl_cmd)
                logger.info("Loading Vivado '%s'" % (load_vivado))
             
                vivado_cmd = ['powershell.exe'] + setup_vivado.split() + [';'] + loader.split() + ['-source'] + ['"%s\\program_fpga.tcl"' % (current_path)] + tcl_cmd.split()

                if log:
                    tclout = open('tclout.log', 'w')
                    tclerr = open('tclerr.log', 'w')
                    pscall = subprocess.run(vivado_cmd, stdout=tclout, stderr=tclerr)
                    tclout.close()
                    tclerr.close()
                    with open('tclout.log') as tclout_file, open('tclerr.log') as tclerr_file:
                        for line in tclout_file:
                            logger.info(line.strip())
                        for line in tclerr_file:
                            logger.error(line.strip())
                    os.remove('tclout.log')
                    os.remove('tclerr.log')
                else:
                    pscall = subprocess.run(vivado_cmd, capture_output=True)
                                
                if pscall.returncode == 0:          
                    logger.info(hw_device + ' FPGA programmed successfully')
                    jtag_res = True
                    break
                elif not log and all(res in pscall.stderr.decode() for res in speed_error):
                    logger.info('Retry programming with a lower speed')
                else:
                    break
                
            if not jtag_res:
                logger.error(hw_device + ' FPGA programming failed')
            return jtag_res
        else:
            logger.error(" %s not found. Provide a valid bit file path." % (bit_file))
    else:
        logger.error(" %s not found. Download and install the Vivado Lab Edition tool accordingly." % (vivado_path))

@app.command()
def cldbprog(mcs_file: str=typer.Argument(..., help='Mcs programming file'),
                  log: bool=typer.Option(False, is_flag=True, help='Generate log')):
    """ Program the FPGA through cldbprog. """
    set_logger(log)
    current_path = os.path.realpath(__file__)
    current_path = os.path.dirname(current_path)
    
    # Check if mcs programming file exists
    if os.path.exists(mcs_file):
        cldbprog_res = False
        for channel in range(4):
            if channel == 0:
                cldbprog_cmd = "%s\\cldbprog_v0_7_release.exe -p %s" % (current_path, mcs_file)
            else:
                logger.info('Trying with FTDI MPSSE channel ' + str(channel))
                cldbprog_cmd = "%s\\cldbprog_v0_7_release.exe -p %s -n %s" % (current_path, mcs_file, channel)
            logger.info(cldbprog_cmd)
            
            if log:
                sout = open('sout.log', 'w')
                serr = open('serr.log', 'w')
                scall = subprocess.run(cldbprog_cmd, stdout=sout, stderr=serr)
                sout.close()
                serr.close()
                with open('sout.log') as sout_file, open('serr.log') as serr_file:
                    for line in sout_file:
                        logger.info(line.strip())
                    for line in serr_file:
                        logger.error(line.strip())
                os.remove('sout.log')
                os.remove('serr.log')
            else:
                scall = subprocess.run(cldbprog_cmd)
        
            if scall.returncode == 0:
                logger.info('FPGA programmed successfully')
                cldbprog_res = True
                break 
        if not cldbprog_res:
            logger.error('FPGA programming failed')
        return cldbprog_res
    else:
        logger.error(" %s not found. Provide a valid mcs file path." % (mcs_file))

def main():
    app()

if __name__ == '__main__':
    app()
