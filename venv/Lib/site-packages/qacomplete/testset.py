#
# (c) 2018 Cirrus Logic, Inc.
#
# Author: Daniel Silverstone <daniel.silverstone@cirrus.com>
#
# Owner: SQA
#
# This code is proprietary and should not be shared outside of Cirrus
#

"""
Test sets group tests together into useful suites or campaigns.  For example
you may have a smoke test set, an "always ci" test set, and a "nightly" test
set.
"""

from .basiciterable import BasicIterable
from .basicobject import BasicObject
from .testrun import Testrun
from .folder import Folders
import datetime


class Testset(BasicObject):
    """
    A test set in QA Complete is a container which references tests in its
    containing project.  Test sets can be set up for a test run.
    """
    apiver = "v1"
    nameproperty = "title"

    def __init__(self, connection, basis, testset_id=None, release_id=None, content=None):
        if release_id:
            resource_id = release_id
        else:
            resource_id = testset_id
        super(Testset, self).__init__(connection=connection,
                                      basis=basis,
                                      resource_id=resource_id,
                                      content=content)

        self.ts_custom_fields = {}
        if 'custom_fields' in self.content:
            for custom_field in self.content['custom_fields']:
                for key, value in custom_field.items():
                    if key == 'id':
                        continue
                    elif key == 'value':
                        field_value = value
                    elif key == 'name':
                        field_name = value
                self.ts_custom_fields[field_name] = field_value

    @property
    def title(self):
        """
        The title of the test set
        """
        return self.content["title"]

    @property
    def id(self):
        """
        Test set id
        """
        return self.content["id"]

    @property
    def is_sequential(self):
        """
        Is sequential run the Tests in Test Set
        """
        return self.content["is_sequential"]

    def start_run(self, release_id=None, configuration=None):
        """
        Start a new test run.  This will create a test run on the server
        and return the new :class:`qacomplete.testrun.Testrun` object
        """
        newbias = "projects/{}/testruns".format(self.content["project_id"])
        testrun_data = {
                            "test_set_id": self.content["id"],
                            "ForceNewRunCreation": True # Create new run ID for every Test Set Run.
                        }
        if release_id:
            testrun_data["ReleaseId"] = str(release_id)
        if configuration:
            for config_name, config_id in configuration.items():
                testrun_data["ConfigurationName"] = config_name
                testrun_data["TestConfigId"] = config_id
        response = self.connection.post("v2", newbias, testrun_data)
        return Testrun(connection=self.connection,
                       basis=newbias,
                       content=response,
                       ts_custom_fields=self.ts_custom_fields)

    def append_test(self, item):
        """
        Add a test item to this Testset.
        """
        self.append_tests([item,])

    def append_tests(self, items):
        """
        Add test items to this Testset.
        """
        newTestJson={
            "Items": []
        }

        for item in items:
            newTestJson["Items"].append(
                {
                "TestId": item.content["id"],
                "IsActive": True,
                }
            )

        newTestJson = self.connection.post(
            apiver=self.apiver, resource=self.uriadd("items"), body=newTestJson)

    def add_test_in_testset(self, test_id):
        """
        append test items to this Testset.
        """
        newTestJson={"Items": {"TestId": test_id,"IsActive": True}}
        newTestJson = self.connection.post(
            apiver=self.apiver, resource=self.uriadd("items"), body=newTestJson)


class Testsets(BasicIterable):
    """
    This iterable represents the list of testsets to which the user has
    any form of access in the given project
    """
    objectclass = Testset

    def __init__(self, connection, resource):
        super(Testsets, self).__init__(connection=connection,
                                       resource=resource)

    @property
    def folders(self):
        """
        The :class:`qacomplete.folder.folders` for the project
        """
        project=self.resource.split('/')[1]
        return Folders(connection=self.connection,
                       resource="projects/{}/TestSets/folders".format(project))

    def add_testset(self, title, folder = None):
        """
        Add a testset, to the projects testset library
        The returned object is a :class:`qacomplete.testet.Testset` instance..
        """
        newtestsetjson={
            "Title":str(title),
            "StatusCode":"Approved"
            }

        if folder:
            newtestsetjson['FolderId'] = folder.id

        newTestsetContent = self.connection.post(
            apiver=self.apiver, resource=self.resource, body=newtestsetjson)

        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=newTestsetContent)

    def add_test_in_testset(self, testset_id, test_id):
        """
        append test items to this Testset.
        """
        new_test_json = {"Items": [{"TestId": test_id, "IsActive": True}]}
        newTestJson = self.connection.post(
            apiver=self.apiver, resource=self.resource + "/" + str(testset_id) + "/items", body=new_test_json)
        return newTestJson

    def add_testset_by_json(self, test_set_json):
        """
        Add a testset, to the projects testset library
        The returned object is a :class:`qacomplete.testet.Testset` instance..
        """
        new_test_set_content = self.connection.post(
            apiver=self.apiver, resource=self.resource, body=test_set_json)

        return new_test_set_content

    def add_release(self, title):
        """
        Creates a new release in the specified qac project.
        """
        eststartdate = datetime.date.today().isoformat()
        estfinishdate = (datetime.date.today() + datetime.timedelta(365/12)).isoformat()
        newtestjson={
            "ReleaseType": "Release",
            "Title": str(title),
            "StatusCode": "In Progress",
            "IsActive": True,
            "EstStartDate": str(eststartdate),
            "EstFinishDate": str(estfinishdate)
        }
        newTestContent = self.connection.post(
            apiver=self.apiver, resource=self.resource, body=newtestjson)

        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=newTestContent)

    def add_release_by_json(self, input_json):
        """
        Creates a new release in the specified qac project.
        """
        new_record_data = self.connection.post(apiver=self.apiver, resource=self.resource, body=input_json)
        return new_record_data

    def link_release_to_testset(self, id, release_id):
        """
        Link release to the project specific TestSet
        returns a JSON object with information about the tests.
        """
        release_json = {
            "LinkedEntityCode": "Releases",
            "LinkedEntityId": release_id
        }
        TestContent = self.connection.post(
            apiver=self.apiver, resource=self.resource+'/'+str(id) + "/linkeditems", body=release_json)
        return TestContent

    def get_testset_link_details(self, id):
        """
        Get the all link details of the specified TestSet
        returns a JSON object with information about the tests.
        """
        TestContent = self.connection.request(
            apiver=self.apiver, resource=self.resource+'/'+str(id) + "/linkeditems")
        return TestContent

    def get_tests_list(self, testset_id):
        """
        Returns a list of tests registered in QAComplete testset. This operation responds with HTTP status.

        Parameters:
        testset_id: Specify TestSet Id.

        Returns:
        returns a JSON object with information about the tests in testset.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource + "/" + str(testset_id) + "/items")
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource + "/" + str(testset_id)
                                                                               + "/items" + '?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource + "/" + str(testset_id) + "/items")
        return get_content

    def delete_testset_items(self, testset_id):
        """
        Delete TestSet items in QAComplete testset. This operation responds with HTTP status.

        Parameters:
        testset_id: Specify TestSet Id.

        Returns:
        returns a JSON object with information about the tests in testset.
        """
        newTestsetContent = self.connection.delete(
            apiver=self.apiver, resource=self.resource + "/" + str(testset_id) + "/items/")
        return newTestsetContent

    def update_testset_item(self, testset_id, seq_id, testset_body):
        """
        Update TestSet item in QAComplete testset. This operation responds with HTTP status.

        Parameters:
        testset_id: Specify TestSet Id.
        seq_id: Specify sequence of the Test.
        testset_body: Specify JSON

        Returns:
        returns a JSON object with information about the tests in testset.
        """
        newTestsetContent = self.connection.patch(
            apiver=self.apiver, resource=self.resource + "/" + str(testset_id) + "/items/" + str(seq_id), body=testset_body)
        return newTestsetContent

    def get_testset(self, testset_id):
        """
        Return specified TestSet registered in QAComplete. This operation responds with HTTP status.

        Parameters:
        testset_id: Specify Test Set Id

        Returns:
        returns a JSON object with information about the testset.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource + "/" + str(testset_id))
        return get_content

    def get_testsets(self):
        """
        Returns a list of testsets registered in QAComplete. This operation responds with HTTP status.

        Parameters:
        None.

        Returns:
        returns a JSON object with information about the tests in testset.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource + '?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        return get_content

    def link_testset_to_config(self, id, config_id):
        """
        Link TestSet to the project specific Configurations
        returns a JSON object with information about the tests.
        """
        config_json = {
            "LinkedEntityCode": "TestConfigurations",
            "LinkedEntityId": config_id
        }
        TestContent = self.connection.post(
            apiver=self.apiver, resource=self.resource + '/' + str(id) + "/linkeditems", body=config_json)
        return TestContent

    def get_testset_link_details(self, id):
        """
        Get the Test Set linked items details.
        returns a JSON object with information about the tests.
        """
        TestContent = self.connection.request(
            apiver=self.apiver, resource=self.resource + '/' + str(id) + "/linkeditems")
        return TestContent


