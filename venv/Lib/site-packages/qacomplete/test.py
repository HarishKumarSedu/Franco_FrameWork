# (c) 2019 Cirrus Logic, Inc.
#
# Author: Daniel Silverstone <daniel.silverstone@cirrus.com>
#
# Owner: SQA
#
# This code is proprietary and should not be shared outside of Cirrus

"""
A test is the fundamental part of QAC's testing API.  This is where the
custom fields for the testing process hang, and where such information can
be managed in order to parameterise testing in a campaign.
"""

from .basiciterable import BasicIterable
from .basicobject import BasicObject
from .folder import Folders

class Test(BasicObject):

    """
    A test in QA Complete is a handle on which we can place various properties.
    Tests form into test sets and those can be run in test runs.
    """

    apiver = "v1"
    nameproperty = "title"

    def __init__(self, connection, basis, test_id=None, content=None):
        super(Test, self).__init__(connection=connection,
                                   basis=basis,
                                   resource_id=test_id,
                                   content=content)

    @property
    def title(self):
        """
        The title of the test
        """
        return self.content["title"]

    @property
    def folder(self):
        """
        folder_name of the test
        """
        return self.content["folder_name"]

    @property
    def status(self):
        """
        Returns the status of the test
        """
        return self.content["status"]

    @property
    def customfields(self):
        """
        The custom fields for the test, returned as a dictionary.
        """
        ret = {}
        for field in self.content.get("custom_fields", []):
            try:
                ret[field["name"]] = field["value"]
                ret.update(custom_id=field["id"])
            except KeyError:
                pass
        return ret

    @property
    def customfields_list(self):
        """
        The custom fields for the test, returned as a dictionary.
        """
        ret = {}
        for field in self.content.get("custom_fields", []):
            try:
                ret[field["name"]] = field["id"]
            except KeyError:
                pass
        return ret

    @property
    def get_all_custom_fields(self):
        """
        Gets all custom fileds info as a list of dictionaries.
        """
        return self.content.get("custom_fields", [])


class Tests(BasicIterable):

    """
    This iterable represents the list of tests to which the user has
    any form of access in the given project
    """

    objectclass = Test
    api_version = "v2"

    def __init__(self, connection, resource):
        super(Tests, self).__init__(connection=connection,
                                    resource=resource)
    @property
    def folders(self):
        """
        The :class:`qacomplete.testset.Testsets` for the project
        """

        project=self.resource.split('/')[1]
        return Folders(connection=self.connection,
                        resource="projects/{}/Tests/folders".format(project))

    def add_test(self, test_body,folder= None):
        """
        Add a test, to the projects tests library
        The returned object is a :class:`qacomplete.test.Test` instance..
        """
        if folder:
            test_body['FolderId']=folder.id
            
        newTestContent = self.connection.post(
            apiver=self.api_version, resource=self.resource, body=test_body)

        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=newTestContent)

    def add_folder(self, folder_body):
        """
        Add a folder in project tests library
        """
        new_folder_content = self.connection.post(
            apiver=self.api_version, resource=self.resource + "/folders", body=folder_body)
        return new_folder_content

    def get_folders(self):
        """
        Get all folders in Test Library
        """
        new_folder_content = self.connection.request(apiver=self.api_version, resource=self.resource + "/folders")
        return new_folder_content

    def get_test(self, id):
        """
        Get specified QAC Test case details
        """
        TestContent = self.connection.request(apiver=self.api_version, resource=self.resource+'/'+str(id))
        return TestContent

    def get_tests(self):
        """
        Returns a list of tests registered in QAComplete testset. This operation responds with HTTP status.

        Parameters:
        None.

        Returns:
        returns a JSON object with information about the tests.
        """
        get_content = self.connection.request(apiver=self.api_version, resource=self.resource)
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource +'?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        return get_content

    def update_test(self, id, testjson):
        """
        Update custom fields, to the projects tests library

        The returned object is a :class:`qacomplete.test.Test` instance..
        """
        TestContent = self.connection.patch(
            apiver=self.api_version, resource=self.resource+'/'+str(id), body=testjson)
        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=TestContent)

    def add_note(self, project_id, test_id, notes=None):
        """
        Add given note to particular test case
        """
        if notes is not None:
            notes_basis = "projects/%d/tests/%d/notes" % (project_id, test_id)
            notes_data = {"Description": notes}
            self.connection.post(apiver=self.apiver,
                                                  resource=notes_basis,
                                                  body=notes_data)

    def get_testclass(self, id):
        """
        Get specified QAC Test case class instance.
        """
        TestContent = self.connection.request(apiver=self.apiver, resource=self.resource+'/'+str(id))
        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=TestContent)

    def delete_test(self, id):
        """
        Get specified QAC Test case class instance.
        """
        TestContent = self.connection.delete(apiver=self.api_version, resource=self.resource+'/'+str(id))
        return self.objectclass(connection=self.connection,
                                basis=self.resource,
                                content=TestContent)

    def link_release_to_test(self, id, release_id):
        """
        Link release to the project specific tests library
        returns a JSON object with information about the tests.
        """
        release_json = {
            "LinkedEntityCode": "Releases",
            "LinkedEntityId": release_id
        }
        TestContent = self.connection.post(
            apiver=self.apiver, resource=self.resource+'/'+str(id) + "/linkeditems", body=release_json)
        return TestContent

    def link_test_to_req(self, id, req_id):
        """
        Link release to the project specific tests library
        returns a JSON object with information about the tests.
        """
        release_json = {
            "LinkedEntityCode": "FunctionalSpecs",
            "LinkedEntityId": req_id
        }
        TestContent = self.connection.post(
            apiver=self.apiver, resource=self.resource+'/'+str(id) + "/linkeditems", body=release_json)
        return TestContent

    def get_test_link_details(self, id):
        """
        Link release to the project specific tests library
        returns a JSON object with information about the tests.
        """
        TestContent = self.connection.request(
            apiver=self.apiver, resource=self.resource+'/'+str(id) + "/linkeditems")
        return TestContent
