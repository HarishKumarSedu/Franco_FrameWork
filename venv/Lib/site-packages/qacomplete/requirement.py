#!/usr/bin/python
# Copyright (c) 2019 Cirrus Logic International (UK) Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license. The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
# (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
# that may appear in this document or any software that may be provided in
# association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic International
# (UK) Ltd or affiliated companies.
#
# @file   requirements.py
# @brief  In QAComplete, requirements are the items that describe the features you and other members of the development
# team want to add or enhance in the next versions of the project.
#
#
# @warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
########################################################################

"""
In QAComplete, requirements are the items that describe the features you and other members of the development team
want to add or enhance in the next versions of the project.
"""

from .basiciterable import BasicIterable
from .basicobject import BasicObject
from .folder import Folders


class Requirement(BasicObject):
    """
    A requirement in QA Complete is a handle on which we can place various properties and methods
    that include add requirements, update, delete and get the list of the requirements.
    """

    apiver = "v1"
    nameproperty = "title"

    def __init__(self, connection, basis, req_id=None, content=None):
        """
        Construct an iterable, taking the connection object for QA Complete.
        Parameters:
        @param connection - The connection to QAC.
        @param basis - basis of the requirement.
        @param req_id - Id of the requirement.
        @param content - Content of the requirement.

        Returns:
        None.
        """
        super(Requirement, self).__init__(connection=connection,
                                   basis=basis,
                                   resource_id=req_id,
                                   content=content)

    @property
    def title(self):
        """
        The title of the requirement
        """
        return self.content["title"]

    @property
    def folder(self):
        """
        folder_name of the requirement
        """
        return self.content["folder_name"]

    @property
    def status(self):
        """
        Returns the status of the requirement
        """
        return self.content["status"]

    @property
    def custom_fields(self):
        """
        The custom fields for the requirement, returned as a dictionary.
        """
        ret = {}
        for field in self.content.get("custom_fields", []):
            try:
                ret[field["name"]] = field["value"]
                ret.update(custom_id=field["id"])
            except KeyError:
                pass
        return ret


class Requirements(BasicIterable):

    """
    This iterable represents the list of requirements to which the user has
    any form of access in the given project
    """

    objectclass = Requirement

    def __init__(self, connection, resource):
        """
        Construct an iterable, taking the connection object for QA Complete.

        Parameters:
        @param connection - The connection to QAC.
        @param resource - resource of the requirement.

        Returns:
        None.
        """
        super(Requirements, self).__init__(connection=connection,
                                    resource=resource)

    @property
    def folders(self):
        """
        The :class:`qacomplete.requirement.Requirements` for the project
        """

        project = self.resource.split('/')[1]
        return Folders(connection=self.connection,
                        resource="projects/{}/Requirements/folders".format(project))

    def add_req(self, req_body, folder_id=None):
        """
        Adds a new requirement to QAComplete. This operation responds with HTTP status
        and returns a JSON object with information about the requirement.

        Parameters:
        @param req_body - Specify body of the requirement.
        @param folder_id - Specify folder id.

        Returns:
        returns a JSON object with information about the requirement.
        """
        if folder_id:
            req_body['FolderId'] = folder_id

        new_req_content = self.connection.post(apiver=self.apiver, resource=self.resource, body=req_body)
        return new_req_content

    def update_req(self, req_id, update_json):
        """
        Updates the specified requirements in the QAC project.

        Parameters:
        @param req_id - Specify requirement Id
        @param update_json - Specify updated JSON object.

        Returns:
        returns a JSON object with information about the requirement.
        """
        update_content = self.connection.patch(
            apiver=self.apiver, resource=self.resource+'/'+str(req_id), body=update_json)
        return update_content

    def delete_req(self, req_id):
        """
        Deletes the specified requirement from QAComplete.

        Parameters:
        @param req_id - Specify requirement Id

        Returns:
        On success, the operation returns an empty response with HTTP status code 200.
        """
        delete_content = self.connection.delete(apiver=self.apiver, resource=self.resource + '/' + str(req_id))
        return delete_content

    def get_req(self, req_id):
        """
        Returns a requirement by its ID.

        Parameters:
        @param req_id - Specify requirement Id

        Returns:
        returns a JSON object with information about the requirement.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource + '/' + str(req_id))
        return get_content

    def get_req_list(self):
        """
        Returns a list of requirements registered in QAComplete. This operation responds with HTTP status.

        Parameters:
        None.

        Returns:
        returns a JSON object with information about the requirements.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(
                apiver=self.apiver, resource=self.resource + '?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        return get_content
