#
# (c) 2018 Cirrus Logic, Inc.
#
# Author: Daniel Silverstone <daniel.silverstone@cirrus.com>
#
# Owner: SQA
#
# This code is proprietary and should not be shared outside of Cirrus
#

"""
Test runs are instances of running a test set against some software/hardware.
They are how results are recorded into QAC so that regressions and other reports
can be generated by the UI.
"""

from .basiciterable import BasicIterable
from .basicobject import BasicObject

from .test import Test


class Testrun(BasicObject):

    """
    A test run in QA Complete is a container which references tests in its
    containing project.  Test runs represent running those tests in a group.
    """

    apiver = "v2"
    nameproperty = "test_set_name"

    def __init__(self, connection, basis, testrun_id=None, content=None, ts_custom_fields=None):
        super(Testrun, self).__init__(connection=connection,
                                      basis=basis,
                                      resource_id=testrun_id,
                                      content=content)
        self.ts_custom_fields = ts_custom_fields

    @property
    def title(self):
        """
        The title of the test set that this run is for
        """
        title = None
        try:
            title = self.content["test_set_name"]
        except KeyError:
            pass
        return title

    @property
    def id(self):
        """
        Test run id
        """
        id = None
        try:
            id = self.content["id"]
        except KeyError:
            pass
        return id

    @property
    def status(self):
        """
        Run status
        """
        status = None
        try:
            status = self.content["status_code"]
        except KeyError:
            pass
        return status

    @property
    def items(self):
        """
        The :class:`qacomplete.testrun.TestrunItems` for this test run
        """
        return TestrunItems(connection=self.connection,
                            resource=self.uriadd("items"))

    @property
    def target(self):
        """
        The Target column of the test set
        """
        target = None
        try:
            target = self.ts_custom_fields["Target"]
        except (KeyError, TypeError):
            pass
        return target

    @property
    def os_platform(self):
        """
        The OS column of the test set
        """
        os_platform = None
        try:
            os_platform = self.ts_custom_fields["OS"]
        except (KeyError, TypeError):
            pass
        return os_platform

    @property
    def ap(self):
        """
        The 'AP' column of the test set
        """
        ap = None
        try:
            ap = self.ts_custom_fields["AP"]
        except KeyError:
            pass
        return ap

    @property
    def device(self):
        """
        The device column of the test set
        """
        device = None
        try:
            device = self.ts_custom_fields["device"]
        except (KeyError, TypeError):
            pass
        return device

    @property
    def configuration_name(self):
        """
        Gets run configuration
        """
        configuration_name = None
        try:
            configuration_name = self.content["configuration_name"]
        except (KeyError, TypeError):
            pass
        return configuration_name


class Testruns(BasicIterable):

    """
    This iterable represents the list of Testruns to which the user has
    any form of access in the given project
    """

    objectclass = Testrun

    def __init__(self, connection, resource):
        super(Testruns, self).__init__(connection=connection,
                                       resource=resource)

    def get_test_runs(self):
        """
        Returns a list of test runs in QAComplete project. This operation responds with HTTP status.

        Parameters:
        None.

        Returns:
        returns a JSON object with information about the test runs.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(apiver="v2", resource=self.resource +'?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver="v2", resource=self.resource)
        return get_content

    def get_testset_runs(self, offset, limit):
        """
        Returns a list of test runs in QAComplete project. This operation responds with HTTP status.

        Parameters:
        offset: Specify offset
        limit: Specify limit

        Returns:
        returns a JSON object with information about the test runs.
        """
        get_content = self.connection.request(apiver="v2", resource=self.resource + '?offset=' + str(offset)
                                              + '&limit=' + str(limit))
        return get_content

    def get_release_runs(self, release_name):
        """
        Returns a list of test runs associates with release name in QAComplete project. This operation responds with HTTP status.

        Parameters:
        release_name: Specify Release name

        Returns:
        returns a JSON object with information about the test runs.
        """
        get_content = self.connection.request(apiver="v2", resource=self.resource + '?Filter=release_name%3D%27'
                                                                    + str(release_name) + '%27')
        total_req = get_content['metadata']['result_set']['total']

        get_content = self.connection.request(apiver="v2", resource=self.resource + '?limit=' + str(total_req) +
                                                                    '&Filter=release_name%3D%27' + str(release_name)
                                                                    + '%27')
        return get_content

    def get_test_runitems(self, run_id):
        """
        Returns a list of test run items in QAComplete project test run. This operation responds with HTTP status.

        Parameters:
        run_id: Specify run Id.

        Returns:
        returns a JSON object with information about the tests.
        """
        get_content = self.connection.request(apiver="v2", resource=self.resource + '/' + str(run_id) + '/items')
        total_req = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_req >= 25:
            get_content = self.connection.request(apiver="v2", resource=self.resource + '/' + str(run_id) + '/items' +'?limit=' + str(total_req))
        else:
            get_content = self.connection.request(apiver="v2", resource=self.resource + '/' + str(run_id) + "/items")
        return get_content


class TestrunItem(BasicObject):

    """
    A test run item is an entry in a test run which refers to the test that
    was being run at that time.
    """

    apiver = "v2"
    nameproperty = "test_name"

    def __init__(self, connection, basis, testrunitem_id=None, content=None):
        super(TestrunItem, self).__init__(connection=connection,
                                          basis=basis,
                                          resource_id=testrunitem_id,
                                          content=content)

    @property
    def title(self):
        """
        The title of the test that this item is for
        """
        return self.content["test_name"]

    @property
    def status(self):
        """
        status of the test run item
        """
        return self.content["status_code"]

    @property
    def test(self):
        """
        The :class:`qacomplete.test.Test` itself
        """
        return Test(connection=self.connection,
                    basis="projects/%d/tests" % self.content["project_id"],
                    test_id=self.content["test_id"])

    def patch(self, status="Failed", runtime=0):
        """
        Patch this test item with its status and runtime
        """
        obj = {
            "StatusCode": status,
            "RunTime": int(runtime),
        }

        self.connection.patch(apiver=self.apiver, resource=self.uri, body=obj)

    def upload_report(self, report):
        """
        Upload a report to the server for this test item.

        The report must be a file-like object which contains MHTML
        """
        self.connection.post(
            apiver=self.apiver, resource=self.uriadd("report"), body=report)

    def upload_log(self, log):
        """
        Upload a test log to the server for this test item.

        The log must be a file-like object which contains NUnit XML
        """
        self.connection.post(
            apiver=self.apiver, resource=self.uriadd("log"), body=log)


class TestrunItems(BasicIterable):

    """
    This iterable represents the list of Testrun items to which the user has
    any form of access in the given project
    """

    objectclass = TestrunItem

    def __init__(self, connection, resource):
        super(TestrunItems, self).__init__(connection=connection,
                                           resource=resource)
