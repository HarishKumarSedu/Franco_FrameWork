#
# (c) 2018 Cirrus Logic, Inc.
#
# Author: Daniel Silverstone <daniel.silverstone@cirrus.com>
#
# Owner: SQA
#
# This code is proprietary and should not be shared outside of Cirrus
#

"""
In QA Complete, projects effectively encapsulate the tests, testruns, testsets,
etc.  They can be used to group things together nicely and provide an access
control point within QAC.
"""

from .basiciterable import BasicIterable
from .basicobject import BasicObject

from .testset import Testsets
from .testrun import Testruns, Testrun
from .test import Tests
from .requirement import Requirements


class Project(BasicObject):

    """
    A Project in QA Complete acts as a container for tests, test sets, and
    test runs.
    """

    apiver = "v1"
    nameproperty = "proj_name"

    def __init__(self, connection, basis, project_id=None, content=None):
        super(Project, self).__init__(connection=connection,
                                      basis=basis,
                                      resource_id=project_id,
                                      content=content)

    @property
    def name(self):
        """
        The name of the project
        """
        return self.content["proj_name"]

    @property
    def project_id(self):
        """
        The Id of the project
        """
        return self.content["id"]

    @property
    def testsets(self):
        """
        The :class:`qacomplete.testset.Testsets` for the project
        """
        return Testsets(connection=self.connection,
                        resource=self.uriadd("testsets"))

    @property
    def requirements(self):
        """
        The :class:`qacomplete.requirement.Requirements` for the project
        """
        return Requirements(connection=self.connection, resource=self.uriadd("requirements"))

    @property
    def releases(self):
        """
        The :class:`qacomplete.testset.Testsets` for the project
        """
        return Testsets(connection=self.connection,
                        resource=self.uriadd("releases"))

    @property
    def testruns(self):
        """
        The :class:`qacomplete.testrun.Testruns` for the project
        """
        return Testruns(connection=self.connection,
                        resource=self.uriadd("testruns"))

    def testrun(self, run_id):
        """
        The :class:`qacomplete.testrun.Testrun` for the run_id of the project
        """
        return Testrun(connection=self.connection,
                       basis=self.uriadd("testruns"),
                       testrun_id=run_id)

    @property
    def tests(self):
        """
        The :class:`qacomplete.test.Tests` for the project
        """
        return Tests(connection=self.connection,
                     resource=self.uriadd("tests"))

    def linkeditems(self, entity_code, entity_id):
        """
        Gets linked items of an entity.

        @param: str - entity_code, ex: Tests, TestSets, TestSteps, etc..
        @param: int - entity_id Id of the entity.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.uriadd(str(entity_code) + "/" +
                                                                                       str(entity_id) + "/linkeditems"))
        total_items = get_content['metadata']['result_set']['total']
        get_content = self.connection.request(
            apiver=self.apiver, resource=self.uriadd(str(entity_code) + "/" + str(entity_id) + "/linkeditems?limit=" + str(total_items)))

        return get_content

    def get_releases(self):
        """
        Gets releases in the project.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.uriadd("releases"))
        total_releases = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count.
        if total_releases >= 25:
            get_content = self.connection.request(
                apiver=self.apiver, resource=self.uriadd("releases") + '?limit=' + str(total_releases))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.uriadd("releases"))
        return get_content

    def get_release_records(self, offset, limit):
        """
        Returns a list of release records in QAComplete project specified offset & limit.
        This operation responds with HTTP status.

        Parameters:
        offset: Specify offset
        limit: Specify limit

        Returns:
        returns a JSON object with information about the releases.
        """
        get_content = self.connection.request(
            apiver=self.apiver, resource=self.uriadd("releases") + '?offset=' + str(offset) + '&limit=' + str(limit))
        return get_content

    def get_release_folders(self):
        """
        Get all folders in Releases
        """
        folder_api_version = "v2"
        new_folder_content = self.connection.request(apiver=folder_api_version, resource=self.uriadd("releases/folders"))
        return new_folder_content

    def add_releases_folder_by_json(self, folder_body):
        """
        Add a folder in project with specified JSON data
        """
        folder_api_version = "v2"
        new_folder_content = self.connection.post(apiver=folder_api_version, resource=self.uriadd("releases/folders"),
                                                  body=folder_body)
        return new_folder_content

    def get_configurations(self):
        """
        Gets configurations in the project.
        """
        self.apiver = "v2"
        get_content = self.connection.request(apiver=self.apiver, resource=self.uriadd("configurations"))
        total_configs = get_content['metadata']['result_set']['total']
        get_content = self.connection.request(
                apiver=self.apiver, resource=self.uriadd("configurations") + '?limit=' + str(total_configs))
        return get_content

    def get_config_folders(self):
        """
        Get all folders in Configurations
        """
        folder_api_version = "v2"
        new_folder_content = self.connection.request(apiver=folder_api_version, resource=self.uriadd("TestConfigurations/folders"))
        return new_folder_content

    def add_config_folder_by_json(self, folder_body):
        """
        Add a folder in project with specified JSON data
        """
        folder_api_version = "v2"
        new_folder_content = self.connection.post(apiver=folder_api_version, resource=self.uriadd("TestConfigurations/folders"),
                                                  body=folder_body)
        return new_folder_content

class Projects(BasicIterable):

    """
    This iterable represents the list of projects to which the user has
    any form of access
    """

    objectclass = Project

    def __init__(self, connection, resource):
        super(Projects, self).__init__(connection=connection,
                                       resource=resource)
