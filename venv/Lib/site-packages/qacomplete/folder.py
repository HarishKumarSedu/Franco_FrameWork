#!/usr/bin/python
# Copyright (c) 2018 Cirrus Logic International (UK) Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license. The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
# (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
# that may appear in this document or any software that may be provided in
# association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic International
# (UK) Ltd or affiliated companies.
#
# @file   folder.py
# @brief  Folders group most things together so you can more easily group them.
#
#
# @warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
########################################################################
from .basiciterable import BasicIterable
from .basicobject import BasicObject


class Folder(BasicObject):

    """
    A Folder in QA Complete is a grouping mechanism
    """

    apiver = "v2"

    def __init__(self, connection, basis, folder_id=None, content=None):
        super(Folder, self).__init__(connection=connection,
                                      basis=basis,
                                      resource_id=folder_id,
                                      content=content)


class Folders(BasicIterable):

    """
    This iterable represents the list of Folders to which the user has
    any form of access in the given project
    """

    objectclass = Folder
    apiver = "v2"

    def __init__(self, connection, resource):
        super(Folders, self).__init__(connection=connection,
                                       resource=resource)

    def add_folder(self, title, parent_name=None, description=None):
        """
        Add a folder, to the projects entity.

        Parameters:
        @param title - Specify Title of the folder
        @param parent_name - Specify name of the parent folder
        @param description - Specify description of the folder

        Returns:
        returns a JSON object with information about the newly added folder.

        """
        newtestsetjson = {
            "FolderName": str(title),
            "IsActive": True
        }
        if parent_name:
            newtestsetjson['ParentName'] = parent_name
        if description:
            newtestsetjson['Description'] = description

        new_folder_content = self.connection.post(
            apiver=self.apiver, resource=self.resource, body=newtestsetjson)

        return new_folder_content

    def delete_folder(self, folder_id):
        """
        Deletes the specified folder from QAComplete.

        Parameters:
        @param folder_id - Specify folder Id

        Returns:
        On success, the operation returns an empty response with HTTP status code 200.
        """
        return self.connection.delete(apiver=self.apiver, resource=self.resource + '/' + str(folder_id))

    def get_folder_list(self):
        """
        Returns a list of requirements registered in QAComplete. This operation responds with HTTP status.

        Parameters:
        None

        Returns:
        returns a JSON object with information about the folders.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        total_folders = get_content['metadata']['result_set']['total']

        # Get API call truncates to 25 items by default,
        # so we need to increase this limit value by assigning total count
        if total_folders >= 25:
            get_content = self.connection.request(
                apiver=self.apiver, resource=self.resource + '?limit=' + str(total_folders))
        else:
            get_content = self.connection.request(apiver=self.apiver, resource=self.resource)
        return get_content

    def get_folder(self, folder_id):
        """
        Returns a specific requirement registered in QAComplete. This operation responds with HTTP status.

        Parameters:
        @param folder_id - Specify folder Id

        Returns:
        returns a JSON object with information about the folders.
        """
        get_content = self.connection.request(apiver=self.apiver, resource=self.resource + '/' + str(folder_id))
        return get_content

    def add_folder_by_json(self, folder_body):
        """
        Add a folder in project with specified JSON data
        """
        new_folder_content = self.connection.post(apiver=self.apiver, resource=self.resource, body=folder_body)
        return new_folder_content

