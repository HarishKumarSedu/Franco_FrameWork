#!/usr/bin/env python
"""
@brief
Python Resource Claimer

@details
@b Description
This  module provides the following features
- Support to specify resource requirements
- method to claim resources, instantiate and start the resource xmlrpc session.

@b Usage
@code
self.claimer = ResourceClaimer(list_test_heads)
self.claimer.claim(list_of_required_resources)

To run the unit test:
./resource_claim_handler.py --unittest
@endcode
"""

import os
import sys
import socket

from unified_modules.test_support.testheadclient import TestHeadClient, TestHeadClientError
import unified_modules.test_support.testlogger as logging
from unified_modules.test_support.testresourcebase import ResourceError
from unified_modules.test_support.testutils import get_stack_trace


class ResourceRequirement(object):
    def __init__(self,
                 tag,
                 class_of_resource,
                 name=None,
                 res_type=None,
                 subtypes=None):
        """
        Attributes of the required resource
        @param tag - name that will be used to address the resource
        @param class_of_resource - class to be used to access the resource (See resource_base)

        resource must be named any of these names
        @param name - list of possible names of the resource

        resource must be any of these types
        @param res_type - list of possible types of resource required:

        resource must be at least all of these subtypes
        @param subtypes - list of possible sub-types of resource required
        """
        # Store tag, type and attributes
        self.tag = tag
        self.class_of_resource = class_of_resource
        self.res_type = res_type
        # TODO, add support for this in the config xml parser
        if subtypes is None:
            self.subtypes = []
        elif not isinstance(subtypes, list):
            self.subtypes = [subtypes]

        if name is None:
            self.name = []
        elif not isinstance(name, list):
            self. name = [name]


class ResourceClaimer(object):
    """Search for a test head on the pool of test heads and claim it.
    """
    def __init__(self, test_head=None, timeout=3000):
        """
        @param test_head - location of config file or list of host:port strings for
        tests or None for config file to be found using environment variable"""
        self.testhead_client = None
        self.log = logging.getLogger(self.__class__.__name__)
        self.timeout = timeout
        self.claimed_resources = {}
        self.resource_pool = {}

        if test_head is None:
            self.test_head = os.environ.get('TEST_HEAD')
            if not self.test_head:
                hostname = socket.gethostname()
                host = socket.gethostbyname(hostname)
                default_host = '%s:8888' % host
                self.log.info("TEST_HEAD not set, using default %s", default_host)
                self.test_head = default_host

        self._read_resource_pool()

    def _read_resource_pool(self):
        """Connect to each testhead identified to get resource pool info
        Possible optimisation this can be done in parallel on all testds"""

        self.resource_pool = {}
        (host, port) = self.test_head.split(':')
        try:
            self.testhead_client = TestHeadClient(host, port)
            testhead_resources = self.testhead_client.list()
            # Add to possible resources with testhead ref added to key and resource
            for (resource_type, resource_config) in testhead_resources.items():
                self.resource_pool[resource_type] = {}
                self.resource_pool[resource_type]['config'] = resource_config
                # self.resource_pool[resource_type]['testhead'] = testhead
        except TestHeadClientError:
            self.log.info("Unable to connect to %s:%s", host, port)

    def claim(self, required_resources):
        """Claim the test heads and the required resource pool

        @param required_resources - list of ResourceRequirements that details needed resources
        @return list of resources - list of claimed resources on the test head
        """
        self.log = logging.getLogger("ResourceClaimer")
        self.claim_resources(required_resources)
        return self.claimed_resources

    def additional_claims(self, required_resources):
        """Claim the additional required resources

        @param required_resources - list of ResourceRequirements that details needed resources
        @return list of resources - list of claimed resources on the test head
        """
        self.claim_resources(required_resources)
        return self.claimed_resources

    def claim_resources(self, required_resources):
        """Claim the test heads and the required resource pool

        @param required_resources - list of ResourceRequirements that details needed resources
        @return list of resources - list of claimed resources on the test head
        """

        if not isinstance(required_resources, list):
            required_resources = [required_resources]

        resource = None
        for req_resource in required_resources:
            try:
                matching_resource = self.resource_pool[req_resource.res_type]
                resource = req_resource.class_of_resource(res_type=req_resource.res_type,
                                                          tag=req_resource.tag,
                                                          testhead=self.testhead_client,
                                                          config=matching_resource['config'])
                rpc_resource = resource.create_xmlrpc()
                rpc_resource.tag = req_resource.tag
                rpc_resource.resource_base = resource
                self.claimed_resources[req_resource.tag] = rpc_resource
                resource = None
            except (TestHeadClientError, ResourceError):
                self.log.warning("Something went wrong when claiming resource %s", req_resource.res_type)
                self.log.warning("Stacktrace - %s", get_stack_trace())
                self.log.info("Release any claimed resources")
                for res in self.claimed_resources.values():
                    res.stop()
                    res.resource_base.stop()
                if resource:
                    resource.stop()
                self.release_testhead()
                raise

        return self.claimed_resources

    def release_testhead(self):
        try:
            self.testhead_client.quit()
            self.testhead_client.released = True
        except (EOFError, TestHeadClientError):
            self.log.warning("Something went wrong when closing test head %s telnet session", self.testhead_client.host)
            self.log.warning("Stacktrace - %s", get_stack_trace())
