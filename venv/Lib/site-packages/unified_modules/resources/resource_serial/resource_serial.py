#!/usr/bin/env python
"""
Resource library for connecting to serial port
"""
import sys
import serial

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceSerialError(Exception):
    """Exception class for ResourceSerial"""
    pass


class ResourceSerial(object):
    """Utility for serial port on the test head"""
    def __init__(self):
        self.log = logging.getLogger(self.__class__.__name__)
        self.serial = serial.Serial()

    def set_config_details(self, port, baudrate=115200, bytesize=8,
                           parity='N', timeout=None, rtscts=0, xonxoff=0):
        self.serial.port = port
        self.serial.baudrate = baudrate
        self.serial.bytesize = bytesize
        self.serial.parity = parity
        self.serial.timeout = timeout
        self.serial.rtscts = rtscts
        self.serial.xonxoff = xonxoff

    def open_serial_port(self, buffer_size=4096):
        """
        This is the method for opening the serial port
        @param buffer_size : size of the budfer (int) [optional/ default value = 4096]
        """
        try:
            self.serial.open()
            self.log.info("Opened serial port")
        except serial.SerialException as error:
            error_message = "Failed to connect to serial port " + error.message
            raise ResourceSerialError(error_message)
        self.serial.set_buffer_size(buffer_size)


    def read_serial_bytes(self, byte_count=1):
        """
        This is the method for reading the serial data

        :param byte_count: int - number of bytes to read [optional/ default value = 1]
        :return: decoded serial data
        """
        serial_data = self.serial.read(byte_count)
        decoded_data = serial_data.decode()
        return decoded_data

    def read_serial_line(self):
        """
        This is the method for reading the serial data lines

        :return: decoded serial data
        """
        serial_data = self.serial.readline()
        decoded_data = serial_data.decode()
        return decoded_data

    def write(self, data_bytes):
        """
        Write data
        @param data_bytes: bytes of data to be transmitted
        """
        try:
            for byte in data_bytes:
                self.serial.write(chr(byte))
        except serial.SerialException as error:
            error_message = "Failed to send message via serial port " + error.message
            raise ResourceSerialError(error_message)

    def close_serial_port(self):
        self.serial.close()



if __name__ == '__main__':
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support


        class ResourceSerialCli(ResourceSerial, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                ResourceSerial.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceSerial)

        RUN = ResourceSerialCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest
        # Replace the com port number as per pc


        class ResourceSerialUnitTests(BaseTest):
            def __init__(self, result):
                super(ResourceSerialUnitTests, self).__init__(result)
                self.serial_instance = ResourceSerial()

            def setup(self):
                self.serial_instance.set_config_details("COM3", 115200, 8)
                self.serial_instance.open_serial_port(buffer_size=2 ** 16)

            def teardown(self):
                self.serial_instance.close_serial_port()

        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        TEST = ResourceSerialUnitTests(result=RESULTS)
        TEST.run()