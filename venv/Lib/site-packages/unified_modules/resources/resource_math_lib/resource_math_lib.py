#!/usr/bin/env python
"""

@brief
A resource library to perform math operations

@Description:
This resource library provides wrapper methods to perform math operations
like avg, update variance etc..,


"""
from __future__ import division
from unified_modules.test_support.testresults import TestResults

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceMathLib(object):
    def __init__(self, round_data=False, digits_to_round=4):
        self.sd = 0
        self.upper_limit = 0
        self.lower_limit = 0
        self.data = []
        self.min = 0
        self.max = 0
        self.avg = 0
        self.var = 0
        self.sd = 0
        self.round_values = round_data
        self.digits_to_round = digits_to_round

    def clear_data(self):
        self.data = []
        self.min = 0
        self.max = 0
        self.avg = 0
        self.var = 0
        self.sd = 0

    def add_value(self, value):
        if self.round_values:
            value = round(value, self.digits_to_round)

        if not len(self.data):
            self.max = value
            self.min = value

        self.data.append(value)

        # Important to call update methods after appending value to data list
        self._update_population_stats()

        self.max = max(value, self.max)
        self.min = min(value, self.min)
        self.sd = pow(self.var, 0.5)

        if self.round_values:
            self.max = round(self.max, self.digits_to_round)
            self.min = round(self.min, self.digits_to_round)
            self.sd = round(self.sd, self.digits_to_round)

    def _update_population_stats(self):
        # update_average must be called before update_variance
        old_avg = self.avg
        self._update_average()
        self._update_variance(old_avg)

    def _update_average(self):
        # N is the size of the current data list, after the new value has been added
        N = len(self.data)
        new_value = self.data[-1]
        self.avg = ((N-1) * self.avg + new_value) / N
        if self.round_values:
            self.avg = round(self.avg, self.digits_to_round)

    # TODO Validate the accuracy of the data generated by update_variance method
    def _update_variance(self, old_avg):
        # N is the size of the current data list, after the new value has been added
        N = len(self.data)
        new_value = self.data[-1]

        self.var = ((N - 1) * self.var + (new_value - self.avg) * (new_value - old_avg)) / N
        if self.round_values:
            self.var = round(self.var, self.digits_to_round)

    def variance_list(self, data, avg):
        self.var = sum((xi - avg) ** 2 for xi in data) / len(data)
        if self.round_values:
            self.var = round(self.var, self.digits_to_round)
        return self.var

    def average_list(self, data, start_index=None, end_index=None):
        """
        This method returns the average of data from start index to end_index
        :param data: list of values
        :param start_index: start index of data list
        :param end_index: end index of data list
        :return: returns the average of list data[start_index:end_index]
        """
        self.avg = 0
        if start_index is None:
            start_index = 0
        if end_index is None:
            end_index = len(data)

        if len(data) >= 1:
            self.data = data[start_index:end_index]
            self.avg = sum(self.data)/len(self.data)
        if self.round_values:
            self.var = round(self.avg, self.digits_to_round)
        return self.avg


if __name__ == "__main__":

    class ResourceMathLibUnitTest(ResourceMathLib):
        """
        UnitTest for Math lib resource.
        """

        def __init__(self):
            self.results = TestResults()
            self.results.set_test_title('test_resource_mathlib')
            self.log = self.results.log
            self.avg = 0
            self.var = 0
            self.min = 0
            self.max = 0
            self.round_values = True
            self.digits_to_round = 4

        def test_resource_math_lib(self):
            self.data = [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
            average = self.average_list(self.data, start_index=1)
            self.log.info("average is %s", average)
            variance = self.variance_list(self.data, average)
            self.log.info("Variance is %s", variance)
            self.add_value(4)
            self.log.info("updated average is %s", self.avg)
            self.log.info("updated variance is %s", self.var)
            self.log.info("stranded deviation is %s", self.sd)

    resource_math_lib_test = ResourceMathLibUnitTest()
    resource_math_lib_test.test_resource_math_lib()
