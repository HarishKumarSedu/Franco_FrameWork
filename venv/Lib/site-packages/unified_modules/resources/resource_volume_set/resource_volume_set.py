#!/usr/bin/env python
"""
@brief
Resource library for setting system volume
@Description:
Windows system volume can be set in terms of dB levels

For more details go through https://pypi.org/project/pycaw-rf/20210207/
"""
from unified_modules.test_support.testresults import TestResults

from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceVolumeSetError(Exception):
    pass


class ResourceVolumeSet(object):

    def __init__(self):
        self.log = logging.getLogger(ResourceVolumeSet.__name__)
        self.results = TestResults()
        self.devices = AudioUtilities.GetSpeakers()

    def set_volume(self,volumedB=-0.0):
        """
        SetVolume to max
        :param volumedB: Volume in dB
        """
        interface = self.devices.Activate(
            IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))

        volume.SetMasterVolumeLevel(volumedB, None)
        current_volume_level = volume.GetMasterVolumeLevel()

        self.results.assert_equal(current_volume_level, volumedB, "volume is set to expected value")

    def get_volume(self):
        interface = self.devices.Activate(
            IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        current_volume_level = volume.GetMasterVolumeLevel()

        return current_volume_level


if __name__ == '__main__':
    if "--unittest" in sys.argv:

        class ResourceVolumeSetTest(ResourceVolumeSet):
            def __init__(self):
                super(ResourceVolumeSetTest, self).__init__()

            def test_volume_set(self):
                set_volume(self)

        res_vol_test = ResourceVolumeSetTest()
        res_vol_test.test_volume_set()

    else:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support


        class ResourceVolumeSetCli(ResourceVolumeSet, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                ResourceVolumeSetCli.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceVolumeSetCli)


        RUN = ResourceVolumeSetCli()
