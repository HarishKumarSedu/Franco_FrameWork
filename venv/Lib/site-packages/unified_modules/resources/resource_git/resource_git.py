import os
import sys
import platform
import subprocess
from os import listdir

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging

class GitError(Exception):
    """Define GitError Exception type"""
    def __init__(self, message=None):
        super(GitError, self).__init__(message)

class Git(object):

    def __init__(self):
        """
        Init method
        :return:
        """
        self.log = logging.getLogger(Git.__name__)
        self.username = None
        self.gerrit_server = None
        self.repo_name=None
        self.branch_name=None
        self.checkout_dir = None
        self.installed_system_path = None
        self.platform = platform.system()

    def set_config_details(self, config):
        self.username = config['username']
        self.gerrit_server = config['gerrit_server']
        self.repo_name = config['repo_name']
        self.branch_name = config['branch_name']
        self.sub_repo_path = config['sub_repo_path']
        self.checkout_dir = config['checkout_dir']
        self.installed_system_path = config['installed_system_path']

    def git_checkout(self):
        """
        Checkout the GIT repo.
        :return:
        """
        current_dir = os.getcwd()
        self.create_dir()
        os.chdir(self.checkout_dir)
        cmd = 'git clone ssh://%s@%s/%s -b %s' % (self.username, self.gerrit_server, self.repo_name,
                                                  self.branch_name)
        ret_code = subprocess.call(cmd, shell=True)
        if ret_code != 0:
            raise GitError("GIt checkout FAILED")
        os.chdir(current_dir)
        self.log.info("Checkout successful")

    def git_sparse_checkout(self):
        """
        Checkout only a part of the code in GIT repo.
        :return:
        """
        currnt_dir = os.getcwd()
        self.create_dir()
        os.chdir(self.checkout_dir)
        cmd = 'git clone ssh://%s@%s/%s -b %s --no-checkout' % (self.username, self.gerrit_server, self.repo_name,
                                                                self.branch_name)
        ret_code = subprocess.call(cmd, shell=True)
        if ret_code != 0:
            raise GitError("No checkout command Failed")
        project = self.repo_name.split('/')[-1]
        os.chdir(project)
        cmd = 'git config core.sparsecheckout true'
        ret_code = subprocess.call(cmd, shell=True)
        if ret_code != 0:
            raise GitError("GIt configuration with sparse FAILED")
        cmd = "echo %s > .git/info/sparse-checkout" % self.sub_repo_path
        ret_code = subprocess.call(cmd, shell=True)
        if ret_code != 0:
            raise GitError("GIt sparse checkout info cmd FAILED")
        cmd = 'git checkout -t %s -b b1' % self.branch_name
        ret_code = subprocess.call(cmd, shell=True)
        if ret_code != 0:
            raise GitError("GIt sparse checkout FAILED")
        os.chdir(currnt_dir)
        self.log.info("Sparse checkout successful")

    def get_python_script_names(self, path):
        current_dir = os.getcwd()
        os.chdir(self.checkout_dir)
        project = self.repo_name.split('/')[-1]
        os.chdir(project)
        python_files = []
        for f in listdir(path):
            if f.endswith('.py'):
                python_files.append(f)
        os.chdir(current_dir)
        return python_files

    def create_dir(self, dir_path=None):
        """
        Creates the directory if not exists
        :param dir: dir to create
        :return: None
        """
        if dir_path is None:
            dir_path = self.checkout_dir
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class GitCli(Git, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                Git.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, Git)

        RUN = GitCli()
    else:
        # TODO Unit tests pending
        pass
