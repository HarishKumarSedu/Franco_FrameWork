#!/usr/bin/env python
"""

@brief
A resource library to interact with uVision command line tool

@Description:
This resource library provides wrapper methods to perform operations using
a uVision project interface to debug Cortex-M architecture based firmware code

Supported features:
- TBD

@b Usage
@code
swd = ResourceUvision()
@endcode

"""

import subprocess
import traceback
import sys

from .mtb import MTB
from .. import AttributeDict

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceUvisionError(Exception):
    """Define ResourceUvisionError Exception type"""
    pass


class ResourceUvision(object):
    """Class which encapsulates API to interact with uVision CLI tool"""

    def __init__(self):
        """
        Initialize default values
        """
        self.log = logging.getLogger(ResourceUvision.__name__)
        self.config = None

    def set_config_details(self, config):
        """
        Set config details from configuration
        """
        self.config = AttributeDict(config)

    def open_project(self, uvxprojx_path=None, debug_mode=False, hide_gui=True, target=None):
        """
        Open the Keil project in debug mode.
        @param uvxprojx_path: uvxprojx_path to open
        @param debug_mode: run on debug mode
        @param hide_gui: run with gui hide/unhide
        @param target: run with target

        @:return None
        """
        if uvxprojx_path:
            self.config.uvprojx_path = uvxprojx_path
        hide_option = '-j0 ' if hide_gui else ''
        debug_option = '-d ' if debug_mode else ''
        target_option = '-t ' if target else ''
        uv_cmd = "{} {}{}{}{}".format(self.config.uv_path, debug_option, hide_option, target_option,
                                      self.config.uvprojx_path)
        try:
            self.log.info("UV command: %s" % uv_cmd)
            self.uv_pid = subprocess.Popen(uv_cmd)
        except (OSError, subprocess.CalledProcessError, ValueError) as e:
            raise ResourceUvisionError("Exception while opening uvision project {} - {}".format(self.config.uvprojx_path,
                                                                                                self.get_stack_trace()))

    def load_ini_file(self, ini_file=None, hide_gui=True):
        """
        Loads initialization file
        @:param ini_file: initialization file to load

        @:return None
        """
        if ini_file:
            self.config.ini_file = ini_file
        hide_option = '-j0 ' if hide_gui else ''
        uv_cmd = "{} {}load {}".format(self.config.uv_path, hide_option, self.config.ini_file)
        try:
            self.uv_pid = subprocess.Popen(uv_cmd)
        except (OSError, subprocess.CalledProcessError, ValueError) as e:
            raise ResourceUvisionError("Exception while loading ini file {} - {}".format(self.config.ini_file,
                                                                                         self.get_stack_trace()))

    def build_project(self, uvprojx_path=None, hide_gui=True):
        """
        Builds the specified Keil project
        @:param uvprojx_path: uvxprojx_path to build
        @:param hide_gui: Option to enable hiding Keil GUI

        @:return: The error code returned from running the command
        """
        if uvprojx_path:
            self.config.uvprojx_path = uvprojx_path
        hide_option = '-j0 ' if hide_gui else ''
        uv_cmd = "{} -b {}{}".format(self.config.uv_path, hide_option, self.config.uvprojx_path)
        try:
            self.uv_pid = subprocess.Popen(uv_cmd)
        except (OSError, subprocess.CalledProcessError, ValueError) as e:
            raise ResourceUvisionError("Exception while building project {} - {}".format(self.config.uvprojx_path,
                                                                                         self.get_stack_trace()))
        return self.uv_pid

    def dump_mtb_memory(self, file_path, file_name):
        """
        Dump MTB memory to the given file.
        @param file_path: file path
        @param file_name: file to capture the MTB data
        @return: None
        """
        self.log.info("-----Reading Data from MTB-----")
        # Open handle and setup device
        mtb = MTB(self.config.device_name, self.log)
        try:
            mtb.dump_memory(file_path, file_name)  # Get capture
            self.log.info("-----Data Read from MTB-----\n")
        except Exception as e:
            raise ResourceUvisionError("%s error occurred while"
                                       " trying to get the MTB data" % e)
        finally:
            mtb.close()

    def generate_coverage(self):
        pass

    def evaluate_coverage(self):
        pass

    @staticmethod
    def get_stack_trace():
        """Provide the stack trace string"""
        return traceback.format_exc(traceback.extract_stack())


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line

        import unified_modules.test_support.cli_support as cli_support

        class ResourceUvisionCli(ResourceUvision, cli_support.CliOptions):
            """
            Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class
            """

            def __init__(self, *args, **kwargs):
                ResourceUvision.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceUvision)

        RUN = ResourceUvisionCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest

        CONFIG = {
            'uv_path': "C:\\Keil_v5\\UV4\\UV4.exe",
            'uvprojx_path': "C:\\lynott_testing\\Lynott_firmware\\test.uvprojx",
            'ini_file': "C:\\lynott_testing\\Lynott_firmware\\JLinkSettings.ini",
            'uvoptx_path': "C:\\lynott_testing\\Lynott_firmware\\test.uvoptx",
            'device_name': "device"
        }


        class ResourceUvisionUnittests(BaseTest):
            """
            UnitTest for ResourceUvision
            """
            def setup(self):
                self.record_test_name()

            def test1_open_project(self):
                self.resource_uvision.set_config_details(CONFIG)
                self.resource_uvision.open_project()

            def test2_load_ini_file(self):
                self.resource_uvision.load_ini_file()

            def initiate(self):
                self.resource_uvision = ResourceUvision()
                self.result.assert_not_raises(OSError,
                                              self.test1_open_project,
                                              "Expected not to raise Error")
                self.result.assert_not_raises(OSError,
                                              self.test2_load_ini_file,
                                              "Expected not to raise Error")

            def complete(self):
                self.result.assert_equal("PP : PASS",
                                         "%s : %s" % (self.result.step_outcome(),
                                                      self.result.get_overall_outcome()),
                                         "Expected Pass")

            def teardown(self):
                self.result.report_result_to_tf()


        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        TEST = ResourceUvisionUnittests(result=RESULTS)
        TEST.run()