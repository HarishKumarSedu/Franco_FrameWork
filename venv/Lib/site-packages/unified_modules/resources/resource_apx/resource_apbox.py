"""
@brief
A resource library to control APX box.

@Description:
This resource library provides wrapper methods to access all the
AP box APIs.


Supported features:
- Opening and Closing a APX project
- Run a Sequence
- Change a sequence
- Get result of a sequence
- Analysis Report in CSV format
@requirements:

Iron Python 3.4 from: https://github.com/IronLanguages/ironpython3/releases/tag/v3.4.0-alpha1
APx500 4.5

@b Usage
@code
@endcode
"""
import sys
import os
import clr
import csv

from collections import namedtuple

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging

PATH_APX_API = "C:\\Program Files\\Audio Precision\\APx500 4.5\\API"
IRON_PYTHON_PATH = "C:\\Program Files\\IronPython 3.4\\Lib"

sys.path.append(IRON_PYTHON_PATH)
clr.AddReference(os.path.join(PATH_APX_API, "AudioPrecision.API2.dll"))
clr.AddReference(os.path.join(PATH_APX_API, "AudioPrecision.API.dll"))
from AudioPrecision.API import *

AudioMeasurements = namedtuple('AudioMeasurements', 'THD_N Level_and_Gain')
AP_AUDIO_MEASUREMENTS = AudioMeasurements('THD+N', 'Level and Gain')

AudioMeasurementsDetails = namedtuple('AudioDetails', 'MType MVal')
AP_AUDIO_MEASUREMENT_DETAILS = AudioMeasurementsDetails('m_type', 'm_val')

AudioMeasurementsUnit = namedtuple('AudioMeasurementUnit', 'THD_N_Ratio RMS_Level')
AP_AUDIO_MEASUREMENT_UNITS = AudioMeasurementsUnit('THD+N Ratio', 'RMS Level')


class ReadAudioMeasurementStructure:
    """
    Data structure for reading Audio measurement
    """
    def __init__(self, key, audio_measurement_type, audio_measurement_value):
        self.key = key
        self.audio_measurement_type = audio_measurement_type
        self.audio_measurement_value = audio_measurement_value


class ApxBoxError(Exception):
    """Define ApxBoxError Exception type"""
    pass


class ApxBox(object):
    """
    Wrapper to control APX box
    """
    def __init__(self):
        """
        Starts the AP box application
        """
        self.log = logging.getLogger(ApxBox.__name__)
        self.project_name = None
        self.apx = None
        self.apx_sequence = None
        self.apx_signal_path = None
        self.report_name = None
        self.reports_dir = None

    def set_inputs(self):
        """
        Set inputs for APx
        @param path_apx_api: [str] APx API path
        @param iron_python_path: [str] Iron python path
        """
        self.path_apx_api = PATH_APX_API
        self.iron_python_path = IRON_PYTHON_PATH
        self._init_apx()

    def _init_apx(self):
        """
        Initiate APx
            Import AudioPercision API modules
            Start Apx Application
        """

        self.apx = APx500_Application()
        self.apx.Visible = 1
        self.log.info('Created APx500 object')
        self.AutoSaveReportFileNameType = AutoSaveReportFileNameType
        self.ReportExportFormat = ReportExportFormat

    def open_apx_proj(self, apx_project):
        """
        Opens and APX project
        @param apx_project: Apx project file
        """
        # Check if apx_project file exists before doing open
        try:
            self.apx.OpenProject(apx_project)
        except Exception as exc:
            raise ApxBoxError("Unable to open APX project %s, Error:%s" % (apx_project, str(exc)))
        self.log.info('APX project : %s is opened' % apx_project)
        self.apx_sequence = self.apx.Sequence

    def close_apx_proj(self):
        """
        Publishes report and exits application
        """
        self.apx.Exit()
        self.log.info('Exited APx500 Application')

    def get_result(self):
        """
        @return: Result of Sequence
        """
        result = self.apx.Sequence.Passed
        self.log.info("Result of sequence : %s" % result)
        return result

    def run_sequence(self, publish_report=True):
        """
        Run an APX project signal path
        @param publish_report [bool] Bool for logging the measurement results
        """
        self.log.info('Running sequence')
        self.apx_sequence.Run()
        if publish_report:
            self.publish_report()

    def get_measurement(self, measurement_structure, signal_path=True):
        """
        @param measurement_structure must be in below format
            {'THD+N': {'m_type': 'THD+N Ratio',
                       'm_val': [-67, -67]},
             'Level and Gain': {'m_type': 'RMS Level',
                                'm_val': [1.7, 1.7]}
            }
        @param signal_path [bool] If measurement is corresponding with signal path
        Returns measurement values
        """
        measurement_values = {}
        for measurement_title, exp_measurement in measurement_structure.items():
            if signal_path:
                measurement = self.apx_signal_path.GetMeasurement(measurement_title)
            else:
                measurement = self.apx_sequence.GetMeasurement(measurement_title)
            seq_res = measurement.get_SequenceResults()
            result_measurements = seq_res[exp_measurement['m_type']]
            values = result_measurements.GetMeterValues()
            _measurement_values = [float(values.Get(index)) for index in range(values.Length)]
            measurement_values[measurement_title] = {}
            measurement_values[measurement_title][exp_measurement['m_type']] = {}
            measurement_values[measurement_title][exp_measurement['m_type']]['m_val'] = _measurement_values
        return measurement_values

    def publish_report(self):
        """
        Prints the content of Apx project report.
        @return: None
        """
        self.log.info("AP box audio analysis report:")
        report_path = os.path.join(self.reports_dir, self.report_name + '.csv')
        try:
            with open(report_path, "r") as report:
                reader = csv.reader(report, delimiter=",")
                for line in reader:
                    if line:
                        self.log.info("%s", line)
        except IOError:
            self.log.warning("Report : %s does not exists,"
                             "AP box failed to generate the reports in csv format" % self.report_name)

    def run_signal_path(self, signal_path):
        """
        TODO:Changes APX sequence according to signal path and sequence measurement
        @param signal_path: [str] Signal path name
        """
        self.apx_signal_path = self.apx_sequence.GetSignalPath(signal_path)
        self.apx_signal_path.Run()
        self.publish_report()

    def set_report_name(self, reports_dir, report_name):
        """
        Set report directory and name
        @param reports_dir: [str] Report directory
        @param report_name: [str] Report name with out any extension
        """
        self.reports_dir = reports_dir
        self.apx.Sequence.Report.Checked = True
        # Tell APx to automatically save a copy of the report when the sequence runs
        self.apx.Sequence.Report.AutoSaveReport = True
        # We can specify the base file name.
        # APx may append additional tags to ensure the file name is unique
        self.apx.Sequence.Report.AutoSaveReportFileNameType = self.AutoSaveReportFileNameType.CustomPrefix
        # Set the report name
        self.apx.Sequence.Report.AutoSaveReportFileNamePrefix = report_name
        # Tell APx where to save the report files
        self.apx.Sequence.Report.AutoSaveReportFileLocation = reports_dir
        # Tell APx to save the report to a csv file
        self.apx.Sequence.Report.AutoSaveReportFileFormat = self.ReportExportFormat.Text
        # Get the report name
        self.report_name = self.apx.Sequence.Report.AutoSaveReportFileNamePrefix
        self.log.info("Report : %s" % os.path.join(self.reports_dir, self.report_name))


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class ApxBoxCli(ApxBox, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""
            def __init__(self, *args, **kwargs):
                ApxBox.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ApxBox)
        RUN = ApxBoxCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest

        class ApxBoxUnittest(BaseTest):
            """
            Unit test for AP box
            """
            def __init__(self, results):
                super(ApxBoxUnittest, self).__init__(results)
                self.apx_box = None

            def setup(self):
                """
                Start AP box application
                """
                self.log = logging.getLogger('ApxBoxUnittest')
                apx_api_path = "C:\\Program Files\\Audio Precision\\APx500 4.5\\API"
                iron_python_path = "C:\\Program Files (x86)\\IronPython-2.7.7\\Lib"
                self.apx_box = ApxBox(apx_api_path, iron_python_path)

            def initiate(self):
                """
                Opens an APX project and sets the report name
                """
                self.apx_box.open_apx_proj(r'D:\Deuce\LatestCode\Unified_Testing_2\bst_tests'
                                           r'\input_data\I2S_PSIA_word32_bit24_48K.approjx')

                self.apx_box.set_report_name(r'D:\Deuce\LatestCode\Unified_Testing_2\bst_tests'
                                             r'\input_data', 'Sample_report')

            def complete(self):
                """
                Runs a sequence and change to other sequence and run that sequence as well
                """
                self.apx_box.run_signal_path('Signal Path1')
                thd_n_values = self.apx_box.run_sequence_and_get_measurement_val('THD+N',
                                                                                 'THD+N Level')
                self.log.info("THD+N Level = %s" % thd_n_values)
                self.result.assert_true(self.apx_box.get_result(), 'Result of analysis')

            def teardown(self):
                """
                Closes the APX project
                """
                self.apx_box.close_apx_proj()

        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        APX_BOX_TEST = ApxBoxUnittest(RESULTS)
        APX_BOX_TEST.run()
