#!/usr/bin/env python
"""
@brief
A resource library to interact with audio hub.

@Description:
Features supported:
- Start and stop cirrus link using audio hub.
@b Usage
@code
cirruslink = ResourceCirrusLink()
@endcode
"""

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging

import time

from unified_modules.resources.resource_button_press.simple_actuator.lac.lac import LAC
from unified_modules.resources.resource_button_press.resource_button_press import ResourceButtonPress

class ResourceSimpleActuator(ResourceButtonPress):
    """
     A resource library to interact with the simple linear actuator control board.
    """

    _DELTA_PERCENTAGE_PRESS = 0.85
    _DELTA_PERCENTAGE_UNPRESS = 0.0

    def __init__(self):
        """
        Initialize class variables and configure the simple actuator/control board
        """
        self.log = logging.getLogger(ResourceSimpleActuator.__name__)
        self.lac = LAC()
        self.lac.reset()

    def reset(self):
        pass

    def set_pos(self, percentage):
        """
        Moves the actuator to the set percentage
        :param percentage:
        :return:
        """
        self.check_percentage_range(percentage)

        val = int(percentage * self.lac.REGISTER_MAX_VAL)
        self.lac.set_position(val)

    def step_pos(self, percentage):
        pass

    def set_min(self, percentage):
        """
        Sets the minimum positional range by the percentage passed in.
        :param percentage:
        :return:
        """
        self.check_percentage_range(percentage)

        val = int(percentage * self.lac.REGISTER_MAX_VAL)
        self.lac.set_retract_limit(val)
        self.min_pos_percentage = percentage

    def set_max(self, percentage):
        """
        Sets the maximum positional range by the percentage passed in.
        :param percentage:
        :return:
        """
        self.check_percentage_range(percentage)

        val = int(percentage * self.lac.REGISTER_MAX_VAL)
        self.lac.set_extend_limit(val)
        self.max_pos_percentage = percentage

    def set_accuracy(self, accuracy):
        """
        Sets the accuracy
        :param accuracy:
        :return:
        """
        self.lac.set_accuracy(accuracy)

    def press(self):
        """
        Initial state expected: Linear Actuator is at least 20% range from button
        :return:
        """
        self.set_pos(self._DELTA_PERCENTAGE_PRESS)

    def release(self):
        """
        Initial state expected: Linear Actuator is at least 20% range from button
        :return:
        """
        self.set_pos(self._DELTA_PERCENTAGE_UNPRESS)

    def press_and_release(self):
        pass

    def load_calibration(self, cal_map):
        pass

    def wait_till_position_reached(self):
        pos = self.lac.get_feedback()

    def init_position_accuracy(self):
        self.log.info("Initialize Simple Actuator")
        self.set_accuracy(5)
        self.set_min(.1)
        self.set_max(.9)
        # simulating lowering to just above the button
        self.set_pos(0)


if __name__ == "__main__":
    """
    If invoked from the command line.
    Sample code on using the simple linear actuator class.

    """
    finger = ResourceSimpleActuator()
    finger.set_min(.1)
    finger.set_max(.5)
    finger.set_pos(0.25)
    finger.press()
    time.sleep(1)
    finger.release()
    time.sleep(1)
    finger.press()
    time.sleep(1)
    finger.release()
