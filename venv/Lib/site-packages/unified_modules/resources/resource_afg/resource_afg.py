"""
@brief
A resource library to operate NI USB 6001 arbitrary function generator.

@Description:
This resource library provides wrapper methods to access the NI USB 6001 AFG APIs.

"""
import sys

import nidaqmx
import numpy as np
from nidaqmx.stream_writers import (AnalogSingleChannelWriter, AnalogMultiChannelWriter)
from nidaqmx.stream_readers import (AnalogSingleChannelReader, AnalogMultiChannelReader)
from nidaqmx.system.system import System

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class AfgNi6001Error(Exception):
    """Define AfgNi6001Error Exception type"""
    pass


class AfgNi6001(object):
    """
    Wrapper to operate NI 6001 AFG
    """

    def __init__(self):
        """
        Initialize and verify function generator connectivity
        """
        try:
            self.log = logging.getLogger(AfgNi6001.__name__)
            self.afg = nidaqmx
            self.system = System.local()
            self.log.info("Connected function generator: %s", self.system)
            version = self.system.driver_version
            self.log.info("Function generator version: %s", version)
        except:
            self.log.error("AFG device is not connected")

    def get_list_of_connected_devices(self):
        """
        Finds the list of connected devices and returns the list
        :return: connected devices list
        """
        devices_list = []
        for device in self.system.devices:
            self.log.info("Connected function generator: %s", device)
            devices_list.append(device)
        return devices_list

    def generate_analog_voltage(self, device, channel, voltage_value):
        """
        Generates analog voltage output from Analog output channels(ao0, ao1)
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param channel: Analog output channel number (0 or 1)
        :param voltage_value: DC voltage value 0 to 5V
        :return: None
        """
        try:
            device = device + '/ao' + str(channel)
            with self.afg.Task() as task:
                task.ao_channels.add_ao_voltage_chan(device, 'analog_channel', 0, 5)
                task.start()
                task.write(voltage_value)
                task.stop()
        except:
            self.log.error("Failed to generate analog voltage output through AFG device")

    def generate_analog_voltage_signal(self, device, channel, sample_rate, samples):
        """
        Generates analog voltage signal from Analog output channel(ao0 or ao1) for the required number of samples
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param channel: Analog output channel number (0 or 1)
        :param sample_rate: Configures sample rate of the AFG device
        :param samples: Length of voltage signal is represented in terms of number of samples
        :return: None
        """
        try:
            device = device + '/ao' + str(channel)
            with self.afg.Task() as task:
                task.ao_channels.add_ao_voltage_chan(device)
                task.timing.cfg_samp_clk_timing(sample_rate)
                test_writer = AnalogSingleChannelWriter(task.out_stream, auto_start=True)
                test_writer.write_many_sample(samples)
                task.wait_until_done()
                task.stop()
        except:
            self.log.error("Failed to generate analog voltage signal output through AFG device")

    def read_analog_voltage(self, device, channel):
        """
        Reads analog voltage output from Analog output channels(ao0, ao1)
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param channel: Analog output channel number (0 or 1)
        :return: Returns read analog output value
        """
        try:
            device = device + '/ai' + str(channel)
            with self.afg.Task() as task:
                task.ai_channels.add_ai_voltage_chan(device)
                value = task.read(number_of_samples_per_channel=2)
                task.stop()
            return value
        except:
            self.log.error("Failed to read analog voltage output from AFG device")

    def read_analog_voltage_signal(self, device, channel, sample_rate, samples):
        """
        Reads analog voltage signal from Analog output channel(ao0 or ao1) for the required number of samples
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param channel: Analog output channel number (0 or 1)
        :param sample_rate: Configures sample rate of the AFG device
        :param samples: Length of voltage signal is represented in terms of number of samples
        :return: Returns read analog output voltage samples count
        """
        try:
            device = device + '/ao' + str(channel)
            with self.afg.Task() as task:
                task.ao_channels.add_ao_voltage_chan(device)
                task.timing.cfg_samp_clk_timing(sample_rate)
                test_reader = AnalogSingleChannelReader(task.in_stream)
                read_num_samples = test_reader.read_many_sample(samples)
                task.wait_until_done()
                task.stop()
            return read_num_samples
        except:
            self.log.error("Failed to read analog voltage signal output from AFG device")

    def generate_digital_voltage(self, device, port, line, bool_value):
        """
        Generates digital voltage output from digital output channels(ao0, ao1)
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param port: Digital port number (0 or 1 or 2)
        :param line: Each line reads 1-bit, line presents bit-position in the byte
        :param bool_value: True or False (1 or 0)
        :return: None
        """
        try:
            device = device + '/' + port + '/' + line
            with self.afg.Task() as task:
                task.do_channels.add_do_chan(device)
                task.start()
                task.write(bool_value)
                task.stop()
        except:
            self.log.error("Failed to generate digtial voltage output through AFG device")

    def read_digital_voltage(self, device, port, line):
        """
        Reads digital voltage output from digital output channels(ao0, ao1)
        :param device: 'Dev1'/'Dev2' name of the connected AFG device
        :param port: Digital port number (0 or 1 or 2)
        :param line: Each line reads 1-bit, line presents bit-position in the byte
        :return: Returns read digital value
        """
        try:
            device = device + '/' + port + '/' + line
            with self.afg.Task() as task:
                task.di_channels.add_di_chan(device)
                value = task.read()
                task.stop()
            return value
        except:
            self.log.error("Failed to read digtial voltage output from AFG device")


if __name__ == "__main__":
    if "--unittest" in sys.argv:
        # Create an AFG object
        afg = AfgNi6001()
        # Get list of connected devices
        devices = afg.get_list_of_connected_devices()
        # Generate voltage value of 3 from analog output
        afg.generate_analog_voltage('Dev1', 0, 3)
        # Read voltage value from analog input
        read_value = afg.read_analog_voltage('Dev1', 0)
        print(read_value)
        # Generate 1KHz square wave signal for 10 seconds
        sampling_rate = 1000  # Sample rate in Hz
        duration = 10  # Duration in seconds
        num_samples = int(sampling_rate * duration)
        samples_list = np.append(1 * np.ones(int(num_samples / 2)), np.zeros(int(num_samples / 2)))
        # Generate square voltage signal from the second device and channel 0
        afg.generate_analog_voltage_signal('Dev2', 0, sampling_rate, samples_list)
