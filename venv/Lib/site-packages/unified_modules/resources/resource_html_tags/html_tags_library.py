class HtmlTags:
    def __init__(self):
        pass

    class Table:
        def __init__(self):
            self._table_opening_tag = "<table>"
            self._table_closing_tag = "</table>"
            self._tbody_opening_tag = "<tbody>"
            self._tbody_closing_tag = "</tbody>"
            self._header_cell_opening_tag = "<th>"
            self._header_cell_closing_tag = "</th>"
            self._row_opening_tag = "<tr>"
            self._row_closing_tag = "</tr>"
            self._cell_opening_tag = "<td>"
            self._cell_closing_tag = "</td>"

        def insert_table_tag(self, value):
            value = self._insert_tbody_tag(value)
            return "{}{}{}".format(self._table_opening_tag, value, self._table_closing_tag)

        def _insert_tbody_tag(self, value):
            return "{}{}{}".format(self._tbody_opening_tag, value, self._tbody_closing_tag)

        def insert_header_tag(self, value):
            return "{}{}{}".format(self._header_cell_opening_tag, value,
                                   self._header_cell_closing_tag)

        def insert_row_tag(self, value):
            return "{}{}{}".format(self._row_opening_tag, value, self._row_closing_tag)

        def insert_cell_tag(self, value):
            return "{}{}{}".format(self._cell_opening_tag, value, self._cell_closing_tag)

        def convert_from_2d_list_to_html_table(self, array):
            """

            :param array: A list of lists of N columns and N rows
            :return: A table filled with the values_table in html format
            """
            tagged_table = self.insert_table_tag(value=self._tag_rows(array))
            return tagged_table

        def _tag_rows(self, values_table):
            table_body = ''
            for row in range(len(values_table)):
                is_header = self._is_header(row=values_table[row], values_table=values_table)
                cell_chain = self._tag_cells(row=values_table[row], is_header=is_header)
                tagged_row = self.insert_row_tag(cell_chain)
                table_body += tagged_row
            return table_body

        @staticmethod
        def _is_header(row, values_table):
            if row == values_table[0]:
                return True
            else:
                return False

        def _tag_cells(self, row, is_header=False):
            cell_chain = ''
            for cell in range(len(row)):
                value = row[cell]
                if is_header:
                    cell_chain += self.insert_header_tag(value=value)
                else:
                    cell_chain += self.insert_cell_tag(value=value)
            return cell_chain

    class Format:
        def __init__(self):
            self._strong_opening_tag = "<strong>"
            self._strong_closing_tag = "</strong>"
            self._h1_opening_tag = "<h1>"
            self._h1_closing_tag = "</h1>"
            self._h2_opening_tag = "<h2>"
            self._h2_closing_tag = "</h2>"
            self._h3_opening_tag = "<h3>"
            self._h3_closing_tag = "</h3>"
            self._h4_opening_tag = "<h4>"
            self._h4_closing_tag = "</h4>"
            self._h5_opening_tag = "<h5>"
            self._h5_closing_tag = "</h5>"
            self._h6_opening_tag = "<h6>"
            self._h6_closing_tag = "</h6>"
            self._p_opening_tag = "<p>"
            self._p_closing_tag = "</p>"
            self._br_tag = "<br/>"

        def insert_strong_tag(self, value):
            return "{}{}{}".format(self._strong_opening_tag, value, self._strong_closing_tag)

        def insert_h1_tag(self, value):
            return "{}{}{}".format(self._h1_opening_tag, value, self._h1_closing_tag)

        def insert_h2_tag(self, value):
            return "{}{}{}".format(self._h2_opening_tag, value, self._h2_closing_tag)

        def insert_h3_tag(self, value):
            return "{}{}{}".format(self._h3_opening_tag, value, self._h3_closing_tag)

        def insert_h4_tag(self, value):
            return "{}{}{}".format(self._h4_opening_tag, value, self._h4_closing_tag)

        def insert_h5_tag(self, value):
            return "{}{}{}".format(self._h5_opening_tag, value, self._h5_closing_tag)

        def insert_h6_tag(self, value):
            return "{}{}{}".format(self._h6_opening_tag, value, self._h6_closing_tag)

        def insert_paragraph_tag(self, value):
            return "{}{}{}".format(self._p_opening_tag, value, self._p_closing_tag)

        def wrap_with_line_breaks(self, value):
            return "{}{}{}".format(self._br_tag, value, self._br_tag)

        def insert_line_break_tag(self):
            return self._br_tag
