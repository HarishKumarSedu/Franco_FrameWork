import glob
import os
import sys
import re
import platform
import time
import fnmatch
import subprocess
import getpass
import shutil
import yaml
from lxml import etree

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging

SOUND_CLEAR_STUDIO = "SoundClearStudio"
STUDIO_LINK = "StudioLink"

class BspCmdLineError(Exception):
    """Define BspCmdLineError Exception type"""
    def __init__(self, message=None):
        super(BspCmdLineError, self).__init__(message)


class BspCmdLine(object):

    def __init__(self):
        """
        @param tag - Name of the resource. This is also the logger prefix.
        @param verbose - display all the logs
        @param configs - configuration details dictionary to configure this resource library.
                         Example: usb port, path to an exe file.
        """
        self.log = logging.getLogger(BspCmdLine.__name__)
        self.username = None
        self.password = None
        self.installed_scs_folder_path = None
        self.download_dir = None
        self.bsp_installed_path = None
        self.bsp_pkg_name = None
        self.platform = platform.system()

    def set_config_details(self, config):
        self.username = config['username']
        self.password = config['password']
        self.download_dir = config['download_dir']
        self.bsp_installed_path = config['bsp_installed_path']
        self.bsp_pkg_name = config['bsp_pkg_name']
        self.installed_scs_folder_path = config['scs_installed_path']
        self.scripts_path = config['scripts_path']

    def get_file_names(self, path=None):
        """
        Get the files list in a given path
        @param path - path
        @return the list of files in a given path
        """
        if path is None:
            path = self.download_dir
        return os.listdir(path)

    def remove_files(self, path=None):
        """
        Removes the files in a path
        @param path - path
        """
        if path is None:
            path = self.download_dir
        if os.path.exists(path):
            files = glob.glob(path + os.sep + "*.*")
            for f in files:
                os.remove(f)
        else:
            self.log.warning("%s path doesn't exists" % path)

    def remove_non_cdb_bsp_files(self, path=None):
        """
        Removes the files in a path
        @param path - path
        """
        if path is None:
            path = self.download_dir
        if os.path.exists(path):
            all_files = glob.glob(path + os.sep + "*.*")
            cdb_files = glob.glob(path + os.sep + "cdb*")
            for f in all_files:
                if not f in cdb_files:
                    os.remove(f)
        else:
            self.log.warning("%s path doesn't exists" % path)

    def uninstall_scs(self, username=None, scs_sl_name=SOUND_CLEAR_STUDIO):
        """
        Uninstall the SCS and remove necessary files
        @param username - Username of test head
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return returns method status True or False
        """
        if username is None:
            username = self.username

        cwd = os.getcwd()
        version = self.get_installed_scs_latest_base_version(scs_sl_name=scs_sl_name)

        if version == "0.0":
            self.log.info("%s application is not existed to uninstall" % scs_sl_name)
        else:
            if self.platform == "Windows":
                uninstall_exe_path = os.path.join(self.installed_scs_folder_path,
                                                  "%s_" % scs_sl_name + version)
                if os.path.exists(uninstall_exe_path):
                    self.log.info("UnInstalling %s" % scs_sl_name)
                    os.chdir(uninstall_exe_path)
                    ret_code = os.system("unins000.exe /sp- /silent")
                    if ret_code != 0:
                        self.log.error("Unable to uninstall the %s" % scs_sl_name)
                        return False
                    try:
                        shutil.rmtree("C:\\Users\%s\%s" % (username, scs_sl_name))
                        # shutil.rmtree("C:\\Users\%s\SoundClearStudioProjects" % username)
                        shutil.rmtree(r"C:\\Users\All Users\Cirrus Logic")
                    except WindowsError as err:
                        self.log.error(str(err))
                    os.chdir(cwd)
                    self.log.info("%s is uninstalled successfully" % scs_sl_name)
                else:
                    self.log.info("%s application is not existed to uninstall" % scs_sl_name)
            elif self.platform == "Darwin":
                uninstall_exe_path = os.path.join(self.installed_scs_folder_path,
                                                  "SoundClear Studio %s.app" % version)
                self.log.info("Uninstalling %s app" % scs_sl_name)
                cmd = "sudo " + uninstall_exe_path
                cmd = "echo " + '"' + self.password + '"' + " | " + "sudo -S rm -rfd " + '"' + uninstall_exe_path + '"'
                proc = subprocess.call(cmd, shell=True)
                if proc != 0:
                    self.log.error("%s is not deleted" % scs_sl_name)
                    return False
                self.log.info("Removing Shared/Users/CirrusLogic/SCS")
                shared_cirrus_path = os.path.join("/Users/Shared/Cirrus Logic", "SCS_" + version)
                cmd = "echo " + '"' + self.password + '"' + " | " + "sudo -S rm -rfd " + '"' + shared_cirrus_path + '"'
                proc = subprocess.call(cmd, shell=True)
                if proc != 0:
                    self.log.error("SCS is not removed from Shared Users folder")
                    return False
                user_scs_path = "/Users/%s/%s" % (self.username, scs_sl_name)
                cmd = "echo " + '"' + self.password + '"' + " | " + "sudo -S rm -rfd " + '"' + user_scs_path + '"'
                proc = subprocess.call(cmd, shell=True)
                if proc != 0:
                    self.log.error("%s is not removed from Users folder" % scs_sl_name)
                    return False
        return True

    def install_scs(self, scs_installer_path=None, scs_sl_name=SOUND_CLEAR_STUDIO):
        """
        Installs the SCS
        @param scs_installer_path - SCS installer path, if not given it checks in download dir
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return returns method status True or False
        """
        flag = True
        cwd = os.getcwd()
        if scs_installer_path is None:
            scs_installer_path = self.download_dir
        if os.path.exists(scs_installer_path):
            os.chdir(scs_installer_path)
            if self.platform == "Windows":
                flist = glob.glob("%s.exe" % scs_sl_name)
                if len(flist) >= 1:
                    self.log.info("Installing %s" % scs_sl_name)
                    try:
                        os.system("%s.exe /sp- /silent /norestart" % scs_sl_name)
                    except Exception as e:
                        self.log.error(str(e))
                        raise BspCmdLineError('Failed to install %s' % scs_sl_name)
                else:
                    raise BspCmdLineError("%s not found in dir %s" % (scs_sl_name, scs_installer_path))
            os.chdir(cwd)
            if self.platform == "Darwin":
                os.chdir(scs_installer_path)
                scs_dmg_file = glob.glob("%s.dmg" % scs_sl_name)
                os.chdir(cwd)
                cmd = "hdiutil attach " + scs_installer_path + os.sep + scs_dmg_file[0]
                self.log.info("Mounting disc image..................")
                self.log.info(cmd)
                attach = subprocess.call(cmd, shell=True)
                if attach != 0:
                    self.log.error("Mounting disc image FAIL")
                    raise BspCmdLineError("Mounting disc image FAIL")
                password = self.password
                os.chdir("/Volumes/")
                scs_pk_file_name = glob.glob("%s-*.pkg" % scs_sl_name)[0]
                os.chdir(cwd)
                basedir = "/Volumes/%s/" % scs_pk_file_name
                cmd = "sudo -S installer -allowUntrusted -verboseR -pkg " + basedir + '"%s"' % scs_pk_file_name + \
                      " -target /"
                cmd = "echo " + '"' + password + '"' + " | " + cmd
                self.log.info("Running %s installation.................." % scs_sl_name)
                self.log.info(cmd)
                installation = subprocess.call(cmd, shell=True)
                if installation != 0:
                    self.log.error("Running %s installation FAIL" % scs_sl_name)
                    raise BspCmdLineError("Running %s installation FAIL" % scs_sl_name)
                self.log.info("Eject the mounted disc image")
                cmd = "hdiutil detach " + basedir
                self.log.info("Ejecting mounted disc image..................")
                self.log.info(cmd)
                detach = subprocess.call(cmd, shell=True)
                if detach != 0:
                    self.log.error("Ejecting mounted disc image FAIL")
                    flag = False
        else:
            raise IOError("%s path doesn't exists" % scs_installer_path)
        return flag

    def install_studiolink(self):
        """
        Install Studio link
        @param studiolink_wheel_path - Studiolink wheel path, if not given checks in download dir
        """
        flag = False
        base_version = self.get_installed_scs_latest_base_version()
        if base_version is None:
            raise IOError("SoundClear Studio is not installed")

        if self.platform == "Windows":
            studiolink_wheel_path = r"C:\ProgramData\Cirrus Logic\SCS_%s\installers" % base_version
        if self.platform == "Darwin":
            studiolink_wheel_path = r"/Users/Shared/Cirrus Logic/SCS_%s/installers" % base_version

        if not os.path.exists(studiolink_wheel_path):
            raise IOError("Linkclient path doesn't exits")

        cwd = os.getcwd()
        os.chdir(studiolink_wheel_path)
        wheel_list = glob.glob("linkclient*.whl")
        if wheel_list:
            wheel_file_name = wheel_list[0]
        else:
            raise IOError("There is no linkclient wheel file in path %s" % studiolink_wheel_path)

        self.log.info("Installing StudioLink")
        if self.platform == "Windows":
            cmd = "pip install -U %s" % wheel_file_name
        if self.platform == "Darwin":
            password = self.password
            cmd = "sudo -S -H pip install -U %s" % wheel_file_name
            cmd = "echo " + '"' + password + '"' + " | " + cmd

        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in installing the studiolink")
        flag = True
        os.chdir(cwd)
        return flag

    def install_studio_link_exe(self, scs_installer_path=None, scs_sl_name=STUDIO_LINK):
        """
        Installs the StudioLink installer
        @param scs_installer_path - SCS installer path, if not given it checks in download dir
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return: None
        """
        self.install_scs(scs_installer_path=scs_installer_path, scs_sl_name=scs_sl_name)

    def uninstall_studio_link_exe(self, scs_sl_name=STUDIO_LINK):
        """
        Uninstalls the StudioLink installer
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return: None
        """
        self.uninstall_scs(scs_sl_name=scs_sl_name)

    def uninstall_studiolink(self):
        """Uninstalling Studio link"""
        self.log.info("UnInstalling StudioLink")
        if self.platform == "Windows":
            cmd = "pip uninstall studiolink"
        if self.platform == "Darwin":
            cmd = "sudo -S pip uninstall studiolink"
            cmd = "echo " + '"' + self.password + '"' + " | " + cmd
        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in uninstalling the studiolink")
        return True

    def remove_and_add_scs_from_squish(self, new_scs_version, old_scs_version):
        """
        Remove SCS AUT from Squish
        :param new_scs_version: SCS to add
        :param old_scs_version: SCS to remove
        :return:
        """
        self.log.info("Add SCS as AUT in Squish")
        if platform.system() == "Windows":
            squish_server = 'squishserver'
            squish_server_path = "C:/Squish_6.2/bin"
            old_scs_path = "C:\Program Files\Cirrus Logic\%s_%s\ide" % (SOUND_CLEAR_STUDIO, old_scs_version)
            new_scs_path = "C:\Program Files\Cirrus Logic\%s_%s\ide" % (SOUND_CLEAR_STUDIO, new_scs_version)

        elif platform.system() == "Darwin":
            squish_server = './squishserver'
            squish_server_path = "/Applications/Squish_6.2/bin"
            old_scs_path = "/Applications/SoundClear\ Studio\ %s.app/Contents/MacOS/" % old_scs_version
            new_scs_path = "/Applications/SoundClear\ Studio\ %s.app/Contents/MacOS/" % new_scs_version
        else:
            raise ValueError("Unsupported Platform")
        cwd = os.getcwd()
        os.chdir(squish_server_path)
        # Remove existing AUT
        cmd = '%s --config removeAppPath %s' % (squish_server, old_scs_path)
        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in removing the scs path")

        cmd = '%s --config removeAUT %s "%s"' % (squish_server, SOUND_CLEAR_STUDIO, old_scs_path)
        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in removing the scs AUT")

        # Add New AUT
        cmd = '%s --config addAppPath %s' % (squish_server, new_scs_path)
        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in adding the scs path")

        cmd = '%s --config addAUT  %s "%s"' % (squish_server, SOUND_CLEAR_STUDIO, new_scs_path)
        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            raise BspCmdLineError("Problem in adding the scs AUT")

        os.chdir(cwd)
        return True

    def get_installed_scs_latest_base_version(self, scs_sl_name=SOUND_CLEAR_STUDIO):
        """
        Gets the installed version
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return returns scs base version
        """
        self.log.info("Get the installed %s base version" % scs_sl_name)
        scs_base_version = "0.0"
        if self.platform == "Windows":
            last = []
            if os.path.exists(self.installed_scs_folder_path):
                for filename in os.listdir(self.installed_scs_folder_path):
                    if filename.find("%s" % scs_sl_name) != -1:
                        last = str(re.findall('\d+\.\d+', filename))
                        if last < str(re.findall('\d+\.\d+', filename)):
                            last = str(re.findall('\d+\.\d+', filename))
                if last == []:
                    return scs_base_version
                else:
                    return str(last[2:-2])
            else:
                return scs_base_version
        if self.platform == "Darwin":
            last = []
            if os.path.exists(self.installed_scs_folder_path):
                for filename in os.listdir('/Applications'):
                    if str(filename).find("SoundClear Studio") > -1:
                        last = str(re.findall('\d+\.\d+', filename))
                        if last < str(re.findall('\d+\.\d+', filename)):
                            last = str(re.findall('\d+\.\d+', filename))
                return str(last[2:-2])
            else:
                return scs_base_version

    def get_installed_scs_latest_full_version(self, scs_sl_name=SOUND_CLEAR_STUDIO):
        """
        Gets the full SCS version
        @param scs_sl_name - SoundClearStudio or StudioLink
        @return Returns SCS full version
        """
        self.log.info("Get the installed %s full version" % scs_sl_name)
        if scs_sl_name == SOUND_CLEAR_STUDIO:
            version_txt_file_name = "scs.txt"
        else:
            version_txt_file_name = "link.txt"
        fp = None
        scs_full_version = "0.0.0.0"
        base_version = self.get_installed_scs_latest_base_version(scs_sl_name=scs_sl_name)
        if base_version is None:
            self.log.info("%s is not installed" % scs_sl_name)
            return scs_full_version
        if self.platform == "Windows":
            full_version_path = os.path.join(self.installed_scs_folder_path,
                                             "%s_" % scs_sl_name + base_version,
                                             "version", version_txt_file_name)
        if self.platform == "Darwin":
            full_version_path = '%s/SoundClear Studio %s.app/Contents/version/scs.txt' % \
                                (self.installed_scs_folder_path, base_version)

        if os.path.exists(full_version_path):
            try:
                fp = open(full_version_path)
                scs_full_version = fp.readline().rstrip()
            finally:
                fp.close()
        else:
            self.log.info("%s doesn't installed properly" % scs_sl_name)
        return scs_full_version

    def get_installed_scs_link_latest_full_version(self):
        """
        Gets the full version of installed StudioLink exe
        @return: returns the full version of installed StudioLink exe
        """
        return self.get_installed_scs_latest_full_version(scs_sl_name=STUDIO_LINK)

    def bsp_cmds_for_scs(self, bsp_pkg_name=None, bsp_builds_dir=None, cmd_options='', script_name=None, system_name=None):
        """
        Installs the scs bsp package

        @param bsp_pkg_with_file_name - bsp package path with file name.
        @param scs_installer_path - Path for SoundClearStudio.exe, if not
        given takes from download_dir if exists otherwise throws exception.
        """
        flag = False
        if bsp_builds_dir is None:
            bsp_builds_dir = self.download_dir
        if bsp_pkg_name is None:
            bsp_pkg_name = self.bsp_pkg_name

        # get the whole bsp package file name with version
        bsp_pkg = None
        if cmd_options == 'exec':
            bsp_builds_dir = self.bsp_installed_path
        files_in_download_dir = self.get_file_names(bsp_builds_dir)
        for item in files_in_download_dir:
            if item.startswith(bsp_pkg_name) or item.startswith(bsp_pkg_name.upper()):
                bsp_pkg = item
                break
        if bsp_pkg is not None:
            bsp_pkg_with_file_name = bsp_builds_dir + os.sep + bsp_pkg

        base_version = self.get_installed_scs_latest_base_version()
        if base_version is None:
            self.log.error("SCS is not installed")

        current_dir = os.getcwd()
        if self.platform == "Windows":
            installed_scs_ide_path = os.path.join(self.installed_scs_folder_path,
                                                  "%s_" % SOUND_CLEAR_STUDIO +
                                                  base_version.strip(), "ide")
            if os.path.exists(installed_scs_ide_path):
                os.chdir(installed_scs_ide_path)
            else:
                raise IOError("%s path doesn't exists" % installed_scs_ide_path)

        if cmd_options == "inst":
            self.log.info("Installing BSP Package")
            if self.platform == "Windows":
                cmd = "SoundClearStudio.exe -uninst \"%s\" -pkg %s" % (bsp_pkg_name.upper() + " BSP", bsp_pkg_with_file_name)
            if self.platform == "Darwin":
                cmd = "%s/SoundClear\ Studio\ %s.app/Contents/MacOS/SoundClearStudio -uninst \"%s\" -pkg %s" % \
                      (self.installed_scs_folder_path, base_version, bsp_pkg_name.upper() + " BSP", bsp_pkg_with_file_name)
                cmd = "echo " + '"' + self.password + '"' + " | " + cmd
        if cmd_options == 'exec':
            self.log.info("Running Jython script")
            if not script_name:
                raise BspCmdLineError("No python scripts input given for file->execute")
            full_script_path = os.path.join(self.scripts_path, script_name)
            if not os.path.exists(full_script_path):
                raise IOError("File %s does not exist" % full_script_path)

            if self.platform == "Windows":
                cmd = "SoundClearStudio.exe -pkg %s -exec %s %s" % (bsp_pkg_with_file_name, full_script_path, system_name)
            if self.platform == "Darwin":
                cmd = "%s/SoundClear\ Studio\ %s.app/Contents/MacOS/SoundClearStudio -pkg %s %s" % \
                      (self.installed_scs_folder_path, base_version, bsp_pkg_with_file_name, full_script_path, system_name)
                cmd = "echo " + '"' + self.password + '"' + " | " + cmd

        proc = subprocess.call(cmd, shell=True)
        if proc != 0:
            os.chdir(current_dir)
            if not cmd_options:
                raise BspCmdLineError("Failed to install BSP")
            if cmd_options == 'exec':
                raise BspCmdLineError("Failed to execute python script %s" % script_name)
        flag = True
        os.chdir(current_dir)
        return flag

    def get_bsp_pkg_version(self, bsp_name):

        base_version = self.get_installed_scs_latest_base_version()
        if base_version is None:
            self.log.error("SCS is not installed")
        if self.platform == "Windows":
            scs_pkg_xml = 'C:\\ProgramData\\Cirrus Logic\\SCS_%s\\package_manager\\SCS_Packages.xml' % base_version
        if self.platform == "Darwin":
            scs_pkg_xml = '/Users/Shared/Cirrus Logic/SCS_%s/package_manager/SCS_Packages.xml' % base_version

        if os.path.exists(scs_pkg_xml):
            xml_con = open(scs_pkg_xml, 'r')
            etree_root = etree.parse(scs_pkg_xml)
            find_text = etree.XPath("//*/*/*/packageName[text() = '%s BSP']" % bsp_name.upper())
            try:
                bsp_ele = find_text(etree_root)[0].getparent()
            except:
                self.log.info("%s BSP is not installed" % bsp_name)
                return None
            return bsp_ele.getchildren()[1].text
        else:
            return None

    def read_yml(self, yml_file):
        """
        Function to read yml file
        @param yml_file [str] yml file path
        @return [dict] yml content in dictionary format
        """
        with open(yml_file, "r") as yml_file_handle:
            yml_content = yaml.safe_load(yml_file_handle)
        return yml_content

    def write_yml(self, config_yml, data):
        """
        Writes data to yml file
        :param config_yml: [str] yml file path
        :param data: updated yml data
        :return:
        """
        with open(config_yml, 'w') as yaml_file_handle:
            yaml.dump(data, yaml_file_handle, default_flow_style=False)


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class BspCmdLineCli(BspCmdLine, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                BspCmdLine.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, BspCmdLine)

        RUN = BspCmdLineCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest

        class BspCmdLineUnitTest(BaseTest):

            def setup(self):
                self.record_test_name()
                self.bsp_cmdline = BspCmdLine()
                self.bsp_cmdline.username = "sgorle"
                self.bsp_cmdline.download_dir = r"C:\Downloads"
                self.bsp_cmdline.bsp_path = self.bsp_cmdline.download_dir + "cdb42l75_bsp.scspkg"
                self.bsp_cmdline.installed_scs_folder_path = r"C:\Program Files\Cirrus Logic"

            def initiate(self):
                self.result.test_step('Check whether SCS is installed')
                version = self.bsp_cmdline.get_installed_scs_latest_base_version()
                self.result.assert_not_equal(None, version, "Checking the SCS Version")

                self.result.test_step('Uninstall the SCS')
                ret = self.bsp_cmdline.uninstall_scs(self.bsp_cmdline.username)
                self.result.assert_true(ret, "Expected SCS Uninstall successful")

                self.result.test_step('Install the SCS')
                ret = self.bsp_cmdline.install_scs(self.bsp_cmdline.download_dir)
                self.result.assert_true(ret, "Expected SCS Install successful")

                self.result.test_step('Install the BSP')
                ret = self.bsp_cmdline.bsp_cmds_for_scs(self.bsp_cmdline.bsp_path)
                self.result.assert_true(ret, "Expected BSP Install successful")

            def complete(self):
                self.result.assert_equal("PPPP : PASS",
                                         "%s : %s" % (self.result.step_outcome(),
                                                      self.result.get_overall_outcome()),
                                         "Expected Pass")

            def teardown(self):
                self.result.report_result_to_tf()

        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        TEST = BspCmdLineUnitTest(result=RESULTS)
        TEST.run()
