#!/usr/bin/env python
"""
@brief
A resource library to interact with wisce.

@Description:
Features supported:
- Start and stop wiscelink.
@b Usage
@code
wiscelink = ResourceWisceLink()
@endcode
"""
import requests
from requests.exceptions import Timeout
import json
import sys
import os
import time
from subprocess import Popen, STDOUT

TIMEOUT = 60

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class WisceLinkError(Exception):
    """Define WisceLinkError Exception type"""
    pass


class ResourceWisceLink(object):
    """
     A resource library to interact with wisce.
    """
    def __init__(self):
        self.log = logging.getLogger(ResourceWisceLink.__name__)
        self.local_host_url = None

    def set_config_details(self, config):
        self.local_host_url = config['localaddress']

    def close_wisce(self):
        """
        This method will close the wisce gui
        """
        isRunning = os.system('tasklist /FI "IMAGENAME eq WISCE.exe" 2>NUL | find /I /N "WISCE.exe">NUL')
        if isRunning == 0:
             self.log.info('Closing WISCE...')
        os.system('START /wait taskkill /f /im WISCE.exe')

    def open_wisce(self):
        """
        This method will start the wisce gui
        """
        self.log.info('Starting WISCE...')
        try:
           value = Popen(["C:\Program Files (x86)\Wolfson Evaluation Software\WISCE.exe"])
        except:
            self.log.error('Unable to process the request to start WISCE')
        if(not value):
            self.log.error('Failed to start WISCE')
        time.sleep(TIMEOUT)


    def read_register_by_name(self, system, device, reg):
        """
        This method is for reading the register by name
        @param system    : system name (string)
        @param device    : device name (string)
        @param reg       : register name (string)
        @return          : value of the register in hex string
        """
        url = self.local_host_url + "/" + system + "/" + device + "/field/"
        try:
            r = requests.get(url + reg)
            data = r.json()
            return hex(data.get('value'))
        except Timeout:
            self.log.error('Read register request timed out')


    def write_register_by_name(self, system, device, reg, value):
        """
        This method is for writing value to the register by name
        @param system    : system name (string)
        @param device    : device name (string)
        @param reg       : register name (string)
        @param value     : value in hex format (string)
        @return          : true/ false  (if the value is written correctly it will return true otherwise return false)
        """
        url = self.local_host_url + "/" + system + "/" + device + "/field/"
        try:
            r=requests.post(url + reg, {'value': value})
            data = r.json()
            return hex(data.get('value')) == str(value)
        except Timeout:
            self.log.error('Write register request timed out')


    def read_register_by_addr(self, system, device, reg_addr):
        """
        This method is for reading the register by name
        @param system    : system name (string)
        @param device    : device name (string)
        @param reg_addr  : register address in hex strin(string)
        @return          : value of the register in hex string
        """
        url = self.local_host_url + "/" + system + "/" + device + "/addr/"
        try:
            r=requests.get(url + str(reg_addr))
            data = r.json()
            return hex(data.get('value'))
        except Timeout:
            self.log.error('Rread register request timed out')


    def write_register_by_addr(self, system, device, reg_addr ,value):
        """
        This method is for writing value to the register by name
        @param  system    : system name (string)
        @param  device    : device name (string)
        @param  reg_addr  : register address in hex string (string)
        @param  value     : value in hex format (string)
        @return          : true/ false  (if the value is written correctly it will return true otherwise return false)
        """
        url = self.local_host_url + "/" + system + "/" + device + "/addr/"
        try:
            r=requests.post(url + str(reg_addr) ,{'value': value})
            data = r.json()
            return hex(data.get('value')) == str(value)
        except Timeout:
            self.log.error('Write register request timed out')


    def block_write_by_addr(self, system, device, reg_addr ,values):
        """
        This method is for writing value to the register by name
        @param  system    : system name (string)
        @param  device    : device name (string)
        @param  reg_addr  : starting register address in hex string (string)
        @param  values    : array of values in hex format (list of strings)
        @return success  : array of boolean  (if the value is written correctly it will return true otherwise return false)
        """
        try:
            addr= reg_addr
            success = []
            for value in values:
                ret = self.write_register_by_addr(system, device, addr, value)
                addr = str(int(addr, 16) + 4)
                success.append(ret)
            return all(success)
        except Timeout:
            self.log.error("Block write request timed out")

    def block_read_by_addr(self, system, device, reg_addr ,length):
        """
       This method is for writing value to the register by name
       @param  system    : system name (string)
       @param  device    : device name (string)
       @param  reg_addr  : starting register address in hex string (string)
       @param  length    : number of values to read (int)
       @return values    : array of hex string (with 'length' number of values)
       """
        try:
            addr= reg_addr
            values = []
            for _ in range(length):
                value = self.read_register_by_addr(system, device, addr)
                addr = str(int(addr, 16) + 4)
                values.append(value)
            return values
        except Timeout:
            self.log.error("Block read request timed out..")

    def load_script(self, system, path, timeout):
        """
        @param  system    : system name (string)
        @param  device    : device name (string)
        @param  path      : path of the script txt file
        @param  timeout   : timeout (int)
        """
        url = self.local_host_url + "/" + system
        try:
            response =requests.post(url,{'file': path},timeout=timeout)
            self.log.info(f'Loaded Script file : {path}')
        except Timeout:
            self.log.error('Load script request timed out')


    def load_firmware(self, system, device, dsp, path, timeout):
        """
        This is the method for loading the firmware file
        @param  system    : system name (string)
        @param  device    : device name (string)
        @param  dsp       : dsp name (string)
        @param  path      : path of the firmware file
        @param  timeout   : timeout (int)
        """
        url = self.local_host_url + "/" + system + "/" + device + "/" + dsp
        try:
            response =requests.post(url,{'file': path},timeout=timeout)
            self.log.info(f'Loaded Firmware : {path}')
        except Timeout:
            self.log.error('Load firmware request timed out')


    def get_systems(self):
        """
        This is the method for getting all the systems
        @ return systems : returns array of all the systems connected
        """
        try:
            r = requests.get(self.local_host_url)
            systems = {}
            for system in r.json()['systems']:
                systems[system['href'].split('/')[-2]]= system['name']
            self.log.info(f"Connected systems : {systems}")
            return systems
        except Timeout:
            self.log.error("Get systems request timed out")

    def get_devices(self, system):
        """
        This is the method for getting all the devices
        @param  system : name of the system
        @return devices: array of all the devices connected to system
        """
        try:
            r = requests.get(self.local_host_url + system)
            devices = {}
            for device in r.json()['devices']:
                devices[device['href'].split('/')[-2] ] = device['name']
            self.log.info(f"Connected devices : {devices}")
            return devices
        except Timeout:
            self.log.error("Get devices request timed out")

    def refresh_devices(self):
        """
        This is the method for refreshing all the devices
        """
        try:
            r = requests.get(self.local_host_url + "_refresh", timeout=TIMEOUT)
            systems = {}
            for system in r.json()['systems']:
                systems[system['href'].split('/')[-2]] = system['name']
            self.log.info(f"Connected systems : {systems}")
        except Timeout:
            self.log.error('Refresh devices request timed out')

if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class ResourceWisceLinkCli(ResourceWisceLink, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""
            def __init__(self, *args, **kwargs):
                ResourceWisceLink.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceCirrusLink)

        RUN = ResourceWisceLinkCli()
    else:
        # Unit test works only with real hardware
        # Replace the loacal address with Wisce local host address
        # Also needs to change the system name in the get_device mathod call
        class ResourceWisceLinkUnittest(ResourceWisceLink):
            def __init__(self):
                # wisce link local host address
                self.config = {'localaddress': 'http://localhost:9000/'}
                super(ResourceWisceLinkUnittest, self).__init__()

            def test_wisce_link(self):
                self.set_config_details(self.config)
                self.close_wisce()
                self.open_wisce()
                self.get_systems()
                self.get_devices('system0')
                self.close_wisce()

        resource_wisce_link_test = ResourceWisceLinkUnittest()
        resource_wisce_link_test.test_wisce_link()

