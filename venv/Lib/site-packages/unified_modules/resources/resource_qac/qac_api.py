import os, sys
import json, requests
try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging

class qac_api(object):
    def __init__(self):
        self.log = logging.getLogger(qac_api.__name__)

    def setupqac(self, qac_credential, qac_url, ProjectName):
        self.qac_credential = (qac_credential.split(':')[0], qac_credential.split(':')[1])            # credential for QAC API (username@cirrus.com:password)
        self.qac_url = qac_url                          # web address of QAC API (https://aus-qac-prd-....com)
        self.ProjectId = self.__get_project_id(ProjectName)                      # project ID of QAC project

    # Testset Functions
    def delete_testset_items(self, TestsetName):
        self.log.info('Deleting all Testset items in the autogenrated validation testset: %s ...' % (TestsetName))
        TestsetId = self.__get_testset_id(TestsetName)
        r = requests.delete("%s/rest-api/service/api/v1/projects/%s/testsets/%s/items" % (self.qac_url, self.ProjectId, TestsetId), auth=self.qac_credential)
        self.__report(r)

    def add_test_to_testset(self, TestsetName, TestName=None, TestId=None):
        test_info = None
        if (TestId is None and TestName is not None):
            test_info = self.__get_test_info(TestName=TestName)
        elif (TestId is not None and TestName is None):
            test_info = self.__get_test_info(TestId=TestId)
        else:
            self.log.error("Please provide either TestName or TestId")
            return
        TestsetId = self.__get_testset_id(TestsetName)
        test_info['TestId'] = test_info['id']
        test_info2 = {"Items": test_info}
        r = requests.post(
            "%s/rest-api/service/api/v1/projects/%s/testsets/%s/items" % (self.qac_url, self.ProjectId, TestsetId),
            json=test_info2, auth=self.qac_credential)
        self.__report(r)



    def __get_testset_id(self, TestsetName):
        r = requests.get("%s/rest-api/service/api/v1/projects/%s/testsets?limit=2000" % (self.qac_url, self.ProjectId), auth=self.qac_credential)
        if (self.__report(r)):
            json_r = r.json()
            for testset in json_r['results']:
                if (testset['title'] == TestsetName):
                    return testset['id']
        return None

    # Test Functions
    def add_test_to_qac(self, TestName, CirrusTestId, FolderName):
        exist_test_info = self.__get_test_info(TestId=CirrusTestId)
        if (exist_test_info is None):
            self.log.info('Adding new test to QAC: %s' % (TestName))
            test_info = self.__create_test(TestName=TestName, FolderName=FolderName, CirrusTestId=CirrusTestId)
            r = requests.post("%s/rest-api/service/api/v1/projects/%s/tests" % (self.qac_url, self.ProjectId), json=test_info, auth=self.qac_credential)
            self.__report(r)

    def __create_test(self, TestName, FolderName, CirrusTestId):
        test_info = self.__get_test_info('Regression Dummy')
        test_info['title'] = TestName
        test_info['FolderId'] = self.__get_folder_id(FolderName)
        for custom_item in test_info['custom_fields']:
            if (custom_item['name'] == "Cirrus_Test_Id"):
                custom_item['value'] = CirrusTestId
                break
        return test_info


    def __get_test_info(self, TestName=None, TestId=None):
        if (TestName is not None and TestId is None):
            r = requests.get("%s/rest-api/service/api/v2/projects/%s/tests?Filter=(title~'%s')" % (self.qac_url, self.ProjectId, TestName), auth=self.qac_credential)
            if (self.__report(r)):
                json_r = r.json()
                if (len(json_r['results']) > 1):
                    self.log.info('Multiple tests searched, using the first one found')
                    return json_r['results'][0]
                elif (len(json_r['results']) == 1):
                    return json_r['results'][0]
        elif (TestName is None and TestId is not None):
            r = requests.get("%s/rest-api/service/api/v2/projects/%s/tests?limit=2000" % (self.qac_url, self.ProjectId), auth=self.qac_credential)
            if (self.__report(r)):
                json_r = r.json()
                filtered_test_info = []
                for test_info in json_r['results']:
                    for custom_item in test_info['custom_fields']:
                        if (custom_item['name'] == "Cirrus_Test_Id"):
                            if (custom_item['value'] == TestId):
                                filtered_test_info.append(test_info)
                if (len(filtered_test_info) > 1):
                    self.log.info('Multiple tests searched, using the first one found')
                    return filtered_test_info[0]
                elif (len(filtered_test_info) == 1):
                    return filtered_test_info[0]
        return None

    def __get_test_id(self, TestName):
        r = requests.get("%s/rest-api/service/api/v2/projects/%s/tests?Filter=(title~'%s')" % (self.qac_url, self.ProjectId, TestName), auth=self.qac_credential)
        if (self.__report(r)):
            json_r = r.json()
            if (len(json_r['results']) == 0):
                return None
            if (len(json_r['results']) > 1):
                self.log.info('Multiple tests searched, using the first one found')
            return json_r['results'][0]['id']
        return None

    # Folder Functions
    def __get_folder_id(self, FolderName):
        r = requests.get("%s/rest-api/service/api/v2/projects/%s/tests/folders?limit=2000" % (self.qac_url, self.ProjectId), auth=self.qac_credential)
        if (self.__report(r)):
            json_r = r.json()
            for folder in json_r['results']:
                if (folder['folder_name'] == FolderName):
                    return folder['id']
        return None

    # Project Functions
    def __get_project_id(self, ProjectName):
        r = requests.get("%s/rest-api/service/api/v1/projects" % (self.qac_url), auth=self.qac_credential)
        if (self.__report(r)):
            json_r = r.json()
            for project in json_r['results']:
                if (project['proj_name'] == ProjectName):
                    return project['id']
        return None

    # Result Reporting Functions
    def __report(self, r):
        if (r.status_code != 200):
            self.log.info("In HTML request: %s %s" % (r.request.method, r.request.url))
            self.log.info("Error <%s>: %s" % (r.status_code, r.content))
            return False
        return True
