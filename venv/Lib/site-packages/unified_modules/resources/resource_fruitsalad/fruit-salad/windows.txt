################################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file windows.txt
### @brief Installation, usage and development notes for Windows.
###
### @version $Id: windows.txt 961 2015-03-18 14:54:29Z piotrs $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################
Fruit Salad

Fruit Salad is an extensible framework of scripts and binaries to
support automated acceptance testing of Cirrus/Wolfson devices and software across a variety of platforms.

At its core Fruit Salad runs the Behaviour-Driven Development (BDD) tool cucumber (cukes.info)
which allows expected behaviours to be written in a plain text feature files that can be run
to verify whether or not a product passes a given specification.

It is the intention of Fruit Salad that a single specification can be used to verify a device or software
component throughout its lifecycle regardless of the underlying platform on which it is being tested.

Running Fruit Salad

There are two possible environments for running Fruit Salad on a windows platform.

1) with an existing ruby install
   e.g. > ruby fruitsalad.rb <target> -f <path to feature>
2) using a standalone executable that bundles incorporates a Ruby environment and core utilities/gems.
   e.g. > fruitsalad.exe <target> -f <path to feature>

Targets:

  wicse   - test a device using WISCE(TM) on windows
  linux   - native linux testing (for example on the Rasberry Pi)
  remote  - debug a remote linux/android target over ssh
  windows - debug target using the windows platform for playback/record
  null    - debug target for testing APIs (no playback/record, copies files)
  windows_remote - debug a remote windows target over ssh


Running Fruit Salad with WISCE

fruitsalad.exe contains a Ruby environment along with all the core utilities as
well as any gems needed by fruitsalad. It can be extended by modifying sources
in generic and wisce using those features. Alternatively a local ruby environment
can be substituted.

> fruitsalad.exe wisce -f <path to feature>
> ruby fruitsalad.rb wisce -f <path to feature>

Debugging without hardware using the windows target

FruitSalad includes the windows target which allows the user to debug features
that depend on playback e.g. filter response measurements, without using
hardware or interfacing with WISCE.

> fruitsalad.exe windows -f <path to feature>
> ruby fruitsalad.rb windows -f <path to feature>

Building Fruit Salad distributable for Windows

fruitsalad.exe can be rebuilt from sources if a local ruby install is present along with the ocra gem:
> gem install ocra
> ocra fruitsalad.rb --output fruitsalad.exe --gemfile Gemfile --no-dep-run --add-all-core --gem-full --dll libffi-6.dll --dll libyaml-0-2.dll
