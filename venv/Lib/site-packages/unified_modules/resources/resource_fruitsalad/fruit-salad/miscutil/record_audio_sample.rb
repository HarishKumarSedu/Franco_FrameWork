################################################################################
###
### Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies. 
###
### @file   record_audio_sample.rb
### @brief  Use the portaudio_client to record and playback an audio sample.
###
### A development utility script simplifying the recording of wav sample files
### using Fruit Salads portaudio_client.
###
### @version \$Id: record_audio_sample.rb 605 2014-12-17 12:59:15Z aangus $
###
### Warning
###   This software is specifically written for Cirrus Logic devices. 
###   It may not be used with other devices.
###
#################################################################################

# Setup the Fruitsalad environment
require_relative '../src/fruitsalad_env_setup.rb'
# Load in the portaudio_client
require 'portaudio_client'

# Need a filename to record to
unless ARGV.length > 0
    puts 'Please enter a filename to record to.'
    exit
end

outfile_name = ARGV[0]

# Prompt user for permission to overwrite file if it already exists.
if File.exists?( outfile_name )
        puts 'File exists, overwrite (Y/N)?'        
        gc = STDIN.gets.chomp
        unless gc.upcase =~ /Y(ES)?/
            exit
        end
end

puts 'Press [enter] to start...'
STDIN.gets

PortaudioClient::start
PortaudioClient::StartRecordingToFile( outfile_name )

puts 'Recording: press [enter] to stop...'
STDIN.gets

PortaudioClient::StopRecording()

puts 'Playing back recording'
PortaudioClient::StartPlaybackFromFile( outfile_name )
PortaudioClient::wait_for_notification
PortaudioClient::StopPlayback()

###############################END OF FILE#####################################