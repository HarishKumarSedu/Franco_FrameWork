###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  read_register.sh
### @brief Utility script for reading registers from regmap.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################
reg=$1
bits=$2
range_file=$3
register_file=$4

offset=0
reg=$(printf "%d" $reg)

if [ $bits -eq 16 ]; then
    line_width=10
    range_div=1
elif [ $bits -eq 32 ]; then
    line_width=16
    range_div=2
fi

offset=$(cat $range_file | while read line; do
    tmpIFS=IFS
    IFS='-'
    set -- $line

    range0=$(printf "%d" "0x$1")
    range1=$(printf "%d" "0x$2")

    IFS=$tmpIFS

    if [ $reg -ge ${range0} -a $reg -le ${range1} ]; then
        offset=$(( $offset + ($reg - ${range0}) / $range_div ))
        echo "${offset}"
        break
    fi

    offset=$(( $offset + (${range1} - ${range0}) / $range_div + 1 ))
done)

val=$(dd if=$register_file bs=$((line_width + 1)) skip=${offset} count=1 status=noxfer 2> /dev/null)
echo $val
################################# END OF FILE #################################
