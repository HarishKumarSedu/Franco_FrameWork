###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies. 
###
### @file   measure_snr_trigger_threshold.rb
### @brief  Measures the successful trigger rate for Soundclear Control as noise
###         increases.
###
### @version \$Id: measure_snr_trigger_threshold.rb 971 2015-03-26 11:26:52Z emmas $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

#
# Requires
#
require 'csv'
require_relative '../src/fruitsalad_env_setup.rb'

require 'configuration'

###############################################################################
#
# Encapsulates the functionality of a batch run of Sound Clear Control experiments
# to find the noise threshold at which triggering ceases to operate reliably.
#
###############################################################################
class SNRExperimentRunner

    ###########################################################################
    #
    # @function initialize
    #
    # Loads the configuration file and creates the FruitSalad device.
    #
    # @param [String] config_file Name of the YAML configuration file to load.
    #
    ###########################################################################
    def initialize( config_file )
        load_config config_file
        create_device
    end

    ###############################################################################
    #
    # @function perform_experiment
    #
    # Perform a single experiment at the specified simulated background noise level.
    #
    # Resets and configures the test hardware, and uploads and starts the firmware,
    # as part of the experiment's execution.
    #
    # @param snr_db SN ratio to be configured for this test run.
    #
    # @return [Boolean] True, if the algorithm detected the triggering phrase, else false.
    #
    ###############################################################################
    def perform_experiment( snr_db )
        # Set up device
        @device.usecase( :reset )
        @device.usecase( :default )
        # Load firmware
        @device.soundclear_control.load( @dsp_core_id )
        # Routing
        if @multichannel
            @device.usecase( 'psia1_to_dsp3' )
        else
            @device.usecase( 'soundclear_control' )
        end
        @device.soundclear_control.start
        # Set controlled variable
        @device.simulated_noise_model.noise_snr = snr_db
        @device.simulated_noise_model.noise_track = @noise_track
        @device.simulated_noise_model.noise_environment = @noise_environment
        # Play trigger
        if @multichannel
            @device.multitrack_playback( @multichannel_trigger )
        else
            @device.playback( @single_channel_trigger )
        end
        return @device.soundclear_control.triggered?
    end

    ###############################################################################
    #
    # @function load_config
    #
    # Load the test's parameters from a config file.
    #
    # Sets sensible default values for any configuration variable not explicitly set
    # in the file.
    #
    # @param [String] config_file Name of the YAML configuration file to load.
    #
    ###############################################################################
    def load_config( config_file )
        Conf::set_source config_file
        @csv_file_name = Conf::property( :CSVFileName, "SNR_trigger_threshold.csv" )
        @dsp_core_id = Conf::property( :DspCoreID, 2 )
        @values_to_test = Conf::property( :ValuesToTest, [20,10,0] )
        @repeats = Conf::property( :Repeats, 3 )
        @single_channel_trigger = Conf::property( :SingleChannelTrigger, 'resources/utterance21_bottomleft.wav' )
        @multichannel_trigger = Conf::property( :MultiChannelTrigger, [ 
            [ 'resources/utterance21_bottomleft.wav', 1 ],
            [ 'resources/utterance21_bottomleft.wav', 2 ],
            [ 'resources/utterance21_bottomleft.wav', 3 ],
            [ 'resources/utterance21_bottomleft.wav', 4 ]
        ] )
        @multichannel = Conf::property( :Multichannel, false )
        @noise_environment = Conf::property( :NoiseEnvironment, nil )
        @noise_track = Conf::property( # Indenting this properly was making my
            :NoiseTrack, File.join(    # text editor crash.
                ENV['FRUITSALAD_HOME'], 
                'resources', 
                'cafe_noise', 
                'bottomleft', 
                'utterance21.wav' 
            ) 
        )

        # Hack to force playback channels/sample rate to match those of the trigger
        # file so as to sidestep a crash in portaudio playback when attempting to
        # force a mono recording to multiple channels.
        Conf::set( :Playback_Channels, 1 )
        Conf::set( :SampleRate, 48000 )
    end

    ###############################################################################
    #
    # @function create_device
    #
    # Instantiate the FruitSalad device.
    #
    # @note Should only be called once, after load_config, as the FruitSalad device 
    #       will read configuration data from that config file.
    #
    # (no parameters)
    #
    ###############################################################################
    def create_device
        require_relative '../targets/wisce/WISCESalad.rb'
        @device = FruitSalad::WISCESalad.new
        @device.setup
    end

    ###########################################################################
    #
    # @function run_all_tests
    #
    # Entry point into the class' operation.  Runs the experiments at the 
    # snr values specified by :ValuesToTest in the config file, and 
    # repeats as many times as :Repeats in the config file.
    #
    # (no parameters)
    #
    ###########################################################################
    def run_all_tests
        trigger_percentages = @values_to_test.map do |value|
            results = (1..@repeats).to_a
            results.map! { |_| perform_experiment( value ) }
            results = results.find_all { |x| x }.length / results.length.to_f * 100
            [ value, results ]
        end
        puts "Data: #{trigger_percentages}"

        write_results trigger_percentages
    end

    ###########################################################################
    #
    # @function write_results
    #
    # Dump the experiment results to a CSV file. The name of the file is specified
    # ahead of time with the configuration variable :CSVFileName.
    #
    # @param [Array<Array>] trigger_percentages The data to write to the CSV file.
    #
    ###########################################################################
    def write_results( trigger_percentages )
        # Write to CSV
        CSV.open( @csv_file_name, 'wb' ) do |csv|
            csv << ["SNR (dB)", "Percentage successful triggers (% out of #{@repeats})"]
            trigger_percentages.each do |row|
                csv << row
            end
        end
        puts "Experiment results logged to file #{@csv_file_name}."
    end

end

# Script main
if __FILE__ == $0
    raise "Configuration file not specified" if ARGV.size < 1
    runner = SNRExperimentRunner.new ARGV[0]
    runner.run_all_tests
end

################################## END OF FILE ################################
