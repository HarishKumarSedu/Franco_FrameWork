################################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   stand_alone_fft.rb
### @brief  Invokes Fruit Salad's FFT Analysis on a sine tone generated outside
#           of Fruit Salad as a stand-alone utility.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
################################################################################

#
# Requires
#
require_relative '../src/fruitsalad_env_setup.rb'
require 'configuration'
require 'wavefile_analyzer'
require 'optparse'

###############################################################################
#
# Permits the use of verify_frequency_clusters as a stand-alone program.
#
###############################################################################
class StandAloneFFT

    include WavefileAnalyzer

    ###########################################################################
    #
    # @function parse
    #
    # Performs parsing of command-line switches as well as the FILE and FREQUENCY
    # arguments.
    #
    # (no parameters)
    #
    ###########################################################################
    def parse
        # Default allowable error between measurable and expected frequency.
        @error = 5

        option_parser = OptionParser.new do |option|
            option.banner = 'Usage: stand_alone_fft.rb <FILE> <FREQUENCY> [OPTIONS]'
            option.separator ''
            option.separator 'FILE, the wav file to verify.'
            option.separator 'FREQUENCY, the expected frequency in Hz'
            option.separator ''
            option.separator 'Options:'
            option.on( '--error <ERROR>', 'The margin for error allowed between'\
                                          ' the measured peak frequency and the'\
                                          ' expected frequency  in Hz (defaults'\
                                          ' to 5 Hz)'
                     ) { |error| @error = error.to_f }
            option.on( '-h', '--help', 'Show this text' ) do
                puts ''
                puts option_parser
                exit( 0 )
            end
        end

        option_parser.parse!
        @file = ARGV.delete_at( 0 )
        @expected_frequency = ARGV.delete_at( 0 )
        if @file.nil? or @expected_frequency.nil?
            puts 'File or frequency missing.'
            puts ''
            puts option_parser
            exit( 1 )
        end

        begin
            @expected_frequency = Float( @expected_frequency )
        rescue
            puts 'Frequency not a number'
            puts ''
            puts option_parser
            exit( 1 )
        end

        puts "Analyzing file #{@file}."
        puts "Looking for #{@expected_frequency} Hz"
        @expected_frequency = @expected_frequency.to_f

    end

    ###########################################################################
    #
    # @function run
    #
    # Verifies that @file is a simple sine wav file of frequency @frequency.
    #
    # As a side-effect this method also emits information to stdout about which
    # frequencies dominate the recording and whether the expected frequency is
    # found.
    #
    # (no parameters)
    #
    # @return [Integer] -1 if verification fails, else 0
    #
    ###########################################################################
    def run
        measured = dominant_frequencies( @file )
        missing = verify_frequency_clusters( [@expected_frequency], measured, @error )
        if missing.length > 0
            puts 'Fourier does not match expected output.'
            puts "Missing frequencies: #{missing}"
            return -1
        else
            return 0
        end
    end

end

#
# Program main.
#
if __FILE__ == $0
    analyzer = StandAloneFFT.new
    analyzer.parse
    exit( analyzer.run )
end

############################## END OF FILE ####################################
