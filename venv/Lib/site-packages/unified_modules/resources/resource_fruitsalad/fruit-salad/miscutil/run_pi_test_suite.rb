###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   run_pi_test_suite.rb
### @brief  Runs a given Fruit Salad feature against various sample rate and bit
###         depth configurations on a RPi.
###
### @version \$Id: run_pi_test_suite.rb 959 2015-03-18 13:06:36Z piotrs $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'optparse'

class RPiTestSuiteRunner
    ###########################################################################
    #
    # @function initialize
    #
    # Sets up default values for the runner script.
    #
    # (no parameters)
    #
    ###########################################################################
    def initialize
        @sampling_rates = [8000,11025,16000,22050,32000,44100,48000,88200,96000,176400,192000] # Sample rates to be tested
        @bitdepths = [16,32] # Bitdepth to be tested

        @playing_cases = ['Playback_to_Headset','Playback_to_Line_Out'] #Interface to be tested for playback, needs to give the proper script name
        @recording_cases = ['Record_from_Headset','Record_from_Mic_In'] #Interface to be tested for record, needs to give proper script name

        @ip_address = '127.0.0.1'
        @user = 'pi'
        @password = 'raspberry'
        @key = nil

        @target = 'linux'
        @feature = nil
        @audio_card_index = 0
    end

    ###########################################################################
    #
    # @function parse_options
    #
    # Parses commandline options.
    #
    # (no parameters)
    #
    ###########################################################################
    def parse_options
        option_parser = OptionParser.new do |option|
            option.on( '-a', '--address [USER:]ADDR', 'Username and address for SSH conneciton.' ) do |address|
                address = address.split( '@' )
                if address.size < 2
                    @ip_address = address[0]
                else
                    @user = address[0]
                    @ip_address = address[1]
                end
            end

            option.on( '-p', '--password PASS', 'A password to use while connecting to the device.' ) do |password|
                @password = password
            end

            option.on( '-k', '--key-file KEY', 'A key file to use while connecting to the device.' ) do |key|
                @key = key
            end

            option.on( '-t', '--target TARGET', 'Fruit Salad target to use.' ) do |target|
                @target = target
            end

            option.on( '-f', '--feature FILE', 'Fruit Salad feature file to run.' ) do |feature|
                @feature = feature
            end

            option.on( '-d', '--device ID', 'Index of the audio card to test.' ) do |audio_card_index|
                @audio_card_index = audio_card_index
            end

            option.on( '-h', '--help', 'Display help.' ) do
                puts option_parser
                exit 0
            end
        end

        option_parser.parse!
    end

    ###########################################################################
    #
    # @function run_tests
    #
    # Runs a series of Fruit Salad tests using the supplied target and feature
    # against various sample rate and bit depth combinations.
    #
    # (no parameters)
    #
    ###########################################################################
    def run_tests
        raise RuntimeError, 'The argument counts in the playing_cases and recording_cases should be the same.' if @playing_case.length != @recording_case.length

        File.open( 'results.log', 'w' ) do |results|
            @sampling_rates.each do |sampling_rate|
                @bitdepths.each do |bitdepth|
                    @playing_cases.each_index do |i|
                        playback_case = @playing_cases[i]
                        record_case = @recording_cases[i]
                        puts playback_case
                        puts record_case

                        File.open( 'testconfig.yaml', 'w' ) do |file|
                            file.puts 'Playback_Channels: 2'
                            file.puts 'Recording_Channels: 2'
                            file.puts "SampleRate: #{sampling_rate}"
                            file.puts "Bitdepth: #{bitdepth}"
                            file.puts "Remote_User: \"#{@user}\""
                            file.puts "Remote_Address: \"#{@ip_address}\""
                            file.puts "Remote_Password: \"#{@password}\""
                            file.puts "Remote_KeyFile: \"#{@key}\""
                            file.puts 'UsecasePath: "targets/pi_usecases"'
                            file.puts "DefaultUsecases: [\"Reset_paths\", \"#{playback_case}\", \"#{record_case}\"]"
                            file.puts 'SaladMix_Location: "saladmix"'
                            file.puts "Linux_AudioCardIndex: #{@audio_card_index}"
                            file.puts "\n"

                            file.close
                        end

                        results.write `ruby fruitsalad.rb #{@target} -f #{@feature} -c testconfig.yaml`
                    end

                    puts "Sample rate: #{sampling_rate}, bit depth: #{bitdepth}"
                end

            end
        end
    end
end

if __FILE__ == $0
    runner = RPiTestSuiteRunner.new
    runner.parse_options
    runner.run_tests
end
################################## END OF FILE ################################
