#!/usr/bin/ruby
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.
###                    All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any errors
### or inaccuracies that may appear in this document or any software that may be
### provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   benchmark_block_reads.rb
### @brief  Simple utility script for benchmarking block read throughput.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# Requires
###########################################################################
require 'benchmark'
require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/targets/WISCESalad.rb'

###########################################################################
#
# Re-open the WISCESalad class to gain access to the internal device
# (IDataRegion) for checking the protocol in use.
#
###########################################################################
module FruitSalad
    class WISCESalad
        attr_reader :device
    end
end

###########################################################################
#
# @function benchmark_reads
#
# Reads a block of data from the device a number of times.
#
# @param [WISCESalad] wisce         A WISCESalad instance to use
# @param [Integer]    address       Address offset to read from
# @param [Integer] number_of_bytes  number of bytes to read as a block
# @param [Integer] repeats          Number of times to repeat the block read.
#
###########################################################################
def benchmark_reads( wisce, address, number_of_bytes, repeats )
    read_from_device = true

    repeats.times do
        ret_bytes = wisce.read_block_data( address,
                                           number_of_bytes,
                                           read_from_device
                                         )
    end
end

###########################################################################
#
# @function puts_current_protocol
#
# Update and print out the current communications protocol used by the device.
#
# @param [WISCESalad] wisce A WISCESalad instance to use
#
###########################################################################
def puts_current_protocol( wisce )
    protocol = wisce.device.CommunicationsProtocol
    puts "#{wisce.lookup_WMProtocol( protocol )} (#{protocol})"
end

################################################################################
# Initialise and Set-up
################################################################################

# Number of repeats - 1000 gives a real time equivalent average for a block read
N = 1000
# Clearwater Memory Constants - unused included for reference
DSP3_XM_CLWR = 0x390000
DSP6_XM_CLWR = 0x320000
# Florida Memory Constants
DSP3_XM_FLORIDA = 0x1A0000

# Array of block sizes to use for reads
sizes = [256, 512]

################################################################################
# Argument processing (simple)
################################################################################
unless 3 == ARGV.length
    puts 'usage: benchmark_block_reads <FUSB|Aaardvark> '  \
         '<SPI|I2C> <florida|clwr>'
    exit( 1 )
end

# Default to Aardvark but allow user to specify FUSB
system = 'Aardvark'
if 'FUSB' == ARGV[0]
    system = 'FUSB Box'
end

# Default to I2C but allow user to specify SPI
enable_spi = false
if 'SPI' == ARGV[1]
    enable_spi = true
end

# Default to I2C but allow user to specify SPI
address = DSP3_XM_FLORIDA
if 'clwr' == ARGV[2]
    address = DSP6_XM_CLWR
end

puts 'Check file initialisation constants for the attached device.'
printf( "Current read address: 0x%X\n", address )

################################################################################
# Benchmark
################################################################################
wisce = FruitSalad::WISCESalad.new( false, false )

if enable_spi
    wisce.enable_spi( system, nil )
end
wisce.connect( system, nil )
wisce.usecase( :reset)

puts_current_protocol( wisce )

sizes.each do |size|
    puts "#{size}:"
    tms = Benchmark.measure { benchmark_reads( wisce, address, size, N ) }
    average = tms.real / N
    per_byte = average / size
    printf( "real: %f avg: %f per_byte: %f\n", tms.real, average, per_byte )
end

# Some Clearwater DSP6 results:
# 4.1 ms for 256 bytes and SPI (FUSB) - improves per byte with block size
# 15.02 ms for 256 bytes and I2C (FUSB) - no real improvement per byte
# 6.88 ms for 256 bytes and SPI (Aardvark) - no real improvement per byte
# 16.21 ms for 256 bytes and I2C (Aardvark) - no real improvement per byte

puts_current_protocol( wisce )
################################### END OF FILE ################################
