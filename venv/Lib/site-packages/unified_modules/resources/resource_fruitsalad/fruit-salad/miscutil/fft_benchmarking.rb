################################################################################
###
### Copyright (c) 2014 Wolfson Microelectronics plc.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Wolfson Microelectronics plc. Wolfson Microelectronics plc
### assumes no responsibility or liability for any errors or inaccuracies that
### may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Wolfson Microelectronics plc. 
###
### @file   fft_benchmarking.rb
### @brief  Benchmark tests for FruitSalad FFT analysis.
###
### @version \$Id: fft_benchmarking.rb 198 2014-09-30 10:16:00Z emmas $
###
### Warning
###   This software is specifically written for Wolfson devices. It may not be
###   used with other devices.
###
#################################################################################

#
# Includes
#
$: << "null" << "generic"
require "CSV"
require "tone_generator"
require "wavefile_analyzer"

###############################################################################
#
# Generates a number of sine tones and uses the functionality within FruitSalad
# to calculate their principle frequencies. Based on the time taken to analyse
# each it produces a CSV log file with each run.
#
###############################################################################
module FFTBenchmarking

    extend ToneGenerator
    extend WavefileAnalyzer

    ###########################################################################
    #
    # Opens a log file for writing. The name of the file is autogenerated based
    # on current system time.
    #
    ###########################################################################
    def self.openlog
        filename = "fft_benchmarking_#{Time.new.strftime( "%Y%m%d-%H%M%S-%L" )}.log"
        @@log = CSV.open( filename, "wb" )
        puts "Writing to logfile #{filename}."
    end

    ###########################################################################
    #
    # Close the open log file and flush its output.
    #
    ###########################################################################
    def self.closelog
        @@log.close
    end

    ###########################################################################
    #
    # Write data to the log file.
    #
    # @param [Array] row The data to serialise as CSV data as a Ruby Array.
    #
    ###########################################################################
    def self.writelog( row )
        @@log << row
    end

    ###########################################################################
    #
    # Execute a proc and write the time taken to complete it to the log.
    #
    # @param title [String] A human-readable name to appear in the log, i.e. the 
    #                       name of the test.
    # @param proc [Proc]    The block of code to time.
    #
    ###########################################################################
    def self.timed_cmd( title, &proc )
        start_time = Time.new
        proc.call
        finish_time = Time.new
        delta_time = (finish_time - start_time).to_f
        writelog( [title, delta_time] )
    end


    ###########################################################################
    #
    # Benchmark tests to gauge how quick our FFT is. Generates a number of 
    # waveforms and then attempts to calculate their principle frequencies.
    #
    ###########################################################################
    def self.run_benchmarks
        openlog

        # 440 Hz sine, 1 second
        waveform = generate_sinewave( 440, 1 )
        timed_cmd "440 Hz, 1 second" do
            peak_frequency( waveform )
        end

        # 440 Hz sine, 5 seconds
        waveform = generate_sinewave( 440, 5 )
        timed_cmd "440 Hz, 5 seconds" do
            peak_frequency( waveform )
        end

        # 1k Hz sine, 5 seconds
        waveform = generate_sinewave( 1000, 5 )
        timed_cmd "1k Hz, 5 seconds" do
            peak_frequency( waveform )
        end

        # 1k Hz sine, 15 seconds
        waveform = generate_sinewave( 1000, 15 )
        timed_cmd "1k Hz, 15 seconds" do
            peak_frequency( waveform )
        end

        # MLS Whitenoise, 15 seconds
        waveform = generate_mls_whitenoise( 15 )
        timed_cmd "MLS Whitenoise, 15 seconds" do
            peak_frequency( waveform )
        end

        closelog
    end
end

if $0 == __FILE__
    FFTBenchmarking.run_benchmarks
end
############################ END OF FILE ######################################
