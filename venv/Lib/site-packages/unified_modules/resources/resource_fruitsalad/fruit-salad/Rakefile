#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2014-2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   Rakefile
### @brief  Rakefile for running tests and generating documentation.
###
### Previously only ran the tests with ci_reporter for XML report
### generation. Now updated to replace the build.xml for Git + Gerrit migrated
### repositories.
###
### === Known Issues ===
###
### 1) Does not update version information on a "build".
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# Requires
require 'ci/reporter/rake/test_unit'
require 'rake/testtask'
require 'fileutils'

################################################################################

#
# With DEVICE,additionally TARGET can also be sent as command line argument to
# rake file,So that Unittests of only that particular target are executed.
# Example: Command line for executing only remote target Unittests
#               Argument IP is for passing IP address.
#               rake test TARGET=remote IP=111.222.33.444
#
#          Command line for executing only WISCE target Unittests
#               rake test DEVICE=florida TARGET=wisce
#               rake test DEVICE=clwr TARGET=wisce
#
if ENV['TARGET'] =~ /remote/i
    if ENV['IP'].nil?
        raise 'IP address not specified as argument'
    end
    test_files = [ "test/test_analysis_methods.rb",
                   "test/test_firmware_methods.rb",
                   "test/test_logging_module.rb",
                   "test/test_playback_record_methods.rb",
                   "test/test_remote_salad.rb",
                   "test/test_soundclear_control_methods.rb",
                   "test/test_target_operation_methods.rb" ]
elsif ENV['TARGET'] =~ /wisce/i
     test_files = [ "test/test_soundclear_control_wisce.rb" ,
                    "test/test_wisce_playback.rb",
                    "test/testWISCEAutomation.rb"]
#
# UnitTests which independent of TARGET,Libraries and Executable Unit tests.
# Hardware Requirements for Libraries and Executables
# test_portaudio_client.rb - requires Line-in Cable with Loop back Connection
# testPAMultitrack.rb - requires TS2000 USBStreamer with Loop back Connection
#
else
    test_files = FileList['test/test*.rb']
    # excluding - tests not suitable or ready for CI
    test_files.exclude('test/test_logging_module.rb')
    test_files.exclude('test/test_fruitsalad_player.rb')
    test_files.exclude('test/testAntBuild.rb')
    test_files.exclude('test/testFruitSaladTargetClasses.rb')
    test_files.exclude('test/testRemoteWinDriverTestAPI.rb')
    test_files.exclude('test/testWISCEAutomation.rb')
    test_files.exclude('test/test_remote_salad.rb')
    test_files.exclude('test/test_playback_record_methods.rb')
    test_files.exclude('test/test_soundclear_control_methods.rb')
    test_files.exclude('test/test_target_operation_methods.rb')
    test_files.exclude('test/test_analysis_methods.rb')
    test_files.exclude('test/test_firmware_methods.rb')
    test_files.exclude('test/test_power_supply.rb')
    test_files.exclude('test/test_soundclear_control_wisce.rb')
    test_files.exclude('test/testWisceFUSBBox.rb')
    test_files.exclude('test/test_wisce_playback.rb')
    test_files.exclude('test/test_target_operation_methods_vega.rb') # Until new automated build
end

################################################################################
# @function invoke_yardoc
#
# Calls yardoc with a pre-defined command and the given parameters.
#
# @param [String]  search_path    Path to search for source files to include.
# @param [String]  output_target  Destination target for generated output.
#
################################################################################
def invoke_yardoc( search_path, output_target )
    command = "yardoc --yardopts docs/.yardopts #{search_path} -o #{output_target}"
    puts command
    system command
end

################################################################################
# @function check_remove_dir
#
# Check and remove a directory if it exists.
#
# @param [String]  dir_name    Name of direcotry to remove.
#
################################################################################
def check_remove_dir( dir_name )
    if File.exists?( dir_name )
        FileUtils.remove_dir( dir_name )
    end
end

################################################################################
# Task: Test
#
# Rake testing task for running automated unit tests.
#
################################################################################
Rake::TestTask.new do |t|
    t.libs << 'test'
    t.test_files =  test_files
    t.verbose = true
end

# ensure that the ci reporting setup is called as part of the test task.
task :test => 'ci:setup:testunit'

################################################################################
# Task: Usage
#
# Usage information.
#
################################################################################
desc 'usage information'
task :usage do
    puts 'FruitSalad Rakefile'
end

################################################################################
# Task: Cleandocs
#
# Clean the documentation_output folder.
#
################################################################################
desc 'Clean documentation output folder'
task :cleandocs do
    puts 'Removing documentation_output'
    check_remove_dir( 'documentation_output' )
end

################################################################################
# Task: Docs
#
# Generate documentation.
#
################################################################################
desc 'Generate Yard documentation'
task :docs => 'cleandocs' do
    puts 'Invoking yardoc with options:'
    # all ruby documentation
    invoke_yardoc( 'src/**/*.rb', 'documentation_output/yard' )
    # just the step definitions
    invoke_yardoc( 'src/step_definitions/*.rb', 'documentation_output/step_definitions' )
end

################################################################################
# Task: ocra
#
# Build the One-Click Ruby Application (OCRA) fruitsalad.exe.
#
# This embeds a ruby interpreter and required gems so that ruby doesn't have to
# be installed on the target machine (at the cost of increased start-up time as
# the interpreter is unpacked).
#
################################################################################
desc 'Create fruitsalad OCRA executable'
task :ocra do
    puts 'Generating OCRA exe:'
    command = 'ocra fruitsalad.rb --output fruitsalad.exe --gemfile Gemfile ' +
              '--no-dep-run --add-all-core --gem-full --dll libffi-6.dll ' +
              '--dll libyaml-0-2.dll'
    puts command
    system command
end

################################### END OF FILE ################################