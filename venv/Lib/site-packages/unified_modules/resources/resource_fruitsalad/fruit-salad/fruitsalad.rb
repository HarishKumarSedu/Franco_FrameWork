# encoding: utf-8
################################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies. 
###
### @file   fruitsalad.rb
### @brief  Launcher script for Fruit Salad that sets up the environment.
###
### @version \$Id: fruitsalad.rb 1055 2015-05-22 09:21:57Z aangus $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
################################################################################

#
# Configure library paths.
#
# OCRA extracts archived source ruby files to a temporary directory.
# Since only this script is contained within the OCRA utility, and
# the rest stored relative to the .exe path: when we run the utility
# under an OCRA environment we need to obtain the directory name
# containing the OCRA executable (OCRA_EXECUTABLE).
#
# When we are running under a native Ruby environment then this file
# will be in the right place, and we can obtain the dirname of this
# file for relative paths to the src directory for FRUITSALAD_HOME resolution.
#
if ENV['OCRA_EXECUTABLE'].nil?
    SOURCE_DIR = 'src'
else
    SOURCE_DIR = File.join( File.dirname( ENV['OCRA_EXECUTABLE'] ), 'src' )
end

#
# Execute environment variable setup (simplifies following includes)
#
require_relative "#{SOURCE_DIR}/fruitsalad_env_setup"

#
# Includes
#
require "optparse"
require "cucumber/cli/main"
require "configuration"

################################################################################
#
# Entry point for Fruit Salad tool.
#
################################################################################
class FruitSaladLauncher
    # Define a string constant for the --version option, will be updated by
    # the build script.
    FRUITSALAD_VERSION = 'V1.0.15.0.-1'

    ############################################################################
    # @function parse
    #
    # Performs parsing of command-line switches and allows the user to select
    # which platform they wish to target for testing.
    #
    # Any switches caught by this method are removed.
    #
    # (no parameters)
    #
    ############################################################################
    def parse
        @feature_files = []
        @additional_arguments = []
        option_parser = OptionParser.new do |option|
            option.banner = 'Usage: fruitsalad.rb TARGET [OPTIONS]'
            option.separator ''
            option.separator 'Targets:'
            option.separator '      wisce, test a device using WISCEâ„¢ on Windows'
            option.separator '      linux, test a linux device natively'
            option.separator '      remote, debug a remote linux/android target over ssh'
            option.separator '      windows, debug target which performs playback/record'
            option.separator '      null, debug target which tests nothing'
            option.separator ''
            option.separator 'Additional parameters can be passed through to cucumber by passing the -- separator:'
            option.separator '       e.g. run_tests.rb TARGET -- --format progress'
            option.separator '            will pass the progress formatting option through to cucumber.'
            option.separator ''
            option.separator 'Options:'
            
            option.on( '-c', '--config-file FILE', 'Loads configuration variables from FILE.' ) do |file|
                Conf.set_source( file )
            end

            option.on( '-f', '--feature FILE|DIR', 'Queues the specified feature file|dir to run.' ) do |file|
                @feature_files << file
            end
            
            option.on( '--jenkins', 'Shortcut for enabling Jenkins compatability and unattended execution functionality' ) do |file|
                out_file = Conf.property( :Cucumber_OutFile, 'cucumber.json' )
                @additional_arguments << '--format' << 'json'
                @additional_arguments << '-o' << out_file
                @additional_arguments << '--tag' << '~@manual'
                # Set Unattended to true
                Conf.set( :Unattended, true )
            end

            option.on( '--fast', 'Skips a soft-reset of the hardware before running tests.' ) do
                Conf.set( :skip_reset, true )
            end

            option.on( '--bridge ADDR:PORT', 'Connects to a WISCEBridge host running at address ADDR on port PORT when using the WISCE target.') do |address|
                Conf.set( :WISCEBridge_Address, address )
            end
    
            # Allow arguments to be passed directly through to Cucumber using 
            # a -- separator between FruitSalad and Cucumber arguments actually
            # terminates OptParse from processing arguments and leaves the 
            # remaining arguments in ARGV.
            option.on( '--', 'Halt option parsing and pass remaining arguments onto Cucumber' ) do
                option.terminate
            end

            option.on( '-a', '--address [USER@]ADDR', 'Specifies the username and address of a remote ssh-enabled target.' ) do |str|
                str = str.split( '@' )
                if str.size < 2
                    Conf.set( :Remote_Address, str[0] )
                else
                    Conf.set( :Remote_User, str[0] )
                    Conf.set( :Remote_Address, str[1] )
                end
            end
            
            option.on( '-v', '--version', 'Show version information and exit.' ) do
                puts "Fruit Salad (#{FRUITSALAD_VERSION})"
                exit( 0 )
            end
            
            option.on( '-h', '--help', 'Show this text' ) do
                puts option_parser
                exit( 0 )
            end

            option.on( '--dump_config', 'Dump the configuration variables used.' ) do
                Conf.set( :DumpConfig, true )
            end
        end
        option_parser.parse!
        @platform = ARGV.delete_at( 0 )
        if nil == @platform
            puts 'Target not specified.'
            puts option_parser
            exit( 1 )
        end
    end
    
    ############################################################################
    # @function available_platforms
    #
    # Lookup available *Salad.rb files available within FRUITSALAD_HOME.
    #
    # @note All *Salad files should be located within the src/targets directory.
    #
    # (no parameters)
    #
    # @return [Array<String>] Array of *Salad.rb files available for use.
    #
    ############################################################################
    def available_platforms
        @search_dir = File.join( ENV['FRUITSALAD_HOME'], 'src/targets/' )
        entries = Dir.entries( @search_dir )
        entries.select!{ |file| file.match( /(\w+)Salad\.rb/ ) }
        return entries
    end
    
    ############################################################################
    # @function platform_lookup
    #
    # Lookup the target specific FruitSalad file (will be loaded as part of
    # Cucumber startup).
    #
    # @note Will terminate FruitSalad if an ambiguity is detected or no such
    #       file is available to load.
    #
    # @param requested_platform [String] Requested target (default is to use
    #                                    the @platform attribute).
    #
    # @return [String] name of the *Salad.rb file to require for a given target
    #
    ############################################################################
    def platform_lookup( requested_platform = @platform )
        requested_platform ||= 'null' # default to null if @platform not set
        platforms = available_platforms
        
        if platforms.empty?
            raise 'No targets available, is src/targets empty?'
        end
        
        platforms.select!{ |file| file.match( /^#{requested_platform}Salad.rb$/i )}        
        target_platform = platforms.first
        # set an environment variable to allow Cucumber to require the correct target.
        ENV['FruitSaladTarget'] = File.join( @search_dir, target_platform )        
        return target_platform
    end

    ############################################################################
    # @function initialize
    #
    # Configures Fruit Salad ready to run tests.
    #
    # @param [Boolean] skip_init  Skips initialisation for unit testing 
    #                             (default is false). 
    #
    ############################################################################
    def initialize( skip_init = false )
        unless skip_init
            # Consume Fruit Salad CLI options
            parse
            platform_lookup
        end
    end

    ############################################################################
    # @function add_default_steps_location
    #
    # Add default require steps location.
    #
    # @note Once Cucumber has received a --require argument it will stop 
    #       automatically loading steps alongside/under feature files.
    #
    # @param default_location A path to a default location from which to load steps.
    #
    ############################################################################
    def add_default_steps_location( default_location )
        if File.exists?( default_location )
            @additional_arguments << '--require' << default_location
        end        
    end
    
    ############################################################################
    # @function run
    #
    # Dispatch to cucumber for each feature file.
    #
    # (no parameters)
    #
    ############################################################################
    def run
        args = ARGV
    
        # default behaviour is to run all feature files if no parameter is given
        if @feature_files.size < 1
            @feature_files = Dir::glob( File.join( '.', '**', '*.feature' ) )
        end
        
        # load step definitions from the Fruit Salad core
        add_default_steps_location( File.join( ENV['FRUITSALAD_HOME'], 'src/step_definitions' ) )
        
        # augment arguments to be passed through to Cucumber
        args.concat( @feature_files )
        args.concat( @additional_arguments )
        
        if Conf.property( :DumpConfig, false )
            at_exit { Conf::dump_config }
        end
        
        Cucumber::Cli::Main.new( args.dup ).execute!
    end
end

#
# Main program.
#
if __FILE__ == $0
    launcher = FruitSaladLauncher.new
    launcher.run
end
################################### END OF FILE ################################