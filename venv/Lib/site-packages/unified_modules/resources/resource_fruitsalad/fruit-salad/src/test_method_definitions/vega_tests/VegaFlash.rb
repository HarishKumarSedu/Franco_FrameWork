require 'digest'
require 'date'

class VegaFlash

    ##########################################################################
    #
    # @function initialize
    # Default constructor
    #
    # connect to the wisce Automation and creates instance for Flash Ctrl
    #
    # @param no parameters
    # @return
    #
    ##########################################################################
    def initialize
        @vegaFlashCtrl = FruitSalad.get_device()
        @vegaFlashCtrl.flash_open
    end

    ##########################################################################
    #
    # @function Complete_chip_Erase
    #
    # Erase the Complete Chip by invoking function
    #
    # @param no parameters
    # @return [Integer] hresult from the ole method
    #
    ##########################################################################
    def Complete_chip_Erase
        $LOG.info "Erasing the Complete chip"
        value = @vegaFlashCtrl.flash_erase_chip
    end

    ##########################################################################
    #
    # @function close_flash
    #   Closes the flash Connection invoking the Wisce API
    #
    # @param no param
    # @return [bool] hresult
    #
    ###########################################################################
    def close_flash
        @vegaFlashCtrl.flash_close
    end

    #########################################################################
    #
    # @function write_bytes
    #   writes  some bytes into the flash using WISCE API write and also checks
    #  whether the values are written correctly.
    #
    # @Param [Integer] offset   starting address from where the bytes has to
    #                            write
    # @param [IntegerArray] bytes  Integer bytes that has to be write
    #
    # @return [bool] on success true else false
    #
    ##########################################################################
    def write_bytes( offset, bytes )
        actual_data = Array.new

        #Reading the previously existing data
        hr, prev_data = read_bytes( offset, bytes.size )

        for i in 0...bytes.size
            actual_data[i] = prev_data[i] & bytes[i]
        end

        hresult = @vegaFlashCtrl.flash_write_bytes( offset, bytes )
        hr, buffer = read_bytes( offset, bytes.size )
        raise "Failed to write to the buffer" if actual_data.eql? buffer == false
        return hresult

    end

    #########################################################################
    #
    # @function read_bytes
    #     read required bytes from the flash using WISCE API Read
    #
    # @Param [Integer] offset   starting address from where the bytes has to
    #                            read
    # @param [Integer] length  Number of bytes
    #
    # @return [bool] on success true else false
    # @return [Array] Integer bytes that was read
    ##########################################################################
    def read_bytes( offset, length )
        md5 = Digest::MD5.new
        hresult,buffer = @vegaFlashCtrl.flash_read_hash( offset, length, md5 )
    end

    #########################################################################
    #
    # @function write_image
    #   writes  some image into the flash using WISCE API write
    #   write image by Converting them to bytes
    #
    # @param [img_file] string  Name of the file that need to write
    # @Param [Integer] offset   starting address from where the bytes has to
    #                            write
    # @return [bool] on success true else false
    #
    ##########################################################################
    def write_image( img_file, offset )
        binary_image = IO.binread( img_file )
        buffer = Array.new( binary_image.size )
        binary_image.size.times {
           |i| buffer[i] = binary_image[ i % binary_image.size ] }
        hresult = @vegaFlashCtrl.flash_write_bytes( offset, buffer.join )
    end

    #########################################################################
    #
    # @function Erase_bytes
    #    Erases the Required amount of bytes into the flash  by Erasing
    #    Complete Sector
    #
    # @Param [Integer] offset   starting address from where the bytes has to
    #                            write
    # @param [IntegerArray] bytes  Integer bytes that has to be write
    #
    # @return [bool] on success true else false
    #
    ##########################################################################
    def Erase_bytes( offset, byte_count )
        ret = @vegaFlashCtrl.flash_erase_bytes( offset, byte_count )
    end
end