////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd. All rights reserved.
//
// This software as well as any related documentation is furnished under
// license and may only be used or copied in accordance with the terms of the
// license. The information in this file is furnished for informational use
// only, is subject to change without notice, and should not be construed as
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document.
//
// Except as permitted by such license, no part of this document may be
// reproduced, stored in a retrieval system, or transmitted in any form or by
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies.
//
/// @file   portaudio_client_api.cpp
/// @brief  Definitions of functions providing an external interface
///         for PortaudioClient.
///
/// @warning
///     This software is specifically written for Cirrus Logic devices.
///     It may not be used with other devices.
///
///////////////////////////////////////////////////////////////////////////////

//
// Includes
//

#include "portaudio_client.h"

//
// API function definitions
//

///////////////////////////////////////////////////////////////////////////////
///
//  Function: SetUp
///
/// @brief Initialize PortaudioClient.
///
/// @param bufferSize            The audio buffer size to be used for playback
///                              and record (NOTE: setting a very small
///                              buffer size will cause clicks, and setting
///                              a very large buffer size will result in
///                              latency).
/// @param stateCallback         Pointer to a function of stateCallbackType,
///                              it is used to notify the outside world when
///                              the clients internal state changes.
/// @param errorCallback         Pointer to a function of errorCallbackType,
///                              it is used to notify the outside world of
///                              errors.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus SetUp( int               bufferSize,
                                  stateCallbackType stateCallback,
                                  errorCallbackType errorCallback
                                )
{
    return PortaudioClient::GetClient().SetUp( bufferSize,
                                                stateCallback,
                                                errorCallback
                                              );
}

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StartPlaybackFromFile
///
/// @brief opens the playback stream with the created instance.
///
/// @param playbackChannelCount  The number of channels to be used for playback.
/// @param samplingRate          The samplerate to be used for playback.
/// @param pPath                 A path to the file to be played back.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PlayerStatus StartPlaybackFromFile( int        playbackChannelCount,
                                    int        samplingRate,
                                    const char *pPath
                                  )
{
    PlayerStatus exitCode;
    exitCode = PortaudioClient::GetClient().StartPlaybackFromFile( playbackChannelCount,
                                                                    samplingRate,
                                                                    pPath
                                                                  );
    return exitCode;
}

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StartRecordingToFile
///
/// @brief Start recording to a file at a given location.
///
/// @param recordChannelCount    The number of channels to be used for recording.
/// @param samplingRate          The samplerate to be used for recording.
/// @param pPath                 A path where the recorded file is to be stored.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PlayerStatus StartRecordingToFile( int        recordChannelCount,
                                   int        samplingRate,
                                   const char *pPath
                                 )
{
    PlayerStatus exitCode;
    exitCode = PortaudioClient::GetClient().StartRecordingToFile( recordChannelCount,
                                                                   samplingRate,
                                                                   pPath
                                                                 );
    return exitCode;
}

///////////////////////////////////////////////////////////////////////////////
///
//  Function: Terminate
///
/// @brief Terminate PortaudioClient.
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PlayerStatus Terminate()
{
    return PortaudioClient::GetClient().Terminate();
}


///////////////////////////////////////////////////////////////////////////////
///
//  Function: StopPlayback
///
/// @brief Stop playback, provided it has been started earlier.
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PlayerStatus StopPlayback()
{
    return PortaudioClient::GetClient().StopPlayback();
}


///////////////////////////////////////////////////////////////////////////////
///
//  Function: StopRecording
///
/// @brief Stop recording, provided it has been started earlier.
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PlayerStatus StopRecording()
{
    return PortaudioClient::GetClient().StopRecording();
}
/////////////////////////////END OF FILE///////////////////////////////////////