////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd. All rights reserved.
//
// This software as well as any related documentation is furnished under
// license and may only be used or copied in accordance with the terms of the
// license. The information in this file is furnished for informational use
// only, is subject to change without notice, and should not be construed as
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document.
//
// Except as permitted by such license, no part of this document may be
// reproduced, stored in a retrieval system, or transmitted in any form or by
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies.
//
/// @file   portaudio_client_api.h
/// @brief  Export definitions for functions providing an external interface
///         for PortaudioClient.
///
/// @warning
///     This software is specifically written for Cirrus Logic devices.
///     It may not be used with other devices.
///
///////////////////////////////////////////////////////////////////////////////

//
// Defines
//

#ifndef PA_CLIENT_API_H
#define PA_CLIENT_API_H

#ifdef PA_CLIENT_API_EXPORTS
#define PA_CLIENT_API __declspec(dllexport)
#else
#define PA_CLIENT_API __declspec(dllimport)
#endif

//
// Includes
//

//
// Enums
//

static enum PlayerState { UNINITIALIZED = 0x0,
                          INITIALIZED = 0x1,
                          PLAYBACK_READY = 0x2,
                          RECORD_READY = 0x4,
                          PLAYING = 0x8,
                          RECORDING = 0x10
                        };

static enum PlayerStatus { PA_CLIENT_SUCCESS = 0,
                           PA_CLIENT_UNINITIALIZED = -1,
                           PA_INITIALIZATION_ERROR = -2,
                           PA_TERMINATION_ERROR = -3,
                           PA_STREAM_OPEN_ERROR = -4,
                           PA_STREAM_CLOSE_ERROR = -5,
                           PA_STREAM_START_ERROR = -6,
                           PA_STREAM_STOP_ERROR = -7,
                           PA_CLIENT_FILE_ERROR = -8,
                           PA_SAMPLINGRATE_SUPPORT_ERROR = -9,
                           PA_INVALID_HOST_API_ERROR = -10,
                           PA_PLAYBACK_CHANNEL_COUNT_SUPPORT_ERROR = -11,
                           PA_RECORDING_CHANNEL_COUNT_SUPPORT_ERROR = -12
                         };

extern  "C"
{
//
// Typedefs
//

typedef void (*stateCallbackType)( bool        on,
                                   PlayerState clientState
                                 );

typedef void (*errorCallbackType)( PlayerStatus clientSatus,
                                   int          libErrorCode,
                                   const char   *pLibErrorMessage
                                 );

//
// Function declarations
//

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StartPlaybackFromFile
///
/// @brief opens the playback stream with the created instance.
///
/// @param playbackChannelCount  The number of channels to be used for playback.
/// @param samplingRate          The samplerate to be used for playback.
/// @param pPath                 A path to the file to be played back.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus StartPlaybackFromFile( int        playbackChannelCount,
                                                  int        samplingRate,
                                                  const char *pPath
                                                );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: SetUp
///
/// @brief Initialize Portaudio.
///
/// @param bufferSize            The audio buffer size to be used for playback
///                               and record (NOTE: setting a very small
///                              buffer size will cause clicks, and setting
///                              a very large buffer size will result in
///                              latency).
/// @param stateCallback         Pointer to a function of stateCallbackType,
///                              it is used to notify the outside world when
///                              the clients internal state changes.
/// @param errorCallback         Pointer to a function of errorCallbackType,
///                              it is used to notify the outside world of
///                              errors.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus SetUp( int               bufferSize,
                                  stateCallbackType stateCallback,
                                  errorCallbackType errorCallback
                                );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StartRecordingToFile
///
/// @brief Start recording to a file at a given location.
///
/// @param recordChannelCount    The number of channels to be used for recording.
/// @param SamplingRate          The samplerate to be used for recording.
/// @param pPath                 A path where the recorded file is to be stored.
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus StartRecordingToFile( int         recordChannelCount,
                                                 int         SamplingRate,
                                                 const char *pPath
                                               );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: Terminate
///
/// @brief Terminate PortaudioClient .
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus Terminate();

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StopPlayback
///
/// @brief Stop playback, provided it has been started earlier.
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus StopPlayback();

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StopRecording
///
/// @brief Stop recording, provided it has been started earlier.
///
/// (no parameters)
///
/// @return The player's status.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API PlayerStatus StopRecording();

///////////////////////////////////////////////////////////////////////////////
///
//  Function: StatusCallback
///
/// @brief Callback notifying the outside world of portaudio client state
///        changes.
///
/// @param on          Indicates whether the given state was turned "on" or
///                    "off".
/// @param clientState Indicates which state was activated or deactivated.
///
/// @return void.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API void StatusCallback( const bool        on,
                                   const PlayerState clientState
                                 );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: ErrorCallback
///
/// @brief Callback notifying the outside world of errors.
///
/// @param clientSatus      PortaudioClient error status.
/// @param libErrorCode     Error code returned by a library call - i.e. the
///                         underlying cause of the PortaudioClient error.
/// @param pLibErrorMessage Library error message associated with the
///                         libErrorCode.
///
/// @return void.
///
///////////////////////////////////////////////////////////////////////////////
PA_CLIENT_API void ErrorCallback( const PlayerStatus clientSatus,
                                  const int          libErrorCode,
                                  const char         *pLibErrorMessage
                                );
}

#endif // PA_CLIENT_API_H
/////////////////////////////END OF FILE///////////////////////////////////////