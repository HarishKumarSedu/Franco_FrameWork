////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   fruitsalad_player_interface.h
/// @brief  Convenience functions wrapping message creation.
///
/// @version \$Id: fruitsalad_player_interface.h 558 2014-12-03 16:55:34Z aangus $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////
#ifndef FRUITSALAD_PLAYER_INTERFACE_H
#define FRUITSALAD_PLAYER_INTERFACE_H

///////////////////////////////////////////////////////////////////////////////
/// Includes
///////////////////////////////////////////////////////////////////////////////

#include <string>

///////////////////////////////////////////////////////////////////////////////
/// Function declarations
///////////////////////////////////////////////////////////////////////////////

namespace fruitsalad_player_interface
{
    enum CommandType { INVALID_COMMAND = 0,
                       HANDSHAKE,
                       SET_UP,
                       TERMINATE,
                       PLAY,
                       RECORD,
                       STOP_PLAYBACK,
                       STOP_RECORDING,
					   CODEC_STATE
                     };

    typedef struct SetUpArgs_t
    {
        int playbackChannelCount;
        int recordingChannelCount;
        int sampleRate;
        int bufferSize;
    }
    SetUpArgs;

    typedef struct FileArgs_t
    {
        std::string fileName;
    }
    FileArgs;

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateHandshakeMessage
///
/// @brief Creates a handshake it as a string.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateHandshakeMessage();

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateSetUpMessage
///
/// @brief Creates a set up message and serializes it as a string.
///
/// @param playbackChannelCount  Number of playback channels.
/// @param recordingChannelCount Number of recording channels.
/// @param sampleRate            Sample rate in Hz.
/// @param bufferSize            Audio buffer size to use while playback and
///                              recording.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateSetUpMessage( const int &playbackChannelCount,
                                    const int &recordingChannelCount,
                                    const int &sampleRate,
                                    const int &bufferSize
                                  );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateTerminateMessage
///
/// @brief Creates a terminate message and serializes it as a string.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateTerminateMessage();

	///////////////////////////////////////////////////////////////////////////////
	///
	/// Function: CreateCommandTypeMessage
	///
	/// @brief Creates string message using the CommandType
	///        and serializes it as a string.
	///
	/// @param CommandType Command message to be issued.
	///
	/// @return A message serialized as string.
	///
	///////////////////////////////////////////////////////////////////////////////
    std::string CreateCommandTypeMessage( CommandType command );

	///////////////////////////////////////////////////////////////////////////////
	///
	/// Function: CreateCodecStateReturnMessage
	///
	/// @brief Creates a space separated string message returning the success code
	///        and the state of the codec.
	///
	///        Example output: success 0 CODEC_STATE 0
	///
	/// @param success whether the command was successful: 0 false, 1 true.
	/// @param aState  The codec power state.
	///
	/// @return A return message serialized as string.
	///
	///////////////////////////////////////////////////////////////////////////////
	std::string CreateCodecStateReturnMessage( int success, int aState );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreatePlayFromFileMessage
///
/// @brief Creates a play from file message and serializes it as a string.
///
/// @param fileName Name of a file to play.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreatePlayFromFileMessage( const std::string &fileName );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateRecordToFileMessage
///
/// @brief Creates a record to file message and serializes it as a string.
///
/// @param fileName Name of a file to record.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateRecordToFileMessage( const std::string &fileName );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateStopPlaybackMessage
///
/// @brief Creates a stop playback message and serializes it as a string.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateStopPlaybackMessage();

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateStopRecordingMessage
///
/// @brief Creates a stop recording message and serializes it as a string.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateStopRecordingMessage();

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateResultMessage
///
/// @brief Creates a result message and serializes it as a string.
///
/// @return A message serialized as string.
///
///////////////////////////////////////////////////////////////////////////////
    std::string CreateResultMessage( const int &result );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: ParseCommandType
///
/// @brief Parses the command type of a given message.
///
/// @param msg A message to parse.
///
/// @return CommandType of the given message.
///
///////////////////////////////////////////////////////////////////////////////
    CommandType ParseCommandType( const std::string &msg );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: IntToCommandType
///
/// @brief Safely converts int to command type.
///
/// @param type An integer representing command type.
///
/// @return CommandType of the given message.
///
///////////////////////////////////////////////////////////////////////////////
    CommandType IntToCommandType( const int &type );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: ParseSetUpArguments
///
/// @brief Parses arguments from a set up message.
///
/// @param msg A valid set up message.
///
/// @return A struct holding set up arguments.
///
///////////////////////////////////////////////////////////////////////////////
    SetUpArgs ParseSetUpArguments( const std::string &msg );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: ParseFileArguments
///
/// @brief Parses arguments from a play or record message.
///
/// @param msg A valid play or record message.
///
/// @return A struct holding file arguments.
///
///////////////////////////////////////////////////////////////////////////////
    FileArgs ParseFileArguments( const std::string &msg);

///////////////////////////////////////////////////////////////////////////////
///
/// Function: ParseResult
///
/// @brief Parses a result message.
///
/// @param msg A valid result message.
///
/// @return A result code.
///
///////////////////////////////////////////////////////////////////////////////
    int ParseResult( const std::string &msg );
}
#endif //FRUITSALAD_PLAYER_INTERFACE_H
/////////////////////////////END OF FILE///////////////////////////////////////