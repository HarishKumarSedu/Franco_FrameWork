###############################################################################
##
## Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
##
## This software as well as any related documentation is furnished under
## license and may only be used or copied in accordance with the terms of the
## license. The information in this file is furnished for informational use
## only, is subject to change without notice, and should not be construed as
## a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
## (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
## that may appear in this document or any software that may be provided in
## association with this document.
##
## Except as permitted by such license, no part of this document may be
## reproduced, stored in a retrieval system, or transmitted in any form or by
## any means without the express written consent of Cirrus Logic International
## (UK) Ltd or affiliated companies.
##
## @file element_lookup_steps.rb
## @brief Step-definitions for the looking up element (register, field) values from a device.
##
## @version \$Id: element_lookup_steps.rb 664 2015-01-07 16:36:38Z aangus $
##
## @warning
##     This software is specifically written for Cirrus Logic devices.
##     It may not be used with other devices.
##
###############################################################################

require 'logfw'

###############################################################################
#
# @!method Then_Element_Equals
#
# Lookup a given element (register, field) and check its value matches an
# expected value.
#
#       Usage:
#       Then <field|register> "<field_name>" equals <expected_value>
#       Then <field|register> "<field_name>" equals its default
#
# @param element_type   Specifier of the element type (register|field).
# @param field_name     The name of the field to lookup from the device.
# @param expected_value Zero-padded string representation of the expected value
#                       (should include indication of format (H=Hex).
#
# @example Then register "DRC2 ctrl1" equals 0018H
# @example Then register "DRC2 ctrl1" equals its default
#
###############################################################################
Given( /^(field|register) "(.*)" equals (\w+|its default)$/ ) do |element_type, field_name, expected_value|
    # TODO: Could allow for other operators other than just equals.
    # TODO: Value could be extended to alternative number formats other than hex
    # TODO: Should fields be able to return their value description (is this cross-platform)?

    # NOTE: Transforms will still operate on the parameters here, so if expected value
    #       looks like a digit, it will be transformed into a Fixnum.

    device = FruitSalad::get_device()
    # at the moment the field is always returned in Hex format.
    value = device.read_element_value( field_name ) + 'H'

    # if the default value is requested, lookup what it should be.
    if 'its default' == expected_value
        expected_value = device.get_default_element_value( field_name ) + 'H'
    end

    $LOG.debug "expected value: #{expected_value}, actual value #{value}"

    if value.nil?
        raise( "No such field '#{field_name}' found on device." )
    elsif ( value != expected_value )
        raise( "Field mismatch on '#{field_name}': #{value} is not #{expected_value}." )
    end
end


###############################################################################
#
# @!method Given_Element_is_written
#
# Write value to a given element (register, field)
#
#       Usage:
#       Given <field|register> "<field_name>" is written <value>
#
# @param element_type   Specifier of the element type (register|field).
# @param field_name     The name of the field to lookup from the device.
# @param value          Value to be written
#                       (should include indication of format (H=Hex).
#
# @example  Given register "DRC2_ctrl1" is written C042H
#
###############################################################################
Given( /^(field|register) "(.*)" is written (\w+)$/ ) do |element_type, field_name, value|

    device = FruitSalad::get_device()
    device.write_element_value( field_name, value )

end


#################################### end ########################################