###############################################################################
##
## Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
##
## This software as well as any related documentation is furnished under
## license and may only be used or copied in accordance with the terms of the
## license. The information in this file is furnished for informational use
## only, is subject to change without notice, and should not be construed as
## a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
## (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
## that may appear in this document or any software that may be provided in
## association with this document.
##
## Except as permitted by such license, no part of this document may be
## reproduced, stored in a retrieval system, or transmitted in any form or by
## any means without the express written consent of Cirrus Logic International
## (UK) Ltd or affiliated companies.
##
## @file linux_firmware.rb
## @brief Module mix-in for methods that verify the version of a .wmfw file and deploy it.
##
## @warning
##     This software is specifically written for Cirrus Logic devices.
##     It may not be used with other devices.
##
###############################################################################

#
# Includes
#
require 'configuration'

###############################################################################
#
# Module for parsing and deploying wmfw files, which can be mixed into our
# specialised linux targets.
#
###############################################################################
module LinuxFirmware

    # Local path where Firmware files are stored, ready for deployment.
    # Set with the :FirmwarePath config variable.
    FirmwarePath = Conf.property( :FirmwarePath, 'resources' )
    # Location on test target to install Firmware files into.
    # Set with the :Firmware_InstallPath config variable.
    FirmwareInstallPath = Conf.property( :Firmware_InstallPath,
                                         '/lib/firmware'
                                       )

    ###########################################################################
    #
    # @function deploy_firmware
    #
    # Copy the firmware files corresponding the the named algorithm.
    # Use :Firmware_TargetChip to specify which chip we are deploying for
    # (defaults to florida).
    #
    # This method will also assert that at least one firmware file is found for
    # the named algorithm and will assume a failure if no files are found.
    #
    # @param [String] algo_name The name of the algorithm to deploy.
    #
    # @option [String] faux_firmware_name A "false identity" for the firmware.
    #                                     This is used when trying to load a
    #                                     firmware not available on the drivers'
    #                                     hardcoded list of firmwares.
    #
    # @raise [RuntimeError] If no (.wmfw) firmware files can be found for the
    #                       named algorithm.
    #
    ###########################################################################
    def deploy_firmware( algo_name, opts = {} )
        chipname = Conf.property( :Firmware_TargetChip, 'florida' )
        algo_name = algo_name.downcase
        algo_name.gsub!( ' ', '-' )

        dsp_index = opts.fetch( :dsp_index, nil )

        faux_name = opts.fetch( :faux_firmware_name, nil )
        unless faux_name.nil?
            faux_name.gsub!( /[\/\s_]/, '-' )
            faux_name = faux_name.downcase
        end

        if dsp_index.nil?
            file_glob = File.join( FirmwarePath,
                                   "#{chipname}-dsp*-#{algo_name}.wmfw"
                                 )
        else
            file_glob = File.join( FirmwarePath,
                            "#{chipname}-dsp#{dsp_index + 1}-#{algo_name}.wmfw"
                                 )
        end
        files = Dir.glob( file_glob )

        unless files.length > 0
            raise "No firmware matching pattern #{file_glob}."
        end

        files.each do |file|
            if faux_name.nil?
                upload( file, FirmwareInstallPath )
            else
                faux_name = File.basename( file.gsub( algo_name, faux_name ) )
                upload( file, File.join( FirmwareInstallPath, faux_name ) )
            end
        end

        return
    end
end

############################## END OF FILE ####################################