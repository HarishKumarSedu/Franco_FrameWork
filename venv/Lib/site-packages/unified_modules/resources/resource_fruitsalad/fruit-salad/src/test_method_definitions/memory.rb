###############################################################################
###
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  memory.rb
### @brief Encapsulates all the test methods which deals with the dsp memory.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################
require_relative '../memory_patterns_wisce.rb'
require 'logfw'
###############################################################################
#
# @function init_memory
# Creates a instance for the MemoryPatternGenerator Class
#
# @param [Array]   core_info       Dsp core information
# @param [String]  patterns_path   Patterns file location
# @param [String]  protocol        Name of the protocol to be use
# @param [Integer] device_address  Device address to write to.
#
#############################################################################
def init_memory( protocol, device_address, patterns_path ,core_info )
    @pattern_generator = MemoryPatternGenerator.new( protocol,
                                                     device_address,
                                                     patterns_path,
                                                     core_info
                                                   )
end
############################################################################
#
# @function generatePatternFiles
#
# Generate memory pattern files to initialize XM, YM and ZM for given DSP core
#
# @param [Integer] core_id      DSP core number
# @param [String] init_pattern  pattern type to generate
# @return returns true if pattern files are generated
#
############################################################################
def generate_patterns( core_id, init_pattern )
   status = @pattern_generator.create_mem_patterns( "DSP#{core_id+1}",
                                                   "#{init_pattern}",
                                                   "dsp#{core_id+1}_init_#{init_pattern.to_s(16)}.txt"
                                                  )
    return status
end
############################################################################
#
# @function check_dsp_memory
#
# Verify DSP memories with the generated pattern files
#
# @param [String]   memory_pattern   pattern type check
# @param [Integer]  core_id          on which dsp core number to check
# @param [String]   memory_type      type of dsp memory
# @param [Array]    chunks           specified chunk start_adress, end_adress,
#                                    dsp_core, region
# @return     returns true if there is no failed words (mismatched words)
#
############################################################################
def check_dsp_memory( memory_pattern, core_id, memory_type, chunks = []  )
    failed_words = 0
    status = true
    device = FruitSalad.get_device()
    # use nil to always  check the full memory contents.
    failed_words += @pattern_generator.check_memory( device, memory_pattern,
                                                     "DSP#{core_id+1}",
                                                     memory_type,
                                                     chunks
                                                   )
    unless failed_words == 0
      $LOG.error("DSP#{core_id+1} #{memory_type} comparison failed. Failed words = #{failed_words}")
      status = false
    end
    return status
end