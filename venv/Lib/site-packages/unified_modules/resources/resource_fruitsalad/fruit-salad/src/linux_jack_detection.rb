###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   linux_jack_detection.rb
### @brief  Connect and disconnect jacks as part of a test Scenario on Linux
###         based systems.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'logfw'

###############################################################################
#
# Implementation of jack detection testing functionality for Linux based
# targets using the switch driver.
#
###############################################################################
module LinuxJackDetection
    SwitchSysfsPath = '/sys/class/switch/h2w/state'

    NoHeadset = 0
    Headset = 1
    HeadsetNoMic = 2

    JDInvokerNotPresentMsg = 'LinuxJackDetection: The class using '           \
                             'LinuxJackDetection must create a '              \
                             'LinuxJackDetection::JDInvoker and store it '    \
                             'in @jack_detection_invoker'

    ###########################################################################
    #
    # @function connect_jack
    #
    # Connect a headset to the test device's headset jack.
    #
    # @note This method requires manual interaction - the jack has to be
    #       inserted and this fact needs to be signalled by hitting enter.
    #       The function will continue prompting the user until a jack
    #       is detected.
    #
    # @param [Bool] output True if the headset should have a playback endpoint
    # @param [Bool] input  True if the headset should have a recording endpoint
    #
    # @raise [RuntimeError] An exception will be raised if
    #                       @jack_detection_invoker is nil.
    #
    ###########################################################################
    def connect_jack( output, input )
        if @jack_detection_invoker.nil?
            raise JDInvokerNotPresentMsg
        end
        state = @jack_detection_invoker.get_switch_state
        while output != has_output?( state ) || input != has_input?( state )
            $LOG.info 'Jack not present. Please connect headset jack.'
            $LOG.info 'PRESS ENTER TO CONTINUE'
            STDIN.readline
            state = @jack_detection_invoker.get_switch_state
        end
    end

    ###########################################################################
    #
    # @function disconnect_jack
    #
    # Disconnect a headset from the test device's headset jack and playback from
    # speakers.
    #
    # @note This method requires manual interaction - the jack has to be
    #       ejected and this fact needs to be signalled by hitting enter.
    #       The function will continue prompting the user until the switch
    #       driver status indicates that no jack is present.
    #
    # (no parameters)
    #
    # @raise [RuntimeError] An exception will be raised if
    #                       @jack_detection_invoker is nil.
    #
    ###########################################################################
    def disconnect_jack
        if @jack_detection_invoker.nil?
            raise JDInvokerNotPresentMsg
        end
        state = @jack_detection_invoker.get_switch_state
        while NoHeadset != state
            $LOG.info 'Jack present. Please disconnect headset jack.'
            $LOG.info 'PRESS ENTER TO CONTINUE'
            STDIN.readline
            state = @jack_detection_invoker.get_switch_state
        end
    end

    ###########################################################################
    #
    # @function has_output?
    #
    # Determine whether the device represented by a given switch driver state
    # has an output.
    #
    # @param [Fixnum] state reported by the switch driver
    #
    # @return [Bool] True if the state represents a device with output
    #                capabilities, false otherwise.
    #
    ###########################################################################
    def has_output?( state )
        Headset == state || HeadsetNoMic == state
    end

    ###########################################################################
    #
    # @function has_input?
    #
    # Determine whether the device represented by a given switch driver state
    # has an input.
    #
    # @param [Fixnum] state reported by the switch driver
    #
    # @return [Bool] True if the state represents a device with input
    #                capabilities, false otherwise.
    #
    ###########################################################################
    def has_input?( state )
        Headset == state
    end

    ###########################################################################
    #
    # Encapsulates state needed to perform jack detection testing and provides
    # generic functionality to retrieve jack detection state.
    #
    ###########################################################################
    class JDInvoker
        def initialize( session = nil )
            @session = session
        end

        #######################################################################
        #
        # @function get_switch_state
        #
        # Read the current jack state reported by the switch driver.
        #
        # (no parameters)
        #
        # @return [Fixnum] Switch driver state.
        #
        #######################################################################
        def get_switch_state
            if @session.nil?
                state = `cat #{SwitchSysfsPath}`
            else
                state = @session.exec! "cat #{SwitchSysfsPath}"
            end
            state.to_i
        end
    end
end

################################### END OF FILE ###############################