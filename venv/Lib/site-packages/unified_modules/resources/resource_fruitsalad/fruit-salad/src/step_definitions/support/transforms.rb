################################################################################
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   transforms.rb
### @brief  Cucumber Transforms definitions for common data-formats.
###
### @version \$Id: transforms.rb 1017 2015-04-30 15:47:10Z emmas $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

#
# Requires
#
require 'fruitsalad_utils'

#
# Numeric data
#

###############################################################################
#
# @private
#
# Cucumber transform capturing any number and transforming it automatically into
# a floating point number.
#
###############################################################################
Number = Transform( /^-?\d+(?:\.\d+)?(?:e[\+-]?\d+)?$/ ) do |number|
    number.to_f
end

###############################################################################
#
# @private
#
# Cucumber transform capturing any non-negative integer and converting it into
# an integer type.
#
###############################################################################
Digits = Transform( /^\d+$/ ) do |i|
    i.to_i
end

###############################################################################
#
# @private
#
# Cucumber transform for capturing revision strings.
#
# Should contain at least 2 integers separated by dots, and up to 5 in total.
# e.g. 1.2
#      1.2.3
#      1.2.3.4
#      1.2.3.4.5
#
###############################################################################
REVISION_STR = Transform( /^(\d+\.\d+(?:\.\d+)?(?:\.\d+)?(?:\.\d+)?)$/ ) do |revision|
    revision.to_str
end

###############################################################################
#
# @private
#
# Cucumber transform capturing a number, followed by a unit string which further
# decomposes into an optional prefix followed by 'Hz'.
#
###############################################################################
Frequency = Transform( /^#{Number} .?(?:Hz)?$/ ) do |string|
    FruitSaladUtils::string_to_frequency string
end

###############################################################################
#
# @private
#
# Cucumber transform capturing a 3D coordinate vector.
#
###############################################################################
Vector3 = Transform( /^\(?(#{Number}),(#{Number}),(#{Number})\)?$/ ) do |x,y,z|
    [x.to_f,y.to_f,z.to_f]
end

##################################### END OF FILE #############################