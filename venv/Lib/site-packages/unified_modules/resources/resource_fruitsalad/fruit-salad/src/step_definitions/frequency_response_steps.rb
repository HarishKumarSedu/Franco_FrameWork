################################################################################
##
## Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
##
## This software as well as any related documentation is furnished under
## license and may only be used or copied in accordance with the terms of the
## license. The information in this file is furnished for informational use
## only, is subject to change without notice, and should not be construed as
## a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
## (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
## that may appear in this document or any software that may be provided in
## association with this document.
##
## Except as permitted by such license, no part of this document may be
## reproduced, stored in a retrieval system, or transmitted in any form or by
## any means without the express written consent of Cirrus Logic International
## (UK) Ltd or affiliated companies.
##
### @file frequency_response_steps.rb
### @brief cucumber steps definition for frequency response tests.
###
### @version \$Id: frequency_response_steps.rb 1051 2015-05-21 14:50:02Z aangus $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
#################################################################################

###############################################################################
#
# @!method Given_the_sampling_rate_is_set_to_Frequency
#
# Assert that fruitSalad is configured to use an expected sampling rate.
#
#       Usage:
#       Given the sampling rate is set to <frequency> [k]Hz
#
# @param frequency The sampling frequency.
#
###############################################################################
Given(/^the sampling rate is set to (#{Frequency})$/) do |frequency|
    unless Conf.property( :SampleRate, nil ).to_f==frequency
        raise "Sampling rate is configured to"\
              " #{Conf.property( :SampleRate, nil )} Hz instead of"\
              " #{frequency} Hz. Please edit your configuration file"\
              " accordingly."
    end
end

###############################################################################
#
# @!method When_I_measure_the_frequency_response_using_MLS_of_order
#
# Perform a frequency response measurement.
#
#       Usage:
#       When I measure the frequency response [using MLS of order <order>]
#
# @example When I measure the frequency response
# @example When I measure the frequency response using MLS of order 17
#
# @param order The MLS order to use while generating the measurement signal.
#              Must be a number between 2 and 24. A larger order indicates a
#              longer signal which ensures a more accurate measurement, but
#              increases computational load. The default order is set to 17 to
#              provide a good balance between accuracy and time spent on
#              computations.
#
###############################################################################
When(/^I measure the frequency response(?: using MLS of order (#{Number}))?$/) do |order|
    if nil==order
        filename = FruitSalad::generate_mls_of_order
    else
        filename = FruitSalad::generate_mls_of_order( order )
    end
    FruitSalad::get_device().playback( filename )
end

###############################################################################
#
# @!method Then_calculate_the_frequency_response
#
# Call the frequency response calculation but do nothing with it.
#
#       Usage:
#       Then calculate the frequency response
#
###############################################################################
Then( /^calculate(?: the)? frequency response$/ ) do
     FruitSalad::get_device().end_capture()
     source = FruitSalad::get_device().playback_history.last
     recording = FruitSalad::get_device().output

     FruitSalad::frequency_response( source, recording )
end

###############################################################################
#
# @!method Then_frequency_response_is_table
#
# Check that the frequency response matches our expectations as represented by
# a list of datapoints of interest. Note, the table should be provided with
# headers that match the regular expressions below:
#
#       /freq/i -> Frequency
#       /gain.*(low|min)/i -> Gain, lower bound
#       /gain.*(hi|max|up)/i -> Gain, upper bound
#
#       Usage:
#       Then the requency response corresponds to:
#               | Frequency    | Gain, minimum | Gain, maximum |
#               | <frequency>  | <min_gain>    | <max_gain>    |
#               ...
#
# @example | 2000 | 10 | 13 |
# @example | 500  | -1 | 5  |
#
# @param frequency The frequency of a sample on the response curve.
# @param min_gain  The lower bound for an acceptable gain at this sampling point in dBFS
# @param max_gain  The upper bound for an acceptable gain at this sampling point in dBFS
#
###############################################################################
Then( /frequency response.*:$/ ) do |table|
    FruitSalad::get_device().end_capture()
    table.map_headers!(
                        /freq/i => :frequency,
                        /gain.*(low|min)/i => :gain_min,
                        /gain.*(hi|max|up)/i => :gain_max
                       )
    expected = table.hashes()
    expected.each do |row|
        row.each_key do |key|
            row[key] = row[key].to_f
        end
    end

    source = FruitSalad::get_device().playback_history.last
    recording = FruitSalad::get_device().output
    measured = FruitSalad::frequency_response( source, recording )

    FruitSalad::response_acceptable?( expected, measured )

end

###############################################################################
#
# @!method Then_the_frequency_response_matches_file_within_error_between_window
#
# Compare our frequency response to a response file in terms of magnitude.
#
#       Usage:
#       Then the frequency response matches "<response_file>" within
#               <dB_error_value> dB [for frequencies between <lower_frequency>
#               [k]Hz and <upper_frequency> [k]Hz]
#
# @example Then the frequency response matches "response.rsp" within 7 dB
# @example Then the frequency response matches "response.rsp" within 7 dB for frequencies between 20 Hz and 500 Hz
# @example Then the frequency response matches "response.rsp" within 7 dB for frequencies between 1 kHz and 10 kHz
#
# @param response_file   A Wolfson audio response file
# @param dB_error_value  The acceptable error for each sampling point in the file.
# @param lower_frequency What frequency to start the sample comparison at
# @param upper_frequency What frequency to end the sample comparison at
#
###############################################################################
Then( /^(?:the )?frequency response matches "(.*)" within (#{Number}) ?d[Bb](?: for frequencies between (#{Frequency}) and (#{Frequency}))?$/ ) do | filename, tolerance_db, low_freq_bound, hi_freq_bound |
    FruitSalad::get_device().end_capture()

    if filename.downcase.end_with?( ".rsp" )
        expected = FruitSalad::read_wisce_rsp_file( filename )
    else
        expected = FruitSalad::response_from_file( filename )
    end
    expected = FruitSalad::response_set_bounds( expected, tolerance_db )

    source = FruitSalad::get_device().playback_history.last
    recording = FruitSalad::get_device.output
    measured = FruitSalad::frequency_response( source, recording )

    if nil==low_freq_bound
        FruitSalad::response_acceptable?( expected, measured )
    else
        FruitSalad::response_acceptable?( expected, measured, low_freq_bound, hi_freq_bound )
    end

end

############################### END OF FILE ###################################