# encoding: utf-8
###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   WindowsRemoteSalad.rb
### @brief  FruitSalad device specialisation for windows devices controlled via
###
### @version \$Id: WindowsRemoteSalad.rb 1050 2015-05-20 19:11:02Z aangus $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

#
# Includes
#
require 'fruitsalad_remote_base'
require 'win_driver_test_api'
require 'windows_jack_control'
require 'logfw'
###############################################################################
#
# Implementation of Fruit Salad for SSH connected android devices.
#
###############################################################################
module FruitSalad
    extend FruitSaladRemoteBase

    ###########################################################################
    #
    # Device Specialisation
    #
    ###########################################################################
    class WindowsRemoteSalad < FruitSaladRemoteBase::RemoteDeviceInterface
        include RemoteWinDriverTestAPI
        include WindowsJackControl
        # A directory on the target machine which we can safely clobber with our
        # files. Should end in a trailing directory seperator.
        TempDir = Conf.property( :Remote_TempDir, "C:/fruit_salad_temp/" )
        # The number of audio channels to open for playback.
        PlaybackChannels = Conf.property( :Playback_Channels, 2 )
        # The number of audio channels to open for playback.
        RecordingChannels = Conf.property( :Recording_Channels, 2)
        # Audio buffer size.
        BufferSize = Conf.property( :AudioBufferSize, 2048 )
        # Location of fruitsalad_player_daemon.exe
        FruitSaladPlayerDaemon =
            Conf.property( :Remote_FruitsaladPlayerDaemon,
                           './bin/fruitsalad_player_daemon.exe'
                         )
        # Location of fruitsalad_player.exe
        FruitSaladPlayer = Conf.property( :Remote_FruitsaladPlayer,
                                          './bin/fruitsalad_player.exe'
                                        )
        # Location of libzmq.dll
        LibZMQ = Conf.property( :Remote_LibZMQ, './lib/libzmq.dll' )
        # Location of portaudio_x86.dll
        LibPortaudio = Conf.property( :Remote_LibPortaudio,
                                      './lib/portaudio_x86.dll'
                                    )
        # Location of libsndfile-1.dll
        LibSndfile = Conf.property( :Remote_LibSndfile,
                                    './lib/libsndfile-1.dll'
                                  )
        # Location of portaudio_client_x86.dll
        LibPortaudioClient = Conf.property( :Remote_LibPortaudioClient,
                                            './lib/portaudio_client_x86.dll'
                                          )

        # Location of WinDriverTestAPI.dll
        LibWinDriverTestAPI = Conf.property( :Remote_LibWinDriverTestAPI,
                                             './lib/WinDriverTestAPI.dll'
                                           )

        # Whether to upload files as a zip or individual files.
        RemoteDistributionMethod = Conf.property( :Remote_DistributioMethod,
                                                  'individual'
                                                )

        # Location of remote client tool.
        RemoteClientTool = Conf.property( :Remote_ClientTool,
                                          "./bin/windows_remote_client_tool.exe"
                                        )


        #######################################################################
        #
        # @function Initialize
        #
        # Default constructor
        #
        #######################################################################
        def initialize
            connect

            clean_temp_dirs
            # copy files to the remote target
            deploy_remote_files( RemoteDistributionMethod )

            # start and setup the daemon on the target to receive further commands
            @session.exec "#{TempDir}fruitsalad_player_daemon.exe"
            @session.exec! "#{TempDir}fruitsalad_player.exe set_up -p #{PlaybackChannels} -r #{RecordingChannels} -s #{SampleRate} -b #{BufferSize}"

            # ensure that the daemon is terminated when Fruit Salad exits
            at_exit do
                $LOG.info @session.exec! "#{TempDir}fruitsalad_player.exe terminate"
                cleanup
            end

            @default_usecases = []
            @wmctl = RemoteJackControl.new @session
        end

        #######################################################################
        #
        # @function clean_temp_dirs
        #
        # @note Cleans the temporary directories on the target
        #
        # (no parameters)
        #
        #######################################################################
        def clean_temp_dirs
            # remove and recreate the existing TempDir on the target
            $LOG.info @session.exec! "rm -R -f #{TempDir}"
            $LOG.info @session.exec! "mkdir -p #{TempDir}"

            # create a tmp directory if it doesn't already exist on the host
            unless File.exists?('./tmp')
                Dir.mkdir('./tmp')
            end
        end

        #######################################################################
        #
        # @function create_cp_files
        #
        # @note Create an array of filenames to be copied across to the target.
        #
        # (no parameters)
        #
        #######################################################################
        def create_cp_files
            @cp_files = []
            @cp_files << FruitSaladPlayerDaemon
            @cp_files << FruitSaladPlayer
            @cp_files << LibZMQ
            @cp_files << LibPortaudio
            @cp_files << LibSndfile
            @cp_files << LibPortaudioClient
            @cp_files << LibWinDriverTestAPI
            @cp_files << RemoteClientTool
        end

        #######################################################################
        #
        # @function deploy_remote_files
        #
        # @note Deploys necessary files to the remote target either as a zipfile or
        #       as individual files. When uploaded individually execute permissions
        #       will need to be updated.
        #
        # @param [String] deploy_method Deployment method [zipfile|individual]
        #
        # @raise Will raise an exception if the deployment method is not recognised.
        #
        #######################################################################
        def deploy_remote_files( deploy_method )
            # initialise the list of files to be copied
            create_cp_files

            if 'zipfile' == deploy_method
                zip_file = './tmp/fruitsalad_player.zip'
                # NOTE: zip may not be present on UNIX systems
                `zip #{zip_file} -j #{@cp_files.join(' ')}`
                upload( zip_file, TempDir )
                @session.exec! "unzip #{TempDir}fruitsalad_player.zip -d #{TempDir}"
            elsif 'individual' == deploy_method
                @cp_files.each do |filename|
                    upload( filename, TempDir )
                end

                # update execute permissions for ssh copied files
                @session.exec! "chmod 744 #{TempDir}*.exe"
                @session.exec! "chmod 744 #{TempDir}*.dll"
            else
                raise("Unknown remote deployment method '#{deploy_method}'.")
            end
        end

        #######################################################################
        #
        # @function per_device_setup
        #
        # Unlike other targets, the Remote target involves a lot of downloads
        # and uploads. Bypass the normal timer behavior by using a custom timer
        # that only tracks time spent playing back.
        #
        # (no parameters)
        #
        #######################################################################
        def per_device_setup
            @timer = 0
            return
        end

        #######################################################################
        #
        # @function time_taken
        #
        # Get the time taken performing only Playback actions.
        #
        # (no parameters)
        #
        #######################################################################
        def time_taken
            return @timer
        end

        #######################################################################
        #
        # @function record_output
        #
        # Begins recording and stores a filename as the instance
        # variable @output.
        #
        # (no parameters)
        #
        #######################################################################
        def record_output()
            record = Proc.new do |proc_file|
                @session.exec! "#{TempDir}fruitsalad_player.exe record -f #{TempDir}#{proc_file}"
            end

            setup_remote_record_output( TempDir, record )
        end

        #######################################################################
        #
        # @function playback
        #
        # Plays a named file on the windows device.
        #
        # This script will SCP the named file onto the Android device,
        # and then play it.
        #
        # @param [String] file The path to the file to play.
        # @param [Hash]   opts Optional playback arguments. This platform
        #                      supports: [String] program - the name of the
        #                      program to use if third party playback is
        #                      enabled. Defaults to windows media player (wmp).
        #
        #######################################################################
        def playback( file, opts = {} )
            supported_opts = [:program]
            validate_options( opts.keys, supported_opts, 'WindowsRemoteSalad: (playback)' )

            program = opts[:program]

            duration = FruitSalad::track_length( file ) * 1000
            if Conf.property( "Windows_UseThirdPartyPlayback", false )
                play = Proc.new do |proc_file|
                    program = "wmp" if program.nil?
                    third_party_playback( program, "#{TempDir}#{proc_file}", duration )
                end
            else
                play = Proc.new do |proc_file|
                    $LOG.info @session.exec! "#{TempDir}fruitsalad_player.exe play -f #{TempDir}#{proc_file}"
                    $LOG.info @session.exec! "#{TempDir}fruitsalad_player.exe stop_playback"
                end
            end

            start_remote_playback( file, TempDir, play )
        end

        #######################################################################
        #
        # @function end_capture
        #
        # Ends any ongoing sound recording.
        #
        # Automatically downloads the captured recording onto the host
        # machine.
        #
        # (no paramters)
        #
        #######################################################################
        def end_capture()
            end_cap = Proc.new do
                $LOG.info @session.exec! "#{TempDir}fruitsalad_player.exe stop_recording"
            end

            end_remote_capture( TempDir, end_cap )
        end
    end
end

# Configure the Device Factory to use our specialised device.
FruitSalad.type = FruitSalad::WindowsRemoteSalad

#################################### END OF FILE ##############################