////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   error_handling.cpp
/// @brief  Function definitions for simple error reporting to stdout.
///
/// @version \$Id: error_handling.cpp 819 2015-02-02 13:54:52Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "stdafx.h"

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CheckError
///
/// @brief Checks a HRESULT value for an error and if one occured prints the
///        corresponding error message.
///
/// @param callingMethodName   A wide string indicating where the error occured for logging
/// @param hresult The hresult to check.
///
/// @return true if no error occured, else false
///
///////////////////////////////////////////////////////////////////////////////
bool CheckError( TCHAR *callingMethodName, HRESULT hresult )
{
    if ( FAILED( hresult ) )
    {
        PrintError( callingMethodName, hresult );
        return false;
    }
    else
    {
        return true;
    }
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PrintError
///
/// @brief Logging function which takes a COM HRESULT error code and prints a
///        formatted error message to the console.
///
/// @param callingMethodName    A string indicating where this error has occured 
///                             i.e. the method name.
/// @param error_code           The HRESULT error code to translate and print.
///
///////////////////////////////////////////////////////////////////////////////
void PrintError( TCHAR *callingMethodName, HRESULT error_code )
{
    _com_error error( error_code );
    const TCHAR *message = error.ErrorMessage();
    _tprintf( L"ERROR: %s: %s.\n", callingMethodName, message );
    return;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PrintLastError
///
/// @brief Wrapper which uses GetLastError and HRESULT_FROM_WIN32 to obtain the
///        appropriate HRESULT automatically.
///
/// @param callingMethodName    A string indicating where this error has occured.
///
///////////////////////////////////////////////////////////////////////////////
void PrintLastError( TCHAR *callingMethodName )
{
    DWORD error = GetLastError();
    PrintError( callingMethodName, HRESULT_FROM_WIN32( error ) );
}

/////////////////////////////// END OF FILE ///////////////////////////////////
