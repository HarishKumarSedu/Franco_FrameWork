////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2015 Cirrus Logic International (UK) Ltd. All rights reserved.
//
// This software as well as any related documentation is furnished under
// license and may only be used or copied in accordance with the terms of the
// license. The information in this file is furnished for informational use
// only, is subject to change without notice, and should not be construed as
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document.
//
// Except as permitted by such license, no part of this document may be
// reproduced, stored in a retrieval system, or transmitted in any form or by
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies.
//
/// @file   discontinuity.h
/// @brief  Discontinuity detection function for FruitSalad.
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

#include "sndfile.h"

//
// Defines
//
#ifndef DISCONTINUITY_H
#define DISCONTINUITY_H

#define DISC_FRAME_LENGTH 4096
#define DISC_FFT_LENGTH ( DISC_FRAME_LENGTH*2 )
#define DISC_NUM_BINS ( DISC_FRAME_LENGTH + 1 )
#define MAGNITUDE_RATIOS_COUNT 4096
#define HANN_WINDOW_LENGTH (DISC_FFT_LENGTH)

#define XCOR_LENGTH 1024
#define DELAY_LENGTH 4608
#define XCF_LENGTH ( XCOR_LENGTH + DELAY_LENGTH )
#define XCFOUT_LENGTH ( XCOR_LENGTH + DELAY_LENGTH + XCOR_LENGTH )
#define MAGNITUDE_RATIO_THRESHOLD 2

#define PI 3.14159265358979323846
#define NOISE_THRESHOLD_DB -80
#define POW15 32768

#define WAVEHEADER_SIZE 44
#define SF_TYPE_MASK 0X000000FF


#define FRAMELENGTH 160
#define SILENCE_THRESHOLD -60


#ifdef DISC_EXPORTS
#define DISC_API __declspec(dllexport)
#else
#define DISC_API __declspec(dllimport)
#endif


typedef struct
{
    double xcfRef[XCOR_LENGTH];
    double xcfOut[XCFOUT_LENGTH];
    double xcFunction[XCF_LENGTH];

    float refReal[DISC_FFT_LENGTH];
    float outReal[DISC_FFT_LENGTH];
    float refComplex[DISC_FFT_LENGTH];
    float outComplex[DISC_FFT_LENGTH];
    float refFFTReal[DISC_FFT_LENGTH];
    float refFFTImg[DISC_FFT_LENGTH];
    float outFFTReal[DISC_FFT_LENGTH];
    float outFFTImg[DISC_FFT_LENGTH];
    float refMagnitudeRatio[MAGNITUDE_RATIOS_COUNT];
    float outMagnitudeRatio[MAGNITUDE_RATIOS_COUNT];
    float imagInput[DISC_FFT_LENGTH];

    double hannWindow[HANN_WINDOW_LENGTH];
}discDetect;
//
// Enums
//
typedef enum { FILEOPEN_ERROR = 0x0,
               NO_DISCONTINUITY = 0x1,
               DISC_DETECTED = 0x2
             } DiscontinuityRetCode;

////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
///
// Function: NormCrossCorrelation
///
/// @brief    Computing normalized correlation of output signal with reference
///           signal.
///
/// @param pXcfRef  Pointer to the buffer to hold reference file samples.
/// @param pXcfOut  Pointer to the buffer to hold ouput file samples.
/// @param pCorrOut Pointer to the buffer to hold cross correlation output.
///
/// @return   Returns cross correlation index.
///
///////////////////////////////////////////////////////////////////////////////
int NormCrossCorrelation( double *pXcfRef,
                          double *pXcfOut,
                          double *pCorrOut
                        );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ComputeMagnitudeRatio
///
/// @brief    Calculates magnitude ratios(b/a) for reference and output files.
///
/// @param pRefFFTReal        Pointer to the buffer to hold reference real part.
/// @param pRefFFTImg         Pointer to the buffer to hold reference imaginary part.
/// @param pOutFFTReal        Pointer to the buffer to hold output real part.
/// @param pOutFFTImg         Pointer to the buffer to hold output imaginary part.
/// @param pRefMagnitudeRatio Pointer to the buffer to hold reference magniutde ratios.
/// @param pOutMagnitudeRatio Pointer to the buffer to hold output magnitude ratios.
/// @param normValue          Value used for normalizing.
///
///////////////////////////////////////////////////////////////////////////////
void ComputeMagnitudeRatio( float *pRefFFTReal,
                            float *pRefFFTImg,
                            float *pOutFFTReal,
                            float *pOutFFTImg,
                            float *pRefMagnitudeRatio,
                            float *pOutMagnitudeRatio,
                            float normValue
                          );

///////////////////////////////////////////////////////////////////////////////
///
// Function: DetectDiscontinuity
///
/// @brief    Comparing magnitude ratios of reference and output signals.If the
///           signal level is strong and if the difference between magnitude
///           ratios is greater than 0.1dB, then there is discontinuty in the
///           output.
///
/// @param pRefMagnitudeRatio  Pointer to the buffer to hold reference signal
///                            magnitude ratios.
/// @param pOutMagnitudeRatio  Pointer to the buffer to hold output signal
///                            magnitude ratios.
/// @param pRefFFTReal         Pointer to the buffer to hold reference FFT
///                            output.
///
/// @return   Returns 1 if discontinuity is detected otherwise 0 is returned.
///
///////////////////////////////////////////////////////////////////////////////
int DetectDiscontinuity( float *pRefMagnitudeRatio,
                         float *pOutMagnitudeRatio,
                         float *pRefFFTReal
                       );

extern "C"
{
///////////////////////////////////////////////////////////////////////////////
///
// Function: DiscontinuityDetection
///
/// @brief    Provides wrapper functionality from the native code and acts as a
///           interface to the discontinuity detection dll calls
///
/// @param pReferenceFile     Reference file path.
/// @param pOutputFile        Output file path.
/// @param pDiscontinuityTime Pointer to hold time at which discontinuity
///                           occured in output file.
///
/// @retval FILEOPEN_ERROR   Couldn't open files.
/// @retval DISC_DETECTED    Discontinuity detected in output file.
/// @retval NO_DISCONTINUITY No discontinuity in output file.
///
///////////////////////////////////////////////////////////////////////////////
DISC_API DiscontinuityRetCode DiscontinuityDetection( char  *pReferenceFile,
                                                      char  *pOutputFile,
                                                      float *pDiscontinuityTime
                                                    );
}

///////////////////////////////////////////////////////////////////////////////
///
// Function: CalcHannWindow
///
/// @brief    Calculation of Hanning window samples.
///
/// @param pHannWindow Pointer to hanning window buffer.
/// @param length      Length of hanning window buffer.
///
///////////////////////////////////////////////////////////////////////////////
void CalcHannWindow( double *pHannWindow,
                     int    length
                   );

///////////////////////////////////////////////////////////////////////////////
///
// Function: InitBuffers
///
/// @brief    Initialize buffers with zeros.
///
/// @param  stDiscDetect Pointer to structure.
///
///////////////////////////////////////////////////////////////////////////////
void InitBuffers( discDetect *stDiscDetect );

///////////////////////////////////////////////////////////////////////////////
///
// Function: SilenceDetection
///
/// @brief    Detects silence in the file.
///
/// @param  sndRefFile Pointer to the file.
///
/// @return   Returns number of samples of silence detected in the file.
///
///////////////////////////////////////////////////////////////////////////////
int SilenceDetection( SNDFILE *sndRefFile );

#endif // DISCONTINUITY_H
/////////////////////////////END OF FILE///////////////////////////////////////