////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file functions.cpp
/// @brief  Implementation for a table of functions calleable using this utility.
///
/// @version \$Id: functions.cpp 620 2014-12-22 13:22:50Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

//
// Includes
//
#include "stdafx.h"
#include "functions.h"

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CallFunction
///
/// @brief Call the binding for the named function with arguments.
///
/// @param name         The name of the function to call the binding for.
/// @param argumnents   The arguments to pass to that function.
///
/// @return The return value of the function.
///
///////////////////////////////////////////////////////////////////////////////
int Functions::CallFunction( const string &name, const Functions::Arguments &arguments )
{
    Functions::Function functionPointer;
    int returnVal = 0;
    try {
        functionPointer = table.at( name );
    }
    catch ( const std::out_of_range& ) 
    {
        std::cout << "Function name does not exist: "<< name << "\n";
        returnVal = -1;
        goto done;
    }
    returnVal = functionPointer( arguments );
done:
    return returnVal;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: RegisterFunction
///
/// @brief Attach the binding for a function to the table so that it can be used
///        with CallFunction.
///
/// @param name     The name of the function this is to be a binding for.
/// @param pointer  The function pointer of the binding.
///
///////////////////////////////////////////////////////////////////////////////
void Functions::RegisterFunction( const string &name, const Functions::Function pointer ) 
{
    table[name] = pointer;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetGlobal
///
/// @brief Obtain handle to the global Functions object.
///
/// (no parameters)
///
/// @return The global Functions object.
///
///////////////////////////////////////////////////////////////////////////////
Functions* Functions::GetGlobal()
{
	static Functions *global = 0;
    if (!global)
    {
        global = new Functions();
    }
    return global;
}


/////////////////////////////////// END OF FILE ///////////////////////////////
