###############################################################################
###
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  soundclear_control_tests.rb
### @brief Encapsulates all the soundclear control algorithm test method
###        definitions
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'logfw'

###############################################################################
#
# @function check_scc_got_triggered
#
# Has SoundClear Control been triggered?
#
# @return [Bool] True if the firmware has been triggered at least once.
#
###############################################################################
def check_scc_got_triggered

    register_address = Conf.property( :Trigger_Phrase_Found_Counter_Address,
                                       nil
                                     )

    device = FruitSalad.get_device()
    $LOG.info "Reading trigger phrase counter...\n"

    trigger_counter_address = register_address.to_s( 16 )
    trigger_counter = device.read_memory_value( trigger_counter_address, 4 )
    $LOG.debug "trigger_counter : #{trigger_counter}"

    return 0 != trigger_counter.to_i
end

#######################################################################
#
# @function read_voice_trigger_counter_value
#
# Interface for voice trigger counter node.
#
# @return [Integer] trigger_counter Returns the voice trigger counter node
#                                   value.
#
#######################################################################
def read_voice_trigger_counter_value
    device = FruitSalad.get_device()

    trigger_counter = device.soundclear_control.read_voice_trigger_counter()
    raise 'Voice trigger count is not available 'if nil == trigger_counter

    return trigger_counter.to_i
end