###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   env.rb
### @brief  Set-up commands to run each time a FruitSalad scenario is run.
###
### @version \$Id: env.rb 1051 2015-05-21 14:50:02Z aangus $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
################################################################################

require 'logfw'


# Append Target location for test components
$: << File.dirname( ENV['FruitSaladTarget'] )
# Dynamically require in the required target platform
require "#{ENV['FruitSaladTarget']}"

# Reset the fruit salad device before each scenario.
Before do
    FruitSalad::get_device.setup
end

################################################################################
# Helper Methods
################################################################################

################################################################################
#
# @function check_step_failed
#
# Invokes a nested step and checks that a RuntimeError exception is raised.
#
# @raise [RuntimeError] if the expected failing test did not raise a
#                       RuntimeError exception.
#
################################################################################
def check_step_failed( nested_step, table = nil )
    exception_raised = false
    begin
    step( nested_step, table )
    rescue RuntimeError  => e
        exception_raised = true
        $LOG.debug "Expected Failure: \"#{e}\""
    end

    unless exception_raised
        raise( 'Expected failing step did not raise an exception.' )
    end
end

################################### END OF FILE ################################