# encoding: utf-8
###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   LinuxSalad.rb
### @brief  Basic implementation of fruit salad for Linux-based devices.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################
#
# Includes
#
require "fruitsalad_base"
require "device_factory"
require "wavefile_analyzer"
require "configuration"
require "generate_script"
require "saladmix_invoke"
require "tone_generator"
require "tinyalsa_inspect"
require "fruitsalad_utils"
require 'linux_firmware'
require 'linux_jack_detection'
require 'test_components/soundclear_control_linux'
require 'logfw'
#
# Stdlib Includes
#
require 'fileutils'

#################################################################################
#
# Implementation of Fruit Salad for Linux-based devices.
#
#################################################################################
module FruitSalad

    extend WavefileAnalyzer
    extend FruitSaladDeviceFactory
    extend ToneGenerator

    #############################################################################
    #
    # Device Specialisation
    #
    #############################################################################
    class LinuxSalad < FruitSaladBase::DeviceInterface
        include LinuxFirmware
        include LinuxJackDetection

        # Import config variables for saladmix.
        include SaladMixInvoker
        # Sets the samplerate to request for playback and record.
        # Set with the SampleRate key.
        SampleRate = Conf.property( :SampleRate, nil )
        # The folder where usecase scripts can be found.
        UsecasePath = Conf.property( :UsecasePath, nil )
        # A list of usecase scripts to invoke when usecase :default is called.
        # Can be overwritten with the config variable DefaultUsecases
        DefaultUsecases = Conf.property( :DefaultUsecases, [
                                                         "Playback_to_Headset",
                                                         "Record_from_Headset"
                                                           ]
                                       )
        #
        # Index of the audio card to test (supplied to tinyalsa tools with:
        # -D <card>)
        #
        AudioCardIndex = Conf.property( :Linux_AudioCardIndex, 0 )
        # bit depth
        Bitdepth = Conf.property( :Bitdepth, 16 )

        #########################################################################
        #
        # @function initalize
        #
        # Default constructor
        #
        # (no parameters)
        #
        #########################################################################
        def initialize
            initialize_firmware_components()
            # Location to store a history of all files requested for playback.
            @playback_history = Array.new
            # Store our DefaultUsecases as an instance variable so methods from
            # FruitSaladBase::DeviceInterface can access it.
            @default_usecases = DefaultUsecases

            @saladmix_binary = SaladMixLocation
            # Indicate that we have yet to load a usecase.
            @usecase_loaded = false

            @jack_detection_invoker = JDInvoker.new
        end

        #######################################################################
        #
        # @function initialize_firmware_components
        #
        # Loads the testing components for our firmware algorithms.
        #
        # (no parameters)
        #
        #######################################################################
        def initialize_firmware_components
            @soundclear_control = SoundClearControlForLinux.new( self )
        end

        ###################################################################
        #
        # @function usecase_from_file
        #
        # Switch to the given use case.
        #
        # On a Linux-based device this is achieved using the usecase script of
        # the same name.
        #
        # @param [String, symbol] prefix is the usecase to invoke excluding the
        #                                CSV extension.
        #
        ###################################################################
        def usecase_from_file( prefix )
            file = File.join( UsecasePath, prefix + ".csv" )
            if nil == @saladmix_binary
                $LOG.info "Generating bash script."
                script = GenerateScript::Script.new( file )
                file = script.script_name
                timed_cmd "Executing usecase script #{file}..." do
                    system "bash #{file}"
                end
            else
                timed_cmd "Loading usecase CSV: #{file}..." do
                    system "#{@saladmix_binary} -D #{AudioCardIndex} #{file}"
                end
            end
        end

        ###################################################################
        #
        # @function record_output
        #
        # Begins recording from the headset jack and stores a filename as
        # the instance variable @output.
        #
        # (no parameters)
        #
        ###################################################################
        def record_output()
            @output = "/tmp/LinuxSaladRecording.wav"
            begin
                system( "rm #{@output}" )
            rescue Errno::ENOENT
            end
            @defer_recording = Proc.new {
                system( "tinycap #{@output} -D #{AudioCardIndex} -r #{SampleRate} &" )
            }
        end

        ###################################################################
        #
        # @function playback
        #
        # Plays a named file.
        #
        # @param [String] file is the path to the file to play.
        # @param [Hash]   opts Optional playback arguments. This platform
        #                      supports: none
        #
        ###################################################################
        def playback( file, opts = {} )
            supported_opts = []
            validate_options( opts.keys, supported_opts, 'LinuxSalad: (playback)' )

            # Ensure at least one usecase is loaded.
            usecase( :default ) unless @usecase_loaded
            @playback_history << file

            @defer_recording.call unless nil == @defer_recording

            system( "tinyplay #{file} -D #{AudioCardIndex} -r #{SampleRate}" )
        end

        ###################################################################
        #
        # @function end_capture
        #
        # Ends any ongoing sound recording.
        #
        # @note Accomplishes this by killing /all/ tinycap processes, may
        #       be dangerous depending on set-up.
        #
        ###################################################################
        def end_capture()
            system( "killall -2 tinycap" )
            #
            # Tinycap doesn't flush .wav headers until/unless it exits
            # successfully.
            #
            pause = 5
            sleep pause
            # Do not allow this pause to count against our
            # run time.
            @start_time += pause
        end

        #######################################################################
        #
        # @function mixer_property
        #
        # Retrieve the status of a TinyAlsa mixer control using tinymix.
        #
        # @param [String] key The name of the mixer control.
        #
        # @return [String] The value of that control.
        #
        #######################################################################
        def mixer_property( key )
            value = `tinymix -D #{AudioCardIndex} \"#{key}\"`
            value = TinyAlsaInspect::parse_property( value )
            return value
        end

        #######################################################################
        #
        # @function upload
        #
        # Dummy implementation of upload method which copies the file locally.
        #
        # @param [String] source      Path of the source file to copy.
        # @param [String] destination Path to the destination to copy into.
        #
        #######################################################################
        def upload( source, destination )
            FileUtils.copy( source, destination )
        end

    end
end

# Configure the Device Factory to use our specialised device.
FruitSalad.type = FruitSalad::LinuxSalad

#################################### end ########################################