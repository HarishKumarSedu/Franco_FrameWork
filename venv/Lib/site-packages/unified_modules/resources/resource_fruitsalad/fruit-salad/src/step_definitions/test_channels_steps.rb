###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file test_channels_steps.rb
### @brief Cucumber steps definition for disabling all channels and enabling only one at a time.
###
### @version \$Id: test_channels_steps.rb 997 2015-04-07 14:12:25Z emmas $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'logfw'

###############################################################################
#
# @!method Given_I_playback_to_the_named_channel_only
#
# Disable all playback channels except the one named.
#
#       Usage:
#       Given I playback to the <channel_name> channel only
#
# @example Given I playback to the left channel only
#
# @param channel_name The user-friendly name for the channel
#
###############################################################################
Given( /^I playback to the (.+) channel only$/ ) do |channel_name|
    @channel_volume_modified = true
    FruitSalad::get_device().set_all_playback 0
    FruitSalad::get_device().set_volume_on_playback_channel( channel_name, 1 )
end

###############################################################################
#
# @!method Given_I_record_from_the_named_channel_only
#
# Disable all recording channels except the one named.
#
#       Usage:
#       Given I record from the <channel_name> channel only
#
# @example Given I record from the left channel only
#
# @param channel_name The user-friendly name for the channel
#
###############################################################################
Given( /^I record from the (.+) channel only$/ ) do |channel_name|
    @channel_volume_modified = true
    FruitSalad::get_device().set_all_capture 0
    FruitSalad::get_device().set_volume_on_capture_channel( channel_name, 1 )
end

###############################################################################
#
# @!method Given_playback_named_channel_volume_is_X
#
# Reduce the volume on one playback channel.
#
#       Usage:
#       Given playback <channel_name> channel volume is <volume_level>
#
# @example Given playback left channel volume is 32
#
# @param channel_name The user-friendly name for the channel
# @param volume       The volume level to set the channel to
#
###############################################################################
Given( /^playback (.+) channel volume is (#{Number})$/ ) do |channel, volume|
    @channel_volume_modified = true
    FruitSalad::get_device().set_volume_on_playback_channel( channel, volume )
end

###############################################################################
#
# @!method Given_capture_named_channel_volume_is_X
#
# Reduce the volume on one recording channel.
#
#       Usage:
#       Given capture <channel_name> channel volume is <volume_level>
#
# @example Given capture left channel volume is 32
#
# @param channel_name The user-friendly name for the channel
# @param volume       The volume level to set the channel to
#
###############################################################################
Given( /^capture (.+) channel volume is (#{Number})$/ ) do |channel, volume|
    @channel_volume_modified = true
    FruitSalad::get_device().set_volume_on_capture_channel( channel, volume )
end

#
# Cleanup
#
###############################################################################
#
# If the channel volumes have been modified they need resetting after
# the scenario.
#
###############################################################################
After do
    if true == @channel_volume_modified
        begin
            FruitSalad::get_device().set_all_playback 1
            FruitSalad::get_device().set_all_capture 1
        rescue Cucumber::Pending => e
            $LOG.debug e
        end
    end
end

######################################### END OF FILE #########################