###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   generate_script
### @brief  Generates a .sh script invoking tinymix from a csv format key/value file.
###
### @version \$Id: generate_script.rb 767 2015-01-26 16:30:46Z piotrs $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require "configuration"

###############################################################################
#
# Converts a .csv list of tinymix control names, and their value to an executable
# shell script which repeatedly invokes tinymix, setting each control one at a
# time.
#
# This is provided for backwards compatibility where our new saladmix binary
# is not immediately available. Longer usecase scripts may take several minutes
# to execute.
#
###############################################################################
module GenerateScript

    # A prefix to assigned to the generated script. Can be set with the
    # :UsecaseScriptName configuration variable.
    ScriptName = Conf.property( :UsecaseScriptName, "tmpUsecaseScript" )
    # The tinymix invocation, including the binary name and any common switches
    CMD = 'tinymix -D'
    #
    # Index of the audio card to test (supplied to tinyalsa tools with:
    # -D <card>)
    #
    AudioCardIndex = Conf.property( :Linux_AudioCardIndex, 0 )

    ###########################################################################
    #
    # Encapsulates a generated script.
    #
    ###########################################################################
    class Script

        # The name of the generated script.
        attr_reader :script_name

        # Script.new functions as a sugar for open_csv.
        def initialize( filename )
            open_csv( filename )
        end

        #######################################################################
        #
        # Opens a csv and parses it into an executable .sh file.
        #
        #######################################################################
        def open_csv( filename )
            @script_name = ScriptName + File.basename( filename ) + ".sh"

            in_file = File.open( filename, 'r' )
            out_file = File.open( @script_name, 'wb' )

            out_file << "#!/bin/bash\n"
            out_file << "CMD=\"#{CMD} #{AudioCardIndex}\"\n"

            in_file.readlines.each do |row|
                row = row.chomp
                if /^#/ =~ row
                    out_file << row << "\n"
                else
                    row = row.split( ',' )
                    out_file << "$CMD #{row[0]}"
                    row.shift
                    row.each do |value|
                        out_file << " #{value}"
                    end
                    out_file << "\n"
                end
            end
            in_file.close
            out_file.close
        end

    end
end