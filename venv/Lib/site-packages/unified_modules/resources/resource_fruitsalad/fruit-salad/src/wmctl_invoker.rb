###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   wmctl_invoker.rb
### @brief  Invoke the WMCTL windows driver test utility
###
### @version \$Id: wmctl_invoker.rb 817 2015-02-02 13:29:56Z emmas $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

#
# Requires
#
require 'configuration'
require 'logfw'

###############################################################################
#
# Component for extracting information and controlling driver debug features using
# WMCTL.
#
###############################################################################
class WMCTLInvokerBase

    ###########################################################################
    #
    # @function initialize
    #
    # Default constructor.
    #
    # (no parameters)
    #
    ###########################################################################
    def initialize
        @dirty = true
        @status_hash = Hash.new()
    end

    ###########################################################################
    #
    # @function update
    #
    # Sets the dirty bit for the wmctl status, causing it to be refetched the next
    # time information is read from it.
    #
    # (no parameters)
    #
    ###########################################################################
    def update
        @dirty = true
    end

    ###########################################################################
    #
    # @function status
    #
    # Retrieve the information from the wmctl status command as a Hashmap object.
    #
    # @note Data is cached within this object and only updated if update() has
    #       been called since the last time this method was called.
    #
    # (no parameters)
    #
    # @return [Hash{Sym=>Bool}] The parsed output of 'wmctl status'
    #
    ###########################################################################
    def status
        if @dirty
            @status_hash = parse_status( wmctl_command 'status' )
        end
        @dirty = false
        return @status_hash
    end

    ###########################################################################
    #
    # @function parse_status
    #
    # Parse the output of wmctl_status into a Hashmap object.
    #
    # @param [String] string The raw output of 'wmctl status'
    #
    # @return [Hash{Sym=>Bool}] The parsed data
    #
    # @raise [RunTimeException] If string does not match the expected output from
    #                           wmctl status
    #
    ###########################################################################
    def parse_status( string )
        jack_line = /4\s+Jack\s+jack_Policy\s+CABLE:(?<cable>Y|N) HP:(?<headphone>Y|N) LINEOUT:(?<lineout>Y|N) MIC:(?<mic>Y|N) HPIMP:(?<hpimp>\d+) MODE:(?<mode>\d+) \((?<virtualjack_status>P|V)\)/im
        jack_data = jack_line.match string

        if jack_data.nil?
            $LOG.debug "ERROR: Could not parse WMCTL status: #{string}"
            raise "Could not parse WMCTL status"
        end

        new_status = {
                         :cable=> 'Y' == jack_data[:cable],
                         :headphone=> 'Y' == jack_data[:headphone],
                         :lineout=> 'Y' == jack_data[:lineout],
                         :mic=> 'Y' == jack_data[:mic],
                         :hpimp=> 'Y' == jack_data[:hpimp],
                         :mode=> 'Y' == jack_data[:mode],
                         :virtualjack_status=> 'Y' == jack_data[:virtualjack_status]
                       }
        return new_status
    end

    ###########################################################################
    #
    # @function virtualjack_enabled?
    #
    # Is virtualjack active and suppressing normal jack detection?
    #
    # (no parameters)
    #
    # @return [Bool] True if virtualjack is enabled
    #
    ###########################################################################
    def virtualjack_enabled?
        return status[:virtualjack_enabled]
    end

    ###########################################################################
    #
    # @function virtualjack
    #
    # Activate or deactivate virtualjack and configure the simulated audio
    # endpoints.
    #
    # @note Calls update()
    #
    # @param [Bool] status          True if virtualjack should be enabled.
    # @param [Bool] input_endpoint  True if virtualjack should simulate a microphone
    # @param [Bool] output_endpoint True if virtualjack should simulate headphones
    #
    ###########################################################################
    def virtualjack( status, input_endpoint=false, output_endpoint=false )
        status = status ? 'enable' : 'disable'
        input_endpoint = input_endpoint ? 'enable' : 'disable'
        output_endpoint = output_endpoint ? 'enable' : 'disable'
        wmctl_command "virtualjack --entity=4 --state=#{status} --input=#{input_endpoint} --output=#{output_endpoint}"
        update()
    end

    ###########################################################################
    #
    # @function headphones_connected?
    #
    # Are headphones or lineout endpoints currently connected, or simulated?
    #
    # (no parameters)
    #
    # @return True if 'wmctl status' is reporting either headphones or lineout
    #         connected
    #
    ###########################################################################
    def headphones_connected?
        return status[:headphone] || status[:lineout]
    end

    ###########################################################################
    #
    # @function mic_connected?
    #
    # Is a microphone currently connected, or simulated?
    #
    # (no parameters)
    #
    # @return True if 'wmctl status' is reporting a microphone connected
    #
    ###########################################################################
    def mic_connected?
        return status[:mic]
    end

end

###############################################################################
#
# Specialisation which invokes wmctl locally. To be used with WindowsSalad.
#
###############################################################################
class WMCTLInvokerLocal < WMCTLInvokerBase

    ###########################################################################
    #
    # @function wmctl_command
    #
    # Invokes wmctl utility locally, using backtick substitution
    #
    # @param [String] command command The command line arguments to be passed to wmctl
    #                         when it is invoked
    #
    # @return [String] The raw output from the wmctl command
    #
    ###########################################################################
    def wmctl_command( command )
        return `wmctl #{command}`
    end

end

###############################################################################
#
# Specialisation which invokes wmctl over an open SSH session. To be used with
# WindowsRemoteSalad.
#
###############################################################################
class WMCTLInvokerRemote < WMCTLInvokerBase

    # Attribute to hold the open SSH session.
    attr_accessor :session

    ###########################################################################
    #
    # @function initialize
    #
    # Attaches the open SSH session to this component when it is created.
    #
    # @param [#exec!] session The open SSH session.
    #
    ###########################################################################
    def initialize( session )
        super()
        @session = session
    end

    ###########################################################################
    #
    # @function wmctl_command
    #
    # Invoke the wmctl utility over the attached SSH session.
    #
    # @param [String] command The arguments to pass to wmctl when it is invoked
    #
    # @return [String] The raw output from wmctl
    #
    # @raise [NoMethodError] If no session has been attached to this component
    #
    ###########################################################################
    def wmctl_command( command )
        return session.exec! "wmctl #{command}"
    end
end

################################## END OF FILE ################################