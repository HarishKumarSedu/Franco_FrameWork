###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file trace_steps.rb
### @brief Step-definitions for capturing of trace output.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

###############################################################################
#
# @!method When_I_play_a_trigger_followed_by_sine_tone_along_with_recording_data
#
# Plays a given audio file and records data from a compressed stream.
#
#       Usage:
#       When I play <filename>.wav followed by a
#            <duration> second long <frequency> sine tone along with recording data
#
# @example When I play resources/bluegeenie7.wav along with recording data
#
# @example When I play resources/bluegeenie7.wav followed by a 2 second 440 Hz
#               sine tone along with recording data
#
# @param input_file  File to be played
# @param tone_length How long to play the tone for
# @param frequency   The frequency of the wave to generate
# @param amplitude   Amplitude of tone
#
###############################################################################
When( /^I play (.*\.wav)(?: followed by a (#{Number}) s(?:econd)?(?: long)? (#{Frequency}) sine tone(?: of amplitude (#{Number}))?)? along with recording data$/ ) do |input_file, tone_length, frequency, amplitude|

    if ( tone_length.nil? || frequency.nil? )
        data_file = nil
    else
        tone_length = tone_length.to_f
        frequency = frequency.to_f

        if amplitude.nil?
            amplitude = 0.4  #Defaulting to 0.4 amplitude range, when it is nil
        else
            amplitude = amplitude.to_f
        end
        data_file = FruitSalad::generate_sinewave( frequency,
                                                   tone_length,
                                                   amplitude: amplitude
                                                 )
    end

    device = FruitSalad::get_device
    device.trace.trace_capture( input_file, data_file: data_file )
end

###############################################################################
#
# @!method When_I_play_sine_wave_for_seconds_of_amplitude_along_with_recording_data
#
# Generate and play a sine wave of some specific frequency along with recording
# data.
#
#       Usage:
#       When I play a <frequency> [k]Hz sine wave for <duration> seconds
#            of amplitude <amplitude> along with recording data
#
# @example When I play a 440 Hz sine wave for 2 seconds of amplitude 0.4 along
#          with recording data
#
# @example When I play a 440 Hz sine wave for 2 seconds along with recording data
#
# @param frequency The frequency of the wave to generate
# @param length    How long to play the tone for
# @param amplitude Amplitude of tone
#
###############################################################################

When( /^I play(?: a)? (#{Frequency}) sine wave for (#{Number}) seconds? (?:of amplitude (#{Number}) )?along with recording data$/ ) do |frequency, length, amplitude|
    if amplitude.nil?
        amplitude = 0.4  #Defaulting to 0.4 amplitude range, when it is nil
    else
        amplitude = amplitude.to_f
    end
    input_file = FruitSalad::generate_sinewave( frequency,
                                                length,
                                                amplitude: amplitude
                                              )

    device = FruitSalad::get_device
    device.trace.trace_capture( input_file )
end

############################### END OF FILE ###################################