# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   aqm_analyzer.rb
### @brief  Wrapper for object-code implementation of audio comparison algotrithm.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

require_relative 'AQMwrapper.rb'
require 'logfw'

################################################################################
#
# Wrapper for shared library object that comparison analysis of output file
# with respect to reference file.
#
################################################################################
module AQMTest

    ###########################################################################
    #
    # @function aqm_test
    #
    # Calls AQM test native code which detects if the given input files are not
    # same.
    #
    # @param [String] file1    Name of the reference file
    # @param [String] file2    Name of the output file
    #
    ###########################################################################
    def self.aqm_test(file1, file2)
        #initialize
        result = AqmWrapper.Init("AQM.dll",0)
        $LOG.debug "\nInit: #{result}"

        result = AqmWrapper.Open()
        $LOG.debug "\nopen: #{result}"

        AqmWrapper.WriteData("select_audio_file", file1)

        AqmWrapper.WriteData("absence", "1")
        AqmWrapper.WriteData("clicking", "1")
        AqmWrapper.WriteData("clipping", "1")
        AqmWrapper.WriteData("freezing", "1")
        AqmWrapper.WriteData("audio_level", "1")
        AqmWrapper.WriteData("interference", "1")

        AqmWrapper.WriteData("threshold", "-50")
        AqmWrapper.WriteData("audio_level_max","5")
        AqmWrapper.WriteData("audio_level_min","-40")

        # start processing. it's blocking function.
        $LOG.info "start processing"
        AqmWrapper.WriteData("processing", "1")

        # if artefact detected result is 1
        #result = AqmWrapper.ReadData("get_absence")
        #puts "absence #{result}"
        #result = AqmWrapper.ReadData("get_clicking")
        #puts "clicking #{result}"
        #result = AqmWrapper.ReadData("get_clipping")
        #puts "clipping #{result}"
        #result = AqmWrapper.ReadData("get_freezing")
        #puts "freezing #{result}"
        #result = AqmWrapper.ReadData("get_audio_level")
        #puts "audio_level #{result}"
        out1 = AqmWrapper.ReadData("audio_level_left")
        $LOG.debug "audio_level_left #{out1}"
        #result = AqmWrapper.ReadData("audio_level_right")
        #puts "audio_level_right #{result}"
        #result = AqmWrapper.ReadData("get_interference")
        #puts "interference #{result}"



        AqmWrapper.WriteData("select_audio_file", file2)

#        AqmWrapper.WriteData("absence", "1")
        AqmWrapper.WriteData("clicking", "1")
        AqmWrapper.WriteData("clipping", "1")
        AqmWrapper.WriteData("freezing", "1")
        AqmWrapper.WriteData("audio_level", "1")
        AqmWrapper.WriteData("interference", "1")

        AqmWrapper.WriteData("threshold", "-50")
        AqmWrapper.WriteData("audio_level_max","5")
        AqmWrapper.WriteData("audio_level_min","-40")

        # start processing. it's blocking function.
        $LOG.info "start processing"
        AqmWrapper.WriteData("processing", "1")

        out2 = AqmWrapper.ReadData("audio_level_left")
        $LOG.debug "audio_level_left #{out2}"

        $LOG.info "AQM END"
        result = AqmWrapper.Close()
        $LOG.debug "close: #{result}"

        out = (out1.to_i - out2.to_i).abs
    end
end