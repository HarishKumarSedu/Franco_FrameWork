////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file bindings.cpp
/// @brief  Functions for type conversion and checking argument numbers.
///
/// @version \$Id: bindings.cpp 700 2015-01-13 14:13:21Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

//
// Includes
//
#include "stdafx.h"
#include "bindings.h"
#include <sstream>
using std::stringstream;

///////////////////////////////////////////////////////////////////////////////
///
/// Function: IntegerFromString
///
/// @brief Convert a string into an integer.
///
/// If the passed string cannot be converted into an integer, the function returns
/// 0.
///
/// @param s The string to convert.
///
/// @return The integer represented by s.
///
///////////////////////////////////////////////////////////////////////////////
int IntegerFromString( string s )
{
    int returnValue = 0;
    stringstream ss = stringstream( s );
    ss >> returnValue;
    return returnValue;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: FloatFromString
///
/// @brief Attempt to convert a string to a floating point number.
///
/// If the passed string cannot be converted, the function returns 0.
///
/// @param s The string to convert.
///
/// @return The float represented by s.
///
///////////////////////////////////////////////////////////////////////////////
float FloatFromString( string s )
{
    float returnValue = 0;
    stringstream ss = stringstream( s );
    ss >> returnValue;
    return returnValue;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: MinimumNumberOfArguments
///
/// @brief Check that the arguments list of a binding is at least a minimum length
///
/// @param arguments The arguments list to check.
/// @param expected  The minimum number of arguments needed.
/// @param function  The name of the function the argument list is being checked against.
///
/// @return true if the arguments list is at least as long as expected, else false.
///
///////////////////////////////////////////////////////////////////////////////
bool MinimumNumberOfArguments( const Functions::Arguments &arguments, unsigned int expected, string function )
{
    if ( arguments.size() < expected )
    {
        std::cout << "Incorrect number of arguments for " << function << " expected " << expected << " received " << arguments.size() << "\n";
        return false;
    }
    return true;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: LoadBindings
///
/// @brief Populate the global Functions object with all of our bindings.
///
/// (no parameters)
///
///////////////////////////////////////////////////////////////////////////////
void LoadBindings()
{
	Functions* functions = Functions::GetGlobal();

	// volume_control_binding.cpp
	functions->RegisterFunction( "GetPlaybackDevice", &GetPlaybackDeviceBinding );
	functions->RegisterFunction( "GetCaptureDevice", &GetCaptureDeviceBinding );
	functions->RegisterFunction( "SetChannelVolume", &SetChannelVolumeBinding );
	functions->RegisterFunction( "GetChannelCount", &GetChannelCountBinding );

    // hibernate_suspend_binding.cpp
    functions->RegisterFunction( "HibernateForDuration", &HibernateForDurationBinding );
    functions->RegisterFunction( "SuspendForDuration", &SuspendForDurationBinding );

    // powerstate_binding.cpp
    functions->RegisterFunction( "CodecDevicePowerState", &CodecDevicePowerStateBinding );

    // playback.cpp
    functions->RegisterFunction( "Playback", &PlaybackBinding );
    functions->RegisterFunction( "GetWMPIdentifier", &GetWMPIdentifierBinding );
    functions->RegisterFunction( "GetMetroIdentifier", &GetMetroIdentifierBinding);

#ifdef _DEBUG
    // unittests
    functions->RegisterFunction( "RunUnittests", &RunUnittestsBinding );
#endif
}

////////////////////////////////////// END OF FILE ////////////////////////////
