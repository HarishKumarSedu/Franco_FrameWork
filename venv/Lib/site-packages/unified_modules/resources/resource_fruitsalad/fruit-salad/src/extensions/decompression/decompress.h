///////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2015 Cirrus Logic International (UK) Ltd. All rights reserved.
//
// This software as well as any related documentation is furnished under
// license and may only be used or copied in accordance with the terms of the
// license. The information in this file is furnished for informational use
// only, is subject to change without notice, and should not be construed as
// a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document.
//
// Except as permitted by such license, no part of this document may be
// reproduced, stored in a retrieval system, or transmitted in any form or by
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies.
//
// @file   decompress.h
// @brief  Provides return codes and prototype of Decompress function.
//
// @warning
//   This software is specifically written for Cirrus Logic devices.
//   It may not be used with other devices.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef DECOMPRESS_H
#define DECOMPRESS_H

// The following ifdef block is the standard way of creating macros which make exporting 
// from a DLL simpler. All files within this DLL are compiled with the DECOMPRESS_EXPORTS
// symbol defined on the command line. This symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see 
// DECOMPRESS_API functions as being imported from a DLL, whereas this DLL sees symbols
// defined with this macro as being exported.
#ifdef DECOMPRESS_EXPORTS
#define DECOMPRESS_API __declspec(dllexport)
#else
#define DECOMPRESS_API __declspec(dllimport)
#endif

//
// Enums
//
typedef enum { SUCCESS = 0x0,
               FILEOPEN_ERROR = 0x1,
               NO_MEMORY = 0x2,
               BUSY = 0x3,
               DATA_CORRUPT = 0x4
             } DecompressRetCode;

///////////////////////////////////////////////////////////////////////////////
///
//  Function: Decompress
///
/// @brief Decompresses the given compressed raw data file and generates
///        decompressed WAV file.
///
/// @param *pInputFile       Input file path.
/// @param *pOutputFile      Output file path.
/// @param sampleRate        Sample rate of the captured stream.
/// @param bitDepth          Bit depth of the captured stream.
/// @param channels          Number of channels.
///
/// @retval FILEOPEN_ERROR   Couldn't open files.
/// @retval ENOMEM           Couldn't allocate memory.
/// @retval EBUSY            Data can't be taken denotes busy.
/// @retval SUCCESS          Success.
///
///////////////////////////////////////////////////////////////////////////////
DECOMPRESS_API DecompressRetCode Decompress( char *pInputFile,
                                             char *pOutputFile,
                                             unsigned int sampleRate,
                                             unsigned char bitDepth,
                                             short channels
                                           );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: Add_Wave_Header
///
/// @brief Adds WAVE header at the begining of the PCM file.
///
/// @param *pOutputFileHandle  Output file path.
/// @param sampleRate          Sampling rate.
/// @param bitDepth            Number of bits to represent each PCM sample.
/// @param channels            Number of channels.
///
/// @retval none.
///
///////////////////////////////////////////////////////////////////////////////
void Add_Wave_Header( FILE *pOutputFileHandle,
                      unsigned int sampleRate,
                      unsigned char bitDepth,
                      short channels
                    );

#endif
