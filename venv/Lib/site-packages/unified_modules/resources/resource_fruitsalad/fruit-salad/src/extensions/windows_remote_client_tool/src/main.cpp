///////////////////////////////////////////////////////////////////////////////
///
/// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
///
/// This software as well as any related documentation is furnished under 
/// license and may only be used or copied in accordance with the terms of the 
/// license. The information in this file is furnished for informational use 
/// only, is subject to change without notice, and should not be construed as 
/// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
/// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
/// that may appear in this document or any software that may be provided in
/// association with this document. 
///
/// Except as permitted by such license, no part of this document may be 
/// reproduced, stored in a retrieval system, or transmitted in any form or by 
/// any means without the express written consent of Cirrus Logic International
/// (UK) Ltd or affiliated companies. 
///
/// @file main.cpp
/// @brief  Entry point for utility to execute Fruit Salad client code for windows.
///
/// @version \$Id: main.cpp 658 2015-01-06 15:09:00Z emmas $
///
/// @warning
///    This software is specifically written for Cirrus Logic devices.
///    It may not be used with other devices.
///
///////////////////////////////////////////////////////////////////////////////

//
// Include
//
#include "stdafx.h"
#include "functions.h"
#include "bindings.h"

// Global to store the name of this utility in at run-time for use with PrintUsage.
char *programName;

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PrintUsage
///
/// @brief Prints the usage information for the program to standard out.
///
///////////////////////////////////////////////////////////////////////////////
void PrintUsage()
{
    std::cout << "Usage: " << programName << " <Function Name> <Argument 1> <Argument 2> ... <Argument N>\n";
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CreateArgumentsList
///
/// @brief Create an arguments list (vector<string>) from a C-Array of C-Strings.
///
/// @param argc The number of arguments in argv
/// @param argv The arguments as a C-Array
///
/// @return The arguments list initialised by the original array.
///
///////////////////////////////////////////////////////////////////////////////
Functions::Arguments CreateArgumentsList( int argc, char **argv )
{
    Functions::Arguments returnVal;
    for( int i=0; i < argc; ++i )
    {
        string argument = string( argv[i] );
        returnVal.push_back( argument );
    }
    return returnVal;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: main
///
/// @brief Execute a function encapsulated by this utility with arguments.
///
/// Executes a function specified by name contained within argv[1] and passes
/// the remaining argument list to that function (after performing appropriate
/// type conversion).
///
/// This is meant to provide an interface for executing client-code from DLLs
/// using a FruitSalad over SSH.
///
/// @param argc     The length of array argv.
/// @param argv     A list of strings providing to the program's argument list.
///
/// @return The return value of the function called, or -1 if the function name
///         does not match an available function.
///
///////////////////////////////////////////////////////////////////////////////
int main( int argc, char** argv )
{
    programName = argv[0];
    int returnVal = -1;
    string functionName;
	Functions::Arguments arguments;

    Initialize();

    if ( argc < 2 )
    {
        std::cout << "Function name missing.\n";
        PrintUsage();
        goto done;
    }
    if ( string("--help") == string(argv[1]) ) {
        PrintUsage();
        goto done;
    }

	LoadBindings();

    arguments = CreateArgumentsList( argc-2, argv+2 );
    functionName = argv[1];

	returnVal = Functions::GetGlobal()->CallFunction( functionName, arguments );

done:
    CleanUp();
    std::cout << "Program exited with status " << returnVal << "\n";
    return returnVal;

}

///////////////////////////////// END OF FILE /////////////////////////////////
