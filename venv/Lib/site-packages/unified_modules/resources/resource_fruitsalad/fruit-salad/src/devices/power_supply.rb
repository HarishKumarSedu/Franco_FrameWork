# encoding: utf-8
################################################################################
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   power_supply.rb
### @brief  This file contains Methods to control the 1688b DC power supply.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# Install USB driver required for 1688b dc power supply.
# Com port 3 is hard coded in dc_power1688b.ttl. if your machine alloted some
# other com port then change it in dc_power1688b.ttl under fruit-salad\bin\
# teraterm

require_relative '../logfw'

################################################################################
# @function set_voltage_1688b
#
# Set output voltage of DC power supply.
#
# @param [float]  voltage is argument to set voltage. voltage range is 1 to 18
#                 and it takes decimal till 1 place.
#
# @return [Bool] True if it set voltage successfully.
#
################################################################################
def set_voltage_1688b( voltage )
    path_ttpmacro = File.expand_path(File.dirname(__FILE__) +
                                     './../../bin/teraterm/ttpmacro.exe')
    voltage = (voltage*10).to_i
    voltage = voltage.to_s
    if(voltage.size == 2)
        voltage=voltage.insert(0,'0')
    end
    system(path_ttpmacro,
           '/V',
           'dc_power1688b.ttl',
           "VOLT#{voltage}")
    return true
end

################################################################################
# @function set_current_1688b
#
# Set output current of DC power supply.
#
# @param [float] current is argument to set current. Current range is 0 to 20
#                and it takes decimal till 1 place.
#
# @return [Bool] True if it set current successfully.
#
################################################################################
def set_current_1688b( current )
    path_ttpmacro = File.expand_path(File.dirname(__FILE__) +
                                     './../../bin/teraterm/ttpmacro.exe')
    current = (current*10).to_i
    current = current.to_s
    if(current.size == 2)
        current = current.insert(0,'0')
    end
    system(path_ttpmacro,
           '/V',
           'dc_power1688b.ttl',
           "CURR#{current}")
    return true
end

################################################################################
# @function set_specific_voltage_and_current_1688b
#
# Set voltage and current.
#
# @param [float] voltage is argument to set voltage. voltage range is 1 to 18
#                and it takes decimal till 1 place.
#
# @param [float] current is argument to set current. Current range is 0 to 20
#                and it takes decimal till 1 place.
#
# @return [Bool] True if it set current and voltage successfully.
#
################################################################################
def set_specific_voltage_and_current_1688b( voltage, current )
    set_voltage_1688b( voltage )
    set_current_1688b( current )
    return true
end

################################################################################
# @function set_variable_voltage_1688b
#
# Takes initial voltage and final voltage, decrease or increase voltage as
# per step size and time delay,also set constant current for whole cycle.
#
# @param [float]  initial_voltage Is intial voltage for variable voltage cycle.
#                 initial_voltage range is 1 to 18 and it takes decimal till 1
#                 place.
#
# @param [float]  final_voltage Is final voltage for variable voltage cycle.
#                 final_voltage range is 1 to 18 and it takes decimal till 1
#                 place.
#
# @param [float]  step_size Is step size for variable voltage cycle.Take its
#                 value only till 1 decimal place.
#
# @param [float]  step_duration is the duration for which a perticular output
#                 voltage remain in output pin of dc power supply.
#                 step_duration is in seconds, you can set it as you want.
#
# @param [float]  const_current_value Is current that will remain constant for
#                 whole variable voltage cycle. const_current_value range is
#                 0 to 20 and it takes decimal till 1 place.
#
# @return [Bool] True if it runs whole voltage cycle successfully.
#
################################################################################
def set_variable_voltage_1688b( initial_voltage,
                          final_voltage,
                          step_size,
                          step_duration,
                          const_current_value )
    set_current_1688b( const_current_value )
    if(initial_voltage == final_voltage)
       $LOG.info 'error:Initial voltage and final voltage should not be same'
       return
    end
    if(initial_voltage < final_voltage)
        while(initial_voltage <= final_voltage)
            set_voltage_1688b( initial_voltage )
            sleep( step_duration )
            initial_voltage = initial_voltage + step_size
        end
    else
        while(initial_voltage >= final_voltage)
            set_voltage_1688b( initial_voltage )
            sleep( step_duration )
            initial_voltage = initial_voltage - step_size
        end
    end
    return true
end