###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   WindowsSalad.rb
### @brief  Basic implementation of fruit salad for debugging on windows.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

#
# Includes
#
require "fruitsalad_base"
require "device_factory"
require "dummy_analyzer"
require "fileutils"
require "tone_generator"
require "wavefile_analyzer"
require "portaudio_client"
require "win_driver_test_api"
require "fruitsalad_utils"
require 'installers'
require 'windows_jack_control'

#################################################################################
#
# Basic implementation of Fruit Salad intended for debugging features without
# hardware i.e. features dependent on actual recording e.g. filter response.
# For working with hardware, please use the WISCE(tm) target.
#
#################################################################################
module FruitSalad
    extend WavefileAnalyzer
    extend FruitSaladDeviceFactory
    extend ToneGenerator

    #############################################################################
    #
    # Device Specialisation
    #
    #############################################################################
    class WindowsSalad < FruitSaladBase::DeviceInterface
        include LocalWinDriverTestAPI
        include WindowsJackControl

        # The sample rate to request for both playback and record.
        SampleRate = Conf.property( :SampleRate, nil )

        # The number of audio channels to open for playback.
        PlaybackChannels = Conf.property( :Playback_Channels, 2 )

        # The number of audio channels to open for recording.
        RecordingChannels = Conf.property( :Recording_Channels, 2 )

        def initialize
            @default_usecases = []
            @wmctl = LocalJackControl.new
        end

        #######################################################################
        #
        # Set-up specific to this test-target that needs to be performed before
        # each Scenario.
        #
        #######################################################################
        def per_device_setup
            PortaudioClient::terminate()
            return
        end

        #######################################################################
        #
        # Use portaudio to record the output from the system's default
        # audio microphone.
        #
        #######################################################################
        def record_output()
            @defer_recording = Proc.new {
                @output = "tmpfile_WindowsSaladRecording.wav"
                PortaudioClient::start()
                PortaudioClient::start_recording( RecordingChannels,
                                                  SampleRate,
                                                  @output )
            }
        end

        #######################################################################
        #
        # @function playback
        #
        # Begin playing the named file using the system's default audio speaker.
        #
        # @param [String] file    The name of the file to play.
        # @param [Hash]   opts    Optional playback arguments. This platform
        #                         supports: [String] program - the name of a
        #                         playback program to use.
        # @option opts [Integer] :channel  Optional playback argument. Default
        #                                  channels are PlaybackChannels given
        #                                  in config.
        #
        #######################################################################
        def playback( file, opts = {} )
            supported_opts = [:program,:channels]
            validate_options( opts.keys, supported_opts, 'WindowsSalad: (playback)' )

            program = opts[:program]
            channels = opts[:channels]
            # Synchronize playback and record starts.
            @defer_recording.call if @defer_recording
            @playback_history << file

            if channels.nil?
                channels = PlaybackChannels
            end
            # Use portaudio as a default if no other program has been requested.
            if program.nil? or 'portaudio' == program
            PortaudioClient::start()
            PortaudioClient::start_playback( channels,
                                             SampleRate,
                                             file
                                           )
            PortaudioClient::wait_for_notification
            PortaudioClient::StopPlayback()
            else
                duration = FruitSalad::track_length( file ) * 1000
                third_party_playback( program, file, duration )
            end
        end

        #######################################################################
        #
        # Terminate any ongoing recording.
        #
        #######################################################################
        def end_capture
            PortaudioClient::StopRecording()
            PortaudioClient::terminate()
        end

        #######################################################################
        #
        # Wake the device, hopefuly triggering a transition to power state D0.
        #
        #######################################################################
        def wake
            PortaudioClient::start()
            PortaudioClient::terminate()
        end
    end

end

# Configure the Device Factory to use our specialised device.
FruitSalad.type = FruitSalad::WindowsSalad

################################# END OF FILE #################################