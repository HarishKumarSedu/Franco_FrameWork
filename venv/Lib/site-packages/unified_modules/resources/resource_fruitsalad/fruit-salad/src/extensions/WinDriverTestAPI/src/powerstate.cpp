///////////////////////////////////////////////////////////////////////////////
///
///Copyright (c) 2014 Wolfson Microelectronics plc.  All rights reserved.
///
/// This software as well as any related documentation is furnished under 
/// license and may only be used or copied in accordance with the terms of the 
/// license. The information in this file is furnished for informational use 
/// only, is subject to change without notice, and should not be construed as 
/// a commitment by Wolfson Microelectronics plc. Wolfson Microelectronics plc
/// assumes no responsibility or liability for any errors or inaccuracies that
/// may appear in this document or any software that may be provided in
/// association with this document. 
///
/// Except as permitted by such license, no part of this document may be 
/// reproduced, stored in a retrieval system, or transmitted in any form or by 
/// any means without the express written consent of Wolfson Microelectronics plc. 
///
/// @file   powerstate.cpp
/// @brief  Functions which obtain the codec device power state in Windows.
///
/// @version \$Id: powerstate.cpp 439 2014-11-18 11:54:15Z emmas $
///
/// Warning
///   This software is specifically written for Wolfson devices. It may not be
///   used with other devices.
///
///////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "stdafx.h"

// Magic number which identifies our hardware.
#define STATIC_KS_WOLFSON_AUDIO 0xDCB17899L, 0xFB35, 0x4FC8, 0xA9, 0x84, 0x05, 0x22, 0xBC, 0xCA, 0x74, 0xF8

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CodecDevicePowerState
///
/// @brief Obtain the current power state for the codec device.
///
/// @param aState A pointer to a buffer in memory where the power state will be
///               written to.
///
/// @return True on success, False on failure.
///
///////////////////////////////////////////////////////////////////////////////
DLL BOOL CodecDevicePowerState( PDEVICE_POWER_STATE aState )
{
    CONST GUID                  wolfsonDeviceInterface = { STATIC_KS_WOLFSON_AUDIO };
    CONST GUID*                 uid = &wolfsonDeviceInterface;
    HDEVINFO                    deviceInfo;                // handle for Device Info
    ULONG                       index;                      // general index
    ULONG                       size;                       // general size
    ULONG                       status;                     // general status
    SP_DEVINFO_DATA             deviceInfoData[1];
    SP_DEVICE_INTERFACE_DATA    deviceInterfaceData[1];
    TCHAR                       codecMaker[256];           // CODEC Maker
    TCHAR                       codecDescription[256];     // CODEC Description
    BOOL                        returnValue = FALSE;

    deviceInfo = SetupDiGetClassDevs( uid,
                                      NULL,
                                      NULL,
                                      DIGCF_DEVICEINTERFACE | DIGCF_PRESENT
                                     );
    if ( INVALID_HANDLE_VALUE == deviceInfo )
    {
        goto done;
    }

    MEM_CLEAR( deviceInfoData );
    MEM_CLEAR( deviceInterfaceData );
    deviceInfoData->cbSize = sizeof( *deviceInfoData );
    deviceInterfaceData->cbSize = sizeof( *deviceInterfaceData );

    for ( status = index = 0; SetupDiEnumDeviceInfo( deviceInfo, index, deviceInfoData ); index++ )
    {
        // get the Manufacturer
        if ( ( SetupDiGetDeviceRegistryProperty( deviceInfo,                
                                                 deviceInfoData,
                                                 SPDRP_MFG,
                                                 NULL,
                                                 (BYTE*)codecMaker,
                                                 sizeof( codecMaker ),
                                                 &size 
                                               ) 
              ) &&
               // get the Description
               ( SetupDiGetDeviceRegistryProperty( deviceInfo,                
                                                   deviceInfoData,
                                                   SPDRP_DEVICEDESC,
                                                   NULL,
                                                   (BYTE*)codecDescription,
                                                   sizeof( codecDescription ),
                                                   &size 
                                                 ) 
               ) 
            )
        {
            status = !_tcsnicmp( codecMaker, TEXT( "Wolfson" ), 7 );
            
            // If we have a Wolfson device, use it.
            if ( status )
            {
                break;
            }
        }
    }

    // Did we find a Wolfson device?
    if ( !status )
    {
        // No - cleanup and return failure.
        goto cleanup;
    }

    // Do we have the interfaces?
    if ( !SetupDiEnumDeviceInterfaces( deviceInfo, 
                                       deviceInfoData, 
                                       uid, 
                                       0, 
                                       deviceInterfaceData 
                                     ) 
       )
    {
        // No - clean-up and return failure.
        goto cleanup;
    }

    CM_POWER_DATA powerData;
    
    if( !SetupDiGetDeviceRegistryProperty( deviceInfo,
                                           deviceInfoData,
                                           SPDRP_DEVICE_POWER_DATA,
                                           NULL,
                                           (BYTE*)&powerData,
                                           sizeof( powerData ),
                                           &size 
                                          ) 
      )
    {
        goto cleanup;
    }

    *aState = powerData.PD_MostRecentPowerState;
    returnValue = TRUE;
done:
    return returnValue;
cleanup:
    SetupDiDestroyDeviceInfoList( deviceInfo );
    goto done;
}

///////////////////////////////// END OF FILE /////////////////////////////////