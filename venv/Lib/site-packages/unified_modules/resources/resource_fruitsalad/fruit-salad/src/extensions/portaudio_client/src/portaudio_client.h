////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd. All rights reserved.
//
// This software as well as any related documentation is furnished under
// license and may only be used or copied in accordance with the terms of the
// license. The information in this file is furnished for informational use
// only, is subject to change without notice, and should not be construed as
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document.
//
// Except as permitted by such license, no part of this document may be
// reproduced, stored in a retrieval system, or transmitted in any form or by
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies.
//
/// @file   portaudio_client.h
/// @brief  Basic player/recorder facility for FruitSalad.
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
///////////////////////////////////////////////////////////////////////////////

//
// Defines
//
#ifndef PA_CLIENT_H
#define PA_CLIENT_H

//
// Includes
//
#include <portaudio/portaudio.h>
#include <sndfile/sndfile.h>
#include "portaudio_client_api.h"
#include <windows.h>

//
// PortaudioClient declaration
//

///////////////////////////////////////////////////////////////////////////////
///
/// Class: PortaudioClient
///
/// @brief Class definig a simple portaudio client.
///
/// @note A singleton portaudio client class. Wraps portaudio specific
///       functions and manages playback and recording.
///
///////////////////////////////////////////////////////////////////////////////
class PortaudioClient
{
public:
    static PortaudioClient& GetClient();

    PlayerStatus SetUp( int               bufferSize,
                        stateCallbackType stateCallback,
                        errorCallbackType errorCallback
                      );
    PlayerStatus StartPlaybackFromFile( int        playbackChannelCount,
                                        int        samplingRate,
                                        const char *pPath
                                      );
    PlayerStatus StartRecordingToFile( int         recordingChannelCount ,
                                       int         samplingRate,
                                       const char *pPath
                                     );
    PlayerStatus StopPlayback();
    PlayerStatus StopRecording();
    PlayerStatus Terminate();

    // file management methods
    SNDFILE* GetPlaybackFile();
    SNDFILE* GetRecordFile();
    const SF_INFO& GetPlaybackFileInfo();
    const SF_INFO& GetRecordFileInfo();
    PlayerStatus OpenPlaybackFile( const char *pPath );
    PlayerStatus OpenRecordFile( const char *pPath );
    PlayerStatus ClosePlaybackFile();
    PlayerStatus CloseRecordFile();

    // stream management methods
    PlayerStatus OpenStreamPlayback();
    PlayerStatus OpenStreamRecording();
    PlayerStatus CloseStreamPlayback();
    PlayerStatus CloseStreamRecording();
    PlayerStatus StartStreamPlayback();
    PlayerStatus StartStreamRecording();
    PlayerStatus StopStreamPlayback();
    PlayerStatus StopStreamRecording();

    bool IsClientState( const PlayerState clientState );


    // for docs see the callback declaration below
    friend int ProcessPlayback( const void                     *pInput,
                                void                           *pOutput,
                                unsigned long                  frameCount,
                                const PaStreamCallbackTimeInfo *pTimeInfo,
                                PaStreamCallbackFlags          statusFlags,
                                void                           *pUserData
                              );
    friend int ProcessRecording( const void                     *pInput,
                                 void                           *pOutput,
                                 unsigned long                  frameCount,
                                 const PaStreamCallbackTimeInfo *pTimeInfo,
                                 PaStreamCallbackFlags          statusFlags,
                                 void                           *pUserData
                               );

private:
    //
    // hide constructor, copy constructor, assignment operator and destructor
    //
    PortaudioClient();
    PortaudioClient( PortaudioClient const& );
    void operator=( PortaudioClient const& );
    ~PortaudioClient();

    void SetState( const PlayerState clientState );
    void UnsetState( const PlayerState clientState );
    void NotifyError( const PlayerStatus errorCode, const int libErrorCode );

    PlayerStatus OpenStreamSafePlayback( PaStreamParameters &outputParameters );
    PlayerStatus OpenStreamSafeRecording( PaStreamParameters &inputParameters );
    PlayerStatus PortaudioClient::IsPlaybackSupported( PaStreamParameters &outputParameters );
    PlayerStatus PortaudioClient::IsRecordingSupported( PaStreamParameters &outputParameters );

    HANDLE m_MutexRecordFile;
    HANDLE m_MutexPlayBackFile;
    PaStream *m_pStreamRecording, *m_pStreamPlayback;
    SF_INFO m_playbackFileInfo, m_recordFileInfo;
    SNDFILE *m_pPlaybackFile, *m_pRecordFile;
    int m_playbackChannelCount, m_recordChannelCount, m_sampleRatePlayback, m_sampleRateRecord;
    int m_bufferSize, m_clientState;
    stateCallbackType m_stateTransitionCallback;
    errorCallbackType m_errorNotificationCallback;
};

//
// Portaudio callback declarations
//

///////////////////////////////////////////////////////////////////////////////
///
//  Function: ProcessPlayback
///
/// @brief A portaudio callback.
///
/// @param pInput      Input buffer.
/// @param pOutput     Output buffer.
/// @param frameCount  Amount of frames in buffers.
/// @param pTimeInfo   Timestamps indicating the ADC capture time of the first
///                    sample in the input buffer, the DAC output time of the
///                    first sample in the output buffer and the time the
///                    callback was invoked.
/// @param statusFlags Flags indicating whether input and/or output buffers have
///                    been inserted or will be dropped to overcome underflow or
///                    overflow conditions.
/// @param pUserData   Pointer to data supplied when opening the stream (in
///                    this case pointer to a PortaudioClient instance).
///
/// @retval paContinue - indicates the stream should continue to be active.
/// @retval paComplete - indicates the stream should finish once the output
///                      buffer is empty.
/// @retval paAbort    - indicates the stream should finish as soon as possible
///
///////////////////////////////////////////////////////////////////////////////
int ProcessPlayback( const void                     *pInput,
                     void                           *pOutput,
                     unsigned long                  frameCount,
                     const PaStreamCallbackTimeInfo *pTimeInfo,
                     PaStreamCallbackFlags          statusFlags,
                     void                           *pUserData
                   );

///////////////////////////////////////////////////////////////////////////////
///
//  Function: ProcessRecording
///
/// @brief A portaudio callback.
///
/// @param pInput      Input buffer.
/// @param pOutput     Output buffer.
/// @param frameCount  Amount of frames in buffers.
/// @param pTimeInfo   Timestamps indicating the ADC capture time of the first
///                    sample in the input buffer, the DAC output time of the
///                    first sample in the output buffer and the time the
///                    callback was invoked.
/// @param statusFlags Flags indicating whether input and/or output buffers have
///                    been inserted or will be dropped to overcome underflow or
///                    overflow conditions.
/// @param pUserData   Pointer to data supplied when opening the stream (in
///                    this case pointer to a PortaudioClient instance).
///
/// @retval paContinue - indicates the stream should continue to be active.
/// @retval paComplete - indicates the stream should finish once the output
///                      buffer is empty.
/// @retval paAbort    - indicates the stream should finish as soon as possible.
///
///////////////////////////////////////////////////////////////////////////////
int ProcessRecording( const void                     *pInput,
                      void                           *pOutput,
                      unsigned long                  frameCount,
                      const PaStreamCallbackTimeInfo *pTimeInfo,
                      PaStreamCallbackFlags          statusFlags,
                      void                           *pUserData
                    );

#endif // PA_CLIENT_H
/////////////////////////////END OF FILE///////////////////////////////////////