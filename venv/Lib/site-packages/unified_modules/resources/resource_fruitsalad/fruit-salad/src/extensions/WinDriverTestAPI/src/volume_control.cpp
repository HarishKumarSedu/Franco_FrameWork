/*******************************************************************************
 *
 * Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
 *
 * This software as well as any related documentation is furnished under 
 * license and may only be used or copied in accordance with the terms of the 
 * license. The information in this file is furnished for informational use 
 * only, is subject to change without notice, and should not be construed as 
 * a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
 * (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
 * that may appear in this document or any software that may be provided in
 * association with this document. 
 *
 * Except as permitted by such license, no part of this document may be 
 * reproduced, stored in a retrieval system, or transmitted in any form or by 
 * any means without the express written consent of Cirrus Logic International
 * (UK) Ltd or affiliated companies. 
 *
 * @file   volume_control.cpp
 * @brief  Functions which manage the per-channel audio volume in Windows.
 *
 * @version \$Id: volume_control.cpp 939 2015-03-12 12:59:17Z aangus $
 *
 * @warning
 *     This software is specifically written for Cirrus Logic devices.
 *     It may not be used with other devices.
 *
 ******************************************************************************/
//
// Includes
//
#include "stdafx.h"
#include "WinDriverTestAPI.h"

//
// Using
//
using std::cerr;

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetDevice
///
/// @brief Utility function to obtain an interface for the default playback or
///        capture device (as configured on this system).
///
/// @param isPlayback If true, this method will return the playback device, else
///                   it will return the capture device.
///
/// @return The address of the device's WASAPI interface or null if an error
///         occurred.
///
///////////////////////////////////////////////////////////////////////////////
static IMMDevice* GetDevice( bool isPlayback ) 
{
    IMMDevice           *pDevice = NULL;
    EDataFlow           deviceType;
    HRESULT             result;

    // Do we want playback or capture?
    if ( isPlayback ) 
	{
        deviceType = eRender;
    } 
	else 
	{
        deviceType = eCapture;
    }
    
	if ( NULL == WinDriverTestAPI::pIMMDeviceEnumerator )
	{
		cerr << "ERROR: WinDriverTestAPI::GetDevice: Null pointer for device enumerator (pIMMDeviceEnumerator), has Initialize() been called?.\n";
		goto done;
	}

    // Get the actual device.
    result = WinDriverTestAPI::pIMMDeviceEnumerator->GetDefaultAudioEndpoint( deviceType,
                                                   eConsole,
                                                   &pDevice
                                                 );
    if ( S_OK != result ) 
    {
        goto failure;
    }
done:
    return pDevice;
failure:
    PrintError( L"WinDriverTestAPI::GetDevice", result );
    return pDevice;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetPlaybackDevice
///
/// @brief Return a pointer to the default playback device in Windows.
///
/// @return The address of the default playback device's interface or
///         null if an error occurred.
///
///////////////////////////////////////////////////////////////////////////////
DLL IMMDevice* GetPlaybackDevice()
{
    return GetDevice(true);
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetCaptureDevice
///
/// @brief Return a pointer to the default capture device in Windows.
///
/// @return The address of the default capture device's interface or null
///         if an error occurred.
///
///////////////////////////////////////////////////////////////////////////////
DLL IMMDevice* GetCaptureDevice()
{
    return GetDevice(false);
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: SetChannelVolume
///
/// @brief Set the per-channel volume for a specified playback or record
///        channel.
///
/// @param device   Pointer to the audio endpoint device to modify.
/// @param channel  Integer identifying which channel on that device to modify.
/// @param volume   The new volume level on the interval [0,1] where 0 is mute 
///                 and 1 is maximum volume.
///
/// @return true if no error occurs, else false.
///
///////////////////////////////////////////////////////////////////////////////
DLL bool SetChannelVolume( IMMDevice *device, UINT32 channel, const float volume )
{
    printf("SetChannelVolume: device = %p, channel = %u, volume = %f\n", device, channel, volume);

    // Get the endpoint volume control for the device.
    IAudioEndpointVolume* epVolume = NULL;
    HRESULT result = device->Activate( iidIAudioEndpointVolume, CLSCTX_ALL, NULL, (void**)&epVolume );
    if ( S_OK != result )
    {
        PrintError( L"IMMDevice::Activate", result );
        goto error;
    }

    // Set the channel volume for the device.
    result = epVolume->SetChannelVolumeLevelScalar( channel, volume, NULL );
    epVolume->Release();
    epVolume = NULL;
    if ( S_OK != result )
    {
        PrintError( L"IAudioEndpointVolume::SetChannelVolumeLevelScalar", result );
        goto error;
    }

	return true;
error:	
	return false;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetChannelCount
///
/// @brief Determine the number of channels this device supports.
///
/// @param device The device to inquire about.
///
/// @return The number of channels supported, or 0 if an error occurred.
///
///////////////////////////////////////////////////////////////////////////////
DLL UINT32 GetChannelCount( IMMDevice *device )
{
	UINT32 chCount = 0;

    // Get the endpoint volume control for the device.
    IAudioEndpointVolume* epVolume = NULL;
    HRESULT result = device->Activate( iidIAudioEndpointVolume, CLSCTX_ALL, 
		                               NULL, (void**)&epVolume 
									 );
    if ( S_OK != result )
    {
        PrintError( L"IMMDevice::Activate", result );
        goto done;
    }

    // Get the channel count.    
    result = epVolume->GetChannelCount( &chCount );
    epVolume->Release();
    epVolume = NULL;
    if ( S_OK != result )
    {
        PrintError( L"IAudioEndpointVolume::GetChannelCount", result );
        goto done;
    }
done:
    return chCount;
}

//////////////////////////// END OF FILE //////////////////////////////////////