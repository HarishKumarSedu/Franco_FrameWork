###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file virtual_room_steps.rb
### @brief cucumber steps definition for configuring the positional mixing of
###        a virtual room.
###
### @version \$Id: virtual_room_steps.rb 1027 2015-05-06 14:58:16Z emmas $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'virtual_room'

###############################################################################
#
# Cucumber helper which allows the World object to instantiate VirtualRoom for
# each scenario automatically.
#
###############################################################################
module VirtualRoomKnowledge

    ###########################################################################
    #
    # @function virtual_room
    #
    # Instantiate a VirtualRoom object as part of the scenario's state if one
    # has not already been instantiated, and return it.
    #
    # (no parameters)
    #
    # @return [VirtualRoom] VirtualRoom object used by the current scenario.
    #
    ###########################################################################
    def virtual_room
        @virtual_room ||= VirtualRoom.new
    end
end

World(VirtualRoomKnowledge)

###############################################################################
#
# @!method Given_I_am_in_room_with_audio_coming_from_coordinate
#
# Assign an input audio file to a point-source defined by the coordinate.
#
#       Usage:
#       Given I am in a room with "<wavfile>" coming from (<x>,<y>,<z>)
#       Given "<wavfile>" coming from (<x>,<y>,<z>)
#
# @example Given I am in a room with "resources/test.wav" coming from (0,0,0)
#          Given "resources/bluegeenie7.wav" coming from (50,50,50)
#
# @param wavfile    The audio file to play from this point-source. If a
#                   multichannel wav file it will be flattened by mixing all
#                   channels into a single mono channel.
# @param x          The x coordinate of the audio point-source given in
#                   millimetres of displacement from the y-z plane.
# @param y          The y coordinate of the audio point-source given in
#                   millimetres of displacement from the x-z plane.
# @param z          The z coordinate of the audio point-source given in
#                   millimetres of displacement from the x-y plane.
#
###############################################################################
Given( /^(?:I am in a room with )?a? ?"(.*)" coming from (#{Vector3}$)/ ) do |wavfile, coordinate|
    virtual_room.add_wavfile( *coordinate, wavfile )
end

###############################################################################
#
# @!method Given_microphones_at_positions
#
# Place a number of microphones within the virtual scene and play the resulting
# audio mix as input to the test device.
#
#       Usage:
#       Given microphones at:
#           | (<x>,<y>,<z>) |
#
# @example Given microphones at:
# @example      | (0,0,0) |
# @example      | (10,0,0) |
# @example      | (-20,17,33) |
#
# @param x      The x-coordinate of the microphone given in millimetres of
#               displacement from the y-z plane.
# @param y      The y-coordinate of the microphone given in millimetres of
#               displacement from the x-z plane.
# @param z      The z-coordinate of the microphone given in millimetres of
#               displacement from the x-y plane.
#
###############################################################################
Given( /^microphones at:$/ ) do |table|
    table.raw.each do |row|
        coordinates = Vector3.invoke row[0]
        virtual_room.add_microphone( *coordinates )
    end
end

###############################################################################
#
# @!method Given_I_am_in_a_room_with_a_sine_coming_from_coordinates
#
# Place a point audio source playing a sine-wave within the virtual room.
#
#       Usage:
#       Given I am in a room with a <frequency> sine coming from (<x>,<y>,<z>)
#       Given <frequency> sine coming from (<x>,<y>,<z>)
#
# @example Given I am in a room with a 1000 Hz sine coming from (0,0,0)
# @example Given I am in a room with a 10 kHz sine coming from (-20,7,3)
# @example Given 440 Hz sine coming from (-1e3,2e3,500)
#
# @param frequency  The frequency of the wave to generate
# @param x          The x-coordinate of the audio source given in millimetres
#                   of displacement from the y-z plane.
# @param y          The y-coordinate of the audio source given in millimetres
#                   of displacement from the x-z plane.
# @param z          The z-coordinate of the audio source given in millimetres
#                   of displacement from the x-y plane.
#
###############################################################################
Given( /^(?:I am in a room with )?a? ?(#{Frequency}) sine coming from (#{Vector3})$/ ) do |frequency, coordinates|
    virtual_room.add_sine( *coordinates, frequency )
end

###############################################################################
#
# @!method Given_I_am_in_a_room_with_noise_coming_from_coordinates
#
# Place a point noise source within the virtual room. The noise source will
# use either the currently configured Noise Environment, or MLS white noise if
# no Noise Environment is configured.
#
#       Usage:
#       Given I am in a room with a <amplitude> dBFS noise coming from (<x>,<y>,<z>)
#       Given <amplitude> dBFS noise coming from (<x>,<y>,<z>)
#
# @example Given I am in a room with -30 dBFS noise coming from (0,0,0)
# @example Given I am in a room with -1 dBFS noise coming from (1e3,0,0)
# @example Given -7 dBFS noise coming from (500,500,0)
#
# @param amplitude      The amplitude of the noise source in units decibels fullscale
# @param x              The x-coordinate of the noise source in units millimetres
#                       displacement from the y-z plane.
# @param y              The y-coordinate of the noise source in units millimetres
#                       displacement from the x-z plane.
# @param z              The z-coordinate of the noise source in units millimetres
#                       displacement from the x-y plane.
#
###############################################################################
Given( /^(?:I am in a room with )?a? ?(#{Number}) dBFS noise coming from (#{Vector3})$/ ) do |amplitude, coordinates|
    noise_model = FruitSalad::get_device.simulated_noise_model
    virtual_room.add_noise( *coordinates, noise_model, amplitude )
end

###############################################################################
#
# @!method When_I_play_the_virtual_room_for_duration
#
# Calculate the microphone tracks for the current virtual room set up and
# play back to the test target. If this command does not have a duration
# parameter the duration of the longest wavfile source will be used, or 30 seconds
# if there is no wavfile source.
#
#   Usage:
#   When I play the virtual room
#   When I play the virtual room for <duration> seconds
#
# @example When I play the virtual room for 7 seconds
# @example When I play the virtual room
#
# @param duration   The optional duration argument which overrides any attempt
#                   to autodetect a sensible duration from the wavfile sources
#                   present in the scene.
#
###############################################################################
When( /^I play the virtual room(?: for (#{Number}) seconds)?$/ ) do |duration|
    device = FruitSalad.get_device
    virtual_room.play_scene( device, duration )
end

###################################### END OF FILE ############################