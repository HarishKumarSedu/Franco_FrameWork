################################################################################
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   pops_detection.rb
### @brief  Wrapper for native object-code implementation of pops detection.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

require 'ffi'
require 'logfw'

###############################################################################
#
# Wrapper for shared library object that detects pops in file
#
###############################################################################
module NativePopsDetection
    extend FFI::Library
    # Name of the shared library
    ffi_lib 'pops_clicks_detection'

    ###########################################################################
    # Enums
    ###########################################################################

    ###########################################################################
    #
    # Enum of possible pops detection return codes.
    #
    ###########################################################################
    enum :PopsRetCode, [ :FILEOPEN_ERROR,  -1,
                         :NO_POPS,          0,
                         :POPS_DETECTED,    1,
                         :NO_MEMORY,        2
                       ]

    ###########################################################################
    #
    # @function pops_clicks_detection
    #
    # Calls pops detection native code which detects if there is pop in file
    #
    # @param [pointer] input_file  File path with in which we detect pops.
    #
    # @return [Enum] Returns pops return codes.
    #
    # @raise [RunTimeError] If file is not found.
    #
    ###########################################################################
    def self.pops_clicks_detection( input_file )
        time_ptr = FFI::MemoryPointer.new( :float, 1024 )
        pop_count = FFI::MemoryPointer.new( :int, 1 )
        return_value = PopsClicksDetection( input_file,
                                            time_ptr,
                                            1024,
                                            pop_count
                                          )

        if( :FILEOPEN_ERROR == return_value )
            raise 'file open error in pops detection'
        end
        if( :NO_MEMORY == return_value )
            raise 'Memory allocation error'
        end
        if( :POPS_DETECTED == return_value )
            # Reading point of time at which pops detected.
            count = pop_count.read_array_of_int( 1 )
            $LOG.info "Number of pops detected is #{count[0]}"

            time = time_ptr.read_array_of_float( Integer(count[0]) )
            time.each do |element|
                $LOG.info "Pop detected at #{element.round(6)} seconds"
            end
        end
        if( :NO_POPS == return_value )
            $LOG.info "There are no pops in the stream"
        end
        return return_value
    end

    ###########################################################################
    #
    # Invokes the object code to perform pops and clicks detection.
    #
    ###########################################################################
    attach_function :PopsClicksDetection, [ :pointer, :pointer, :int, :pointer ], :PopsRetCode
end

################################# END OF FILE #################################