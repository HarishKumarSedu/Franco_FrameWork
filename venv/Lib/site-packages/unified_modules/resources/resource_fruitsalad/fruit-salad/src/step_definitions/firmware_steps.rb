###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file firmware_steps.rb
### @brief Step-definitions for the loading of DSP firmware.
###
### @warning
###     This software is specifically written for Cirrus Logic devices.
###     It may not be used with other devices.
###
###############################################################################

require 'configuration'
require 'logfw'

###############################################################################
#
# @!method Given_I_have_firmware
#
# Verify that a particular firmware resource is available on the target device.
# If the firmware is not present, but a DSP core has been specified an attempt will be made to
# load it onto the core.
#
# Adding "running" prior to the DSP specifier will ensure that the core has been started.
#
#       Usage:
#       Given I have "<algo_name>" on <dsp_core>
#       Given I have "<algo_name>" running on <dsp_core>
#       Given I have "<algo_name>" revision <revision> on <dsp_core>
#       Given I have "<algo_name>" revision <revision> running on <dsp_core>
#
# @param algo_name The name of the firmware that should be present on the device.
# @param revision  The revision of the firmware that should be present (optional).
# @param dsp_core  The name of the DSP core on which the firmware should be present (optional).
#
# @example Given I have "Ez2 Control" on DSP3
# @example Given I have "Ez2 Control" running on DSP3
# @example Given I have "Ez2 Control" revision 0.16.0 on DSP2
# @example Given I have "Ez2 Control" running
#
# @raise [RunTimeError] If the DSP identifier is not of the form DSP<number>.
# @raise [RunTimeError] If the algorithm name is not recognised by FruitSalad.
# @raise [RunTimeError] If dsp_core is neither an integer or of the form /DSP\d+/.
#
###############################################################################
Given( /^I have "(.*)"(?: revision (#{REVISION_STR}))?( running)?(?: on (\w+))?$/ ) do |algo_name, revision, running, dsp_identifier_string|
    device = FruitSalad::get_device()

    # Should we run the firmware?
    autorun = !running.nil?

    begin
        case algo_name
        when device.soundclear_control.class::AlgorithmName
             if dsp_identifier_string.nil?
                 firmware_data = Conf::get_firmware_data( device.device_id,
                                                          device.hw_revision,
                                                          algo_name,
                                                          revision
                                                        )
                 dsp_core = firmware_data.fetch( 'core', nil )
                 dsp_index = device.extract_dsp_index( dsp_core )
                 #Call to check_core_within_range commented out temporarily
                 #as the function is not in targets other than WISCE
                 #device.check_core_within_range( dsp_index )
             else
                 # Convert the DSP identifier to a number.
                 dsp_index = device.extract_dsp_index( dsp_identifier_string )
            end
            device.soundclear_control.load( dsp_index,
                                            autostart:autorun,
                                            firmware_revision:revision
                                          )
        when device.trace.class::AlgorithmName
            if dsp_identifier_string.nil?
                 firmware_data = Conf::get_firmware_data( device.device_id,
                                                          device.hw_revision,
                                                          algo_name,
                                                          revision
                                                        )
                 dsp_core = firmware_data.fetch( 'core', nil )
                 dsp_index = device.extract_dsp_index( dsp_core )
            else
                 # Convert the DSP identifier to a number.
                 dsp_index = device.extract_dsp_index( dsp_identifier_string )
            end
            device.trace.load( dsp_index,
                               autostart:autorun,
                               firmware_revision:revision
                             )
        when device.pass_through.class::AlgorithmName
            device.pass_through.load( dsp_index, autostart:autorun )
        else
            raise Cucumber::Pending, "Algorithm #{algo_name} is not yet"\
                                     " supported."
        end
    rescue NameError => e
        $LOG.info "Firmware test components not initialised."
        $LOG.debug e
        raise Cucumber::Pending
    rescue RuntimeError => e
        # check for a specific message so not all RuntimeErrors are changed
        # to Pending.
        unless FirmwareInterface::LoadingUnsuccessfulMessage == e.to_s
            raise e
        end
        $LOG.debug e
        raise Cucumber::Pending
    end
end

###############################################################################
#
# @!method Given_I_start_the_firmware
#
#       Usage:
#       Given I start the "<algo_name>"
#
# @param algo_name The name of the firmware that should be present on the device.
#
# @example Given I start the "Ez2 Control".
#
# @raise [RunTimeError] If the algorithm name is not recognised by FruitSalad.
#
###############################################################################
Given( /^I start the "(.*)"$/ ) do | algo_name |
    device = FruitSalad::get_device()
    begin
        case algo_name
            when device.soundclear_control.class::AlgorithmName
                device.soundclear_control.start()
            when device.trace.class::AlgorithmName
                device.trace.start()
            else
                raise Cucumber::Pending, "Algorithm #{algo_name} is not yet"\
                                         " supported."
            end
    end
end

#################################### end ########################################