////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   WinDriverTestAPI.h
/// @brief  Macro for specifying that a function is to be exported as part of the DLL publicly.
///
/// @version \$Id: WinDriverTestAPI.h 939 2015-03-12 12:59:17Z aangus $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////
#pragma once
///////////////////////////////////////////////////////////////////////////////
// The following ifdef block is the standard way of creating macros which make exporting 
// from a DLL simpler. All files within this DLL are compiled with the WINDRIVERTESTAPI_EXPORTS
// symbol defined on the command line. This symbol should not be defined on any project
// that uses this DLL. This way any other project whose source files include this file see 
// WINDRIVERTESTAPI_API functions as being imported from a DLL, whereas this DLL sees symbols
// defined with this macro as being exported.
///////////////////////////////////////////////////////////////////////////////
#ifdef WINDRIVERTESTAPI_EXPORTS
#define DLL extern "C" __declspec(dllexport)
#else
#define DLL extern "C" __declspec(dllimport)
#endif

//
// Includes
//
#include <Audioclient.h>
#include <Mmdeviceapi.h>
#include <Endpointvolume.h>

//
// Constants
//
const CLSID clsidMMDeviceEnumerator = __uuidof(MMDeviceEnumerator);
const IID   iidIMMDeviceEnumerator  = __uuidof(IMMDeviceEnumerator);
const IID   iidIAudioClient         = __uuidof(IAudioClient);
const IID   iidIChannelAudioVolume  = __uuidof(IChannelAudioVolume);
const IID   iidIAudioEndpointVolume = __uuidof(IAudioEndpointVolume);

//
// Global Variables
//
namespace WinDriverTestAPI
{
	extern IMMDeviceEnumerator *pIMMDeviceEnumerator;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PrintError
///
/// @brief Logging function which takes a COM HRESULT error code and prints a
///        formatted error message to the console.
///
/// @param where        A string indicating where this error has occurred i.e. the
///                     method name.
/// @param error_code   The HRESULT error code to translate and print.
///
///////////////////////////////////////////////////////////////////////////////
void PrintError( TCHAR* where, HRESULT error_code );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PrintLastError
///
/// @brief Wrapper which uses GetLastError and HRESULT_FROM_WIN32 to obtain the
///        appropriate HRESULT automatically.
///
/// @param where    A string indicating where this error has occurred.
///
///////////////////////////////////////////////////////////////////////////////
void PrintLastError( TCHAR* where );

///////////////////////////////////////////////////////////////////////////////
///
/// Function: CodecDevicePowerState
///
/// @brief Obtain the current power state for the codec device.
///
/// @file  powerstate.cpp
///
/// @param aState A pointer to a buffer in memory where the power state will be
///               written to.
///
/// @return True on success, False on failure.
///
///////////////////////////////////////////////////////////////////////////////
DLL BOOL CodecDevicePowerState( PDEVICE_POWER_STATE aState );

///////////////////////////////////////////////////////////////////////////////
//
// Function: CheckError
//
// @brief Checks a HRESULT value for an error and if one occured prints the
//        corresponding error message.
//
// @param where   A wide string indicating where the error occured for logging
// @param hresult The hresult to check.
//
// @return true if no error occured, else false
//
///////////////////////////////////////////////////////////////////////////////
bool CheckError( TCHAR* where, HRESULT hresult );

//////////////////////////// END OF FILE //////////////////////////////////////