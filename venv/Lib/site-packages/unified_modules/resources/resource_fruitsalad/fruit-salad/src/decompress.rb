# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   decompress.rb
### @brief  Wrapper for native object-code implementation of decompression.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

require 'ffi'

###############################################################################
#
# Wrapper for shared library object that decompresses the compressed data.
#
###############################################################################
module NativeDecompress
    extend FFI::Library
    # Name of the shared library
    ffi_lib 'Decompress'

    ###########################################################################
    #
    # Enum of decompression exit codes.
    #
    ###########################################################################
    enum :ExitCode, [ :success,        0x0,
                      :fileopen_error, 0x1,
                      :no_memory,      0x2,
                      :busy,           0x3,
                      :data_corrupt,   0x4
                    ]

    ###########################################################################
    #
    # Calls Native decompression code and acts as a interface between host
    # buffer read and actual decompression code.
    #
    # @param [String]  input_file  Name of the compressed data file.
    #
    # @param [String]  output_file Name of the decompressed data file.
    #
    # @param [Integer] sample_rate Sample rate of the data read from the host.
    #
    # @param [Integer] bit_depth   Bitdepth of the data read from the host.
    #
    # @param [Integer] channels    Number of channels of the data read from
    #                              the host.
    #
    # @return [none] Returns none.
    #
    # @raise [RunTimeError] Raises exception, when decompression DLL wrapper
    #                       errors occurred.
    #
    ###########################################################################
    def self.do_decompress( input_file,
                            output_file,
                            sample_rate,
                            bit_depth,
                            channels
                          )

        # Calls decompression native code and performs decompression on the
        # compressed input file and gets the decompressed output file
        exit_code = NativeDecompress::Decompress( input_file,
                                                  output_file,
                                                  sample_rate,
                                                  bit_depth,
                                                  channels
                                                )

        case exit_code
            when :success
            when :fileopen_error
                raise "decompress: Error occurred during file open : " \
                      "#{exit_code}"
            when :no_memory
                raise "decompress: Error occurred during memory allocation : " \
                      "#{exit_code}"
            when :busy
                raise "decompress: Busy error occurred during unshortening " \
                      "input data : #{exit_code}"
            when :data_corrupt
                raise "decompress: Data corrupted error occurred during " \
                      "unshortening input data : #{exit_code}"
            else
                raise "decompress: unknown error returned  : #{exit_code}"
        end

        return
    end

    ###########################################################################
    #
    # Invokes the native object code to perform decompression on the input data.
    #
    ###########################################################################
    attach_function :Decompress, [:pointer, :pointer, :uint32, :uint8, :int16], :ExitCode

end

################################# END OF FILE #################################