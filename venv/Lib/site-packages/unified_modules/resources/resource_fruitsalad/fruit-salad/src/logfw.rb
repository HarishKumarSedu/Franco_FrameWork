###############################################################################
###
### Copyright (c) 2015-2016 Cirrus Logic International (UK) Ltd.
### All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   logfw.rb
### @brief  Logging feature support added at framework level. This basically
###         logs all messages based on log level that reads from config and
###         logs in defined format. You can specify the logs dir, log level
###         and aging fields from config file. If you don'y specify in config
###         file it will take default values.
###
### @usage  Each test script should require this file and after they can use
###         $LOG.debug(string), $LOG.Info('string'), $LOG.warn('string'),
###         $LOG.error('string'), $LOG.fatal('string'),$LOG.unknown('string').
###         Additionally $LOG.time "",$LOG.print('string') are added.
###         $LOG.time "" Prints only the TimeStamp.
###         $LOG.print("string") Prints only the message.
###         And in config file they should have the field 'LogLevel' and it
###         accepts 0,1,2,3,4,5 values. If the above field is not there in
###         config, by default it treats 0.
###         Only For LogLevel 0,1 $LOG.time "",$LOG.print('string') are printed.
###         0 - Debug, 1 - Info, 2 - Warn, 3 - Error, 4 - Fatal, 5 - Unknown
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'logger'
require 'fruitsalad_env_setup.rb'
require 'configuration'
require 'fileutils'
require 'dotenv'
Dotenv.load

# For Writing Log messages to Log file in UTF-8 Format.
Encoding.default_external = 'utf-8'


$LOG_FILE_PATH = nil


class LogFw

    ###########################################################################
    #
    # Default constructor.
    #
    ###########################################################################
    def initialize( *targets )
        @targets = targets
    end

    ##############################################
    #
    # Overrides the write method of Logger class
    #
    #############################################
    def write( *args )
        @targets.each {|t| t.write(*args)}
    end

    ##############################################
    #
    # Overrides the close method of Logger class
    #
    #############################################
    def close
        @targets.each(&:close)
    end

end

##############################################
#
#  Custom Logger class
#
#############################################

class MyLogger < Logger

    ##############################################
    #
    # Creating a custom log level and add it to existing logs.
    # @param [String] log   User defined Log name.
    #
    #############################################
    def self.custom_level( log )
      SEVS << log
      idx = SEVS.size - 1

      define_method(log.downcase.to_sym) do |progname, &block|
        add(idx, nil, progname, &block)
      end
    end

    SEVS = %w(DEBUG INFO WARN ERROR FATAL UNKNOWN)
    def format_severity(severity)
        SEVS[severity] || 'ANY'
    end

    def verbose(progname = nil, &block)
        add(5, nil, progname, &block)
    end
end

##############################################################################
#
# Create logs folder if it doesn't exists and opens the log file in write mode
#
# @param [String] dir   The log files directory
# @param [String] file_name   The log file name
#
##############################################################################
def create_file( dir, file_name )
    unless File.directory?(dir)
        FileUtils.mkdir_p(dir)
    end

    path = "#{dir}/#{file_name}.log"
    $LOG_FILE_PATH = path
    File.open(path, 'w')
end

###########################################################################
#
# Clean up the logs if it reaches the maximum age, maximum age can be set
# through config file. Default age is 30 Days.
#
# @param [String] dir   The log files directory
# @param [Integer] age  How many days wanted to keep the logs
# @param [String] file_name   The log file name
#
###########################################################################
def clean_logs( dir, age, file_name )
    clean_dir = dir

    curw_dir = Dir.pwd
    Dir.chdir(clean_dir)

    d = Dir.new(clean_dir)
    d.each do |name|
        if (File.file?(name) && name.include?(file_name))
            if File.mtime(name) < ( Time.now - (60 * 60 * 24 * age) )
                File.delete(name)
            end
        end
    end

    Dir.chdir(curw_dir)
end

###########################################################################
#
# Reads LogLevel, LogAging and LogsDir from config file
# If the above fields not exits in config file, it will take default values
#
# @No params
#
###########################################################################
def set_log_level_and_age_from_config
    # Parse the arguments and set config file
    arg_count = ARGV.length
    count = 1
    if arg_count > 0
        for i in 0 .. arg_count-1
            config_file = ARGV[i]
            if config_file.include?('.yaml')
                if (config_file.include?('cooke'))
                    config_file = File.basename(config_file)
                    config_file = File.join( ENV['FRUITSALAD_HOME'], '../test/cooke_system_tests/configs/', "#{config_file}" )
                end
                # Set the config file
                Conf::set_source config_file
                conf_inst = Conf.new()
                dictionary = conf_inst.instance_variable_get(:@dict)
                    if ( dictionary.has_key?('LogLevel') || dictionary.has_key?('LogAgeSupport')   \
                        || dictionary.has_key?('LogAge') ||  dictionary.has_key?('LogDir')
                       )
                        # Read LogLevel from config file
                        @LogLevel = Conf::property(:LogLevel, 0)
                        @LogAgeSupport = Conf::property(:LogAgeSupport, 0)
                        @LogAge = Conf::property(:LogAge, 30)
                        @LogDir = Conf::property(:LogDir, nil)
                        break
                    elsif count == arg_count
                        @LogLevel = 0
                        @LogAgeSupport = 0
                        @LogAge = 30
                        @LogDir = nil
                    end
            elsif count == arg_count
                config_file = "#{ENV['FRUITSALAD_HOME']}/#{ENV['CONFIG_FILE']}"
                if config_file.include?('.yaml')
                    # Set the config file
                    Conf::set_source config_file
                end

                # Read LogLevel from config file
                @LogLevel = Conf::property(:LogLevel, 0)
                @LogAgeSupport = Conf::property(:LogAgeSupport, 0)
                @LogAge = Conf::property(:LogAge, 30)
                @LogDir = Conf::property(:LogDir, nil)
            end
            count = count+1
        end
    else
        config_file = "#{ENV['FRUITSALAD_HOME']}/#{ENV['CONFIG_FILE']}"
        if config_file.include?('.yaml')
            # Set the config file
            Conf::set_source config_file
        end

        # Read LogLevel from config file
        @LogLevel = Conf::property(:LogLevel, 0)
        @LogAgeSupport = Conf::property(:LogAgeSupport, 0)
        @LogAge = Conf::property(:LogAge, 30)
        @LogDir = Conf::property(:LogDir, nil)
    end
end

###########################################################################
#
# Writes log messages to the specified log file in a customized format
#
# @No params
#
###########################################################################
def write_messages_to_log_file
    # Key of ENV hash which consists log folder-file name as value.
    log_folder_file_env_key = Conf::property(:LogFolderFileEnvKey, nil)
    @file_path = $0.sub(/\.rb\Z/, '')
    path_elems = @file_path.split('/')
    @file_name = path_elems.pop
    if (@file_name =~ /spec\z/)
        @file_path = $*[0]
        @file_name = File.basename(@file_path).sub(/\.rb\Z/, '')
    end

    $firmware = Conf.property( :Firmware_Type, nil )
    if $firmware != nil
        firmware_name = "_#{$firmware}"
    end
    if @LogAgeSupport == 0
        log_file_name = @file_name
    else
        log_file_name = @file_name + '_' + Time.now.strftime('%Y%m%d%H%M%S')
    end

    if @LogDir
        unless log_folder_file_env_key.nil?
            # Fetching log folder-file name.
            @logs_dir = File.dirname(__FILE__) +
                          "/../../test/#{@LogDir}"
            log_file_name = log_folder_file_env_key
        else
            @logs_dir = File.dirname(__FILE__) + "/../../test/#{@LogDir}/logs"
        end
    else
        @logs_dir = File.dirname(@file_path) + "/logs"
    end
    $script_log_file_name = log_file_name
    log_file = create_file(@logs_dir, log_file_name)
    log_file.write('Created at ' + Time.now.inspect + "\n")
    log_file.sync = true
    # Writes log messages to the log file
    $LOG = MyLogger.new(LogFw.new(STDOUT, log_file), 'daily')
    $LOG.level = @LogLevel
    MyLogger.custom_level( 'TIME' )
    MyLogger.custom_level( 'PRINT' )
    $LOG.formatter = proc do |severity, datetime, progname, msg|
        date_format = datetime.strftime("%Y-%m-%d %H:%M:%S,%L")
         if severity == "INFO" or severity == "WARN"
          "#{date_format} #{severity} -- : #{msg}\n"
        elsif severity == "ANY"
          "#{date_format} #{severity} -- : #{msg}\n"
        elsif severity == "TIME"
            if $LOG.level <= 1
                "#{date_format} INFO -- :"
            end
        elsif severity == "PRINT"
            if $LOG.level <= 1
                "#{msg}"
            end
        else
          "#{date_format} #{severity} -- : #{msg}\n"
        end
    end
end

def get_present_log_file_name
    $LOG_FILE_PATH
end

# Set log levels from config file
set_log_level_and_age_from_config

# Write messages to log file
write_messages_to_log_file

# Clean the log files
clean_logs(@logs_dir, @LogAge, @file_name) if @LogAgeSupport != 0