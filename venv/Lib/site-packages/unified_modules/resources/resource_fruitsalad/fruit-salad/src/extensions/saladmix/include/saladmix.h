////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   saladmix.h
/// @brief  Header file for saladmix.c
///
/// @version \$Id: saladmix.h 775 2015-01-27 14:29:59Z piotrs $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

//
// Constants
//
#define ERROR -1
#define SUCCESS 0
#define MAX_LINE_LENGTH 1024
#define DEFAULT_CARD_INDEX 0

//
// Structs
//

///////////////////////////////////////////////////////////////////////////////
//
// Linked list to contain the values associated with a particular key as it is
// tokenised from CSV.
//
///////////////////////////////////////////////////////////////////////////////
struct Values 
{
    // The string representation of each value.
    char *head;
    // Pointer to the next struct in the list, or null if there is none.
    struct Values *next;
};

///////////////////////////////////////////////////////////////////////////////
///
/// A Key-Values pair representing a row of our CSV data.
///
///////////////////////////////////////////////////////////////////////////////
struct Row
{
    char *key;
    struct Values *values;
};

//
// Function declarations
//

///////////////////////////////////////////////////////////////////////////////
///
//  Function: RowDelete
///
/// @brief Free the memory associated with a Row object.
///
/// @param row The Row object to delete.
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
void RowDelete( struct Row* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: CreateRow
///
/// @brief Parse a CSV row to the name of a tinyalsa control and its associated
///        Values.
///
/// @param csv    The row of CSV data as a single C-string.
///
/// @return A new Row struct containing the data from the CSV argument.
///
///////////////////////////////////////////////////////////////////////////////
struct Row *CreateRow( char* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ValuesArray
///
/// @brief Convert our Values linked list into an array of integers or chars.
///
/// @param listhead Pointer to the first element of the values list.
/// @param elements The number of elements in the list: can be obtained using
///                 ValuesLength.
/// @param ctlType  Type of mixer control this array is to be writen to.
///
/// @return An array allocated on the heap.
///
///////////////////////////////////////////////////////////////////////////////
void* ValuesArray( struct Values*, unsigned int, int ctlType );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ValuesAppend
///
/// @brief Append a given string to the first available slot in a Values linked 
///        list. 
///
/// @remark Implemented using recursion.
///
/// @param listhead Pointer to a Values node in the linked list.
/// @param string   The C-string to place in the linked list.
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
void ValuesAppend( struct Values*, char* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ValuesDelete
///
/// @brief Deallocate a Values struct and all sub-nodes.
///
/// @param listhead Pointer to the first node in the linked list.
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
void ValuesDelete( struct Values* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ValuesLength
///
/// @brief Calculate the length of a Values linked list using recursion.
///
/// @param listhead Pointer to the first node in the linked list.
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
int ValuesLength( struct Values* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ChopQuoteMarks
///
/// @brief Edits a string in place to remove '"' characters from the front and 
///        back of the string.
///
/// @param string The string to modify.
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
void ChopQuoteMarks( char* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: ValuesWrite
///
/// @brief Write a mixer control using its key and a list of values.
///
/// @param key     The string name of the control.
/// @param pValues The Values linked list containing the values to write.
///
///////////////////////////////////////////////////////////////////////////////
void ValuesWrite( char*, struct Values* );

///////////////////////////////////////////////////////////////////////////////
///
// Function: LoadUsecase
///
/// @brief Load a usecase from a CSV file.
///
/// @param cardIndex Index of the audio card to use.
/// @param filename  The path of the file to load from.
///
/// @return 0 on successful execution, or a non-zero integer if an error 
///         occured.
///
///////////////////////////////////////////////////////////////////////////////
int LoadUsecase( int cardIndex, char *filename );

///////////////////////////////////////////////////////////////////////////////
///
// Function: PrintUsage
///
/// @brief Prints usage information to stdout.
///
/// (no parameters)
///
/// @return void
///
///////////////////////////////////////////////////////////////////////////////
void PrintUsage( void );


////////////////////////////// END OF FILE ////////////////////////////////////
