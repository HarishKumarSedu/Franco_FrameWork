////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file bindings.h
/// @brief  Header for all client code binding functions.
///
/// @version \$Id: bindings.h 700 2015-01-13 14:13:21Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

#pragma once

//
// Includes
//
#include "stdafx.h"
#include "functions.h"

#pragma comment( lib, "WinDriverTestAPI.lib" )

// Macro for importing DLL functions with C-style interface.
#define DLL extern "C" __declspec(dllimport)
// Macro for type signature used by all binding functions.
#define BINDING( name ) int name ( const Functions::Arguments& arguments )
// Return value of binding functions when arguments vector is malformed.
#define FAILURE -1

// Initialisation routines for WinDriverTestAPI
DLL void Initialize();
DLL void CleanUp();

// bindings.cpp
int IntegerFromString( string );
float FloatFromString( string );
bool MinimumNumberOfArguments( const Functions::Arguments&, unsigned int expected, string function );
void LoadBindings();

// bindings/volume_control_binding.cpp
BINDING( GetPlaybackDeviceBinding );
BINDING( GetCaptureDeviceBinding );
BINDING( SetChannelVolumeBinding );
BINDING( GetChannelCountBinding );

// bindings/hibernate_suspend_binding.cpp
BINDING( HibernateForDurationBinding );
BINDING( SuspendForDurationBinding );

// bindings/powerstate_binding.cpp
BINDING( CodecDevicePowerStateBinding );

// bindings/playback.cpp
BINDING( PlaybackBinding );
BINDING( GetWMPIdentifierBinding );
BINDING( GetMetroIdentifierBinding );

// TestFunctionBindings.cpp
BINDING( RunUnittestsBinding );

////////////////////////////////// END OF FILE ///////////////////////////////
