###############################################################################
###
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  firmware.rb
### @brief Encapsulates all the firmware based test method definitions
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'logfw'
require 'fileutils'

###############################################################################
#
# @function verify_firmware_loaded
#
# Verifies the given firmware got loaded in the specified DSP cores
#
# @param [Array]  dsp_cores      Array of DSP cores in which the firmware are
#                                to be loaded.
# @param [String] firmware_name  Name of the firmware control.
# @param [Array]  expected_fw_id Array of expected firmware IDs for the given
#                                firmware
# @param [Boolean] negate        check for firmware loaded and raise
#                                exception if it is not loaded if negate is
#                                false otherwise raise expection on loaded
#
###############################################################################
def verify_firmware_loaded( dsp_cores,
                            firmware_name,
                            expected_fw_id,
                            negate = false,
                            revision = nil,
                            version = nil
                          )

    device = FruitSalad.get_device()
    opts = { 'version' => version }

    dsp_cores.length.times do |i|
        opts['dsp_core'] = dsp_cores[i]
        opts['revision'] = revision unless revision == nil
        opts['expected_fw_id'] = expected_fw_id[i] unless expected_fw_id == nil
        loaded_value, dsp_core_id = device.is_firmware_loaded?(firmware_name, opts )
        if( negate == false )
            if( loaded_value == false )
                raise "firmware not loaded in the specified DSP core " \
                      "#{dsp_cores[i] + 1}"
            else
                $LOG.debug "firmware got loaded successfully in the specified DSP " \
                     "core #{dsp_cores[i] + 1}"
            end
        else
            if loaded_value
                raise "firmware got loaded in the specified DSP core " \
                      "#{dsp_cores[i] + 1}"
            else
                $LOG.debug "firmware was not loaded in the specified DSP core " \
                     "#{dsp_cores[i] + 1}"
            end
        end
    end

    return
end

###############################################################################
#
# @function verify_firmware_running
#
# Test method definition to verify that firmware is running in the specified
# DSP cores.
#
# @param [Array]   dsp_cores      The number of the DSP core that the firmware
#                                 should be installed on eg. 2
# @param [String] firmware_name   Name of the firmware control.
# @param [Array]  expected_fw_id  Array of expected firmware IDs for the given
#                                 firmware
# @param [Boolean] negate         check for firmware running and raise
#                                 exception if it is not runnning if negate is
#                                 false otherwise raise expection on runnning
#
# @raise [RuntimeError] An exception is raised if the firmware is not running
#                       when negate is false otherwise raises exception when
#                       when firmware is running.
#
###############################################################################
def verify_firmware_running( dsp_cores,
                             firmware_name,
                             expected_fw_id,
                             negate = false,
                             revision = nil,
                             version = nil
                           )

    device = FruitSalad.get_device()
    opts = { 'version' => version }
    dsp_cores.length.times do |i|
        opts['dsp_core'] = dsp_cores[i]
        opts['revision'] = revision unless revision == nil
        opts['expected_fw_id'] = expected_fw_id[i] unless expected_fw_id == nil
        running_value = device.is_firmware_running?( firmware_name, opts )

        if ( negate == false )
            if( running_value == false )
                raise "firmware was not running in the specified DSP core " \
                      "#{dsp_cores[i] + 1}"
            else
                $LOG.debug "firmware is running successfully in the specified DSP " \
                     "core #{dsp_cores[i] + 1}"
            end
        else
            if running_value
                raise "firmware is running in the specified DSP core " \
                      "#{dsp_cores[i] + 1}"
            else
                $LOG.debug "firmware was not running in the specified DSP core " \
                     "#{dsp_cores[i] + 1}"
            end
        end
    end

    return
end
##############################################################################
#
# @function load_firmware
#
# @param [String]  file               firmware file name
# @param [Integer] core_index         core id to load fimware file
# @param [String]  firmware_path      path of firmware file to be loaded
# @param [String]  algorithms_path    path of algorithm file to be copied
# @return true if firmware loaded successfully
#
#############################################################################
def load_firmware( file, core_index, firmware_path = nil, algorithms_path = nil )
    device = FruitSalad.get_device()
    if firmware_path.nil?
      folder = device.core.GetStandardFolder( WISCE_CONST::FolderType_Firmware )
    else
      folder = firmware_path
    end
    unless algorithms_path.nil?
      destination_path = device.core.GetStandardFolder( WISCE_CONST::FolderType_Algorithm )
      FileUtils.cp_r(Dir.glob("#{algorithms_path}"), "#{destination_path}",remove_destination: true)
    end
    status = device.load_firmware( File.join( folder, file ),
                                   core_index
                                 )
    return status
end
##############################################################################
#
# @function start_core
#
# @param [Integer] core_index    core id to load fimware file
#
# @return 0 if core start successfully
#
#############################################################################
def start_core( core_index  )
    device = FruitSalad.get_device()
    status = device.start_dsp_core( core_index )
    return status
end
##############################################################################
#
# @function stop_core
#
# @param [Integer] core_index    core id to load fimware file
# @return 0 if core stop successfully
#
#############################################################################
def stop_core( core_index )
    device = FruitSalad.get_device()
    status = device.stop_dsp_core( core_index )
    return status
end

#############################################################################
#
# @function check_if_core_is_running
#
# @param [Integer] core_index    core id to check_if_core_is_running
#
# @return returns True if core is running.
#
#############################################################################
def check_if_core_is_running( core_index )
    device = FruitSalad.get_device()
    device.is_dspcore_running?( core_index )
end

###################################-END-#######################################