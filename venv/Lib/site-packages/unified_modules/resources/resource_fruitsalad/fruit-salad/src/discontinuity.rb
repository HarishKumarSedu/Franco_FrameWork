# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   discontinuity.rb
### @brief  Wrapper for native object-code implementation of discontinuity detection.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

require 'ffi'
require 'logfw'

###############################################################################
#
# Wrapper for shared library object that detects discontinuity in output file
# with respect to reference file.
#
###############################################################################
module NativeDiscontinuity
    extend FFI::Library
    # Name of the shared library
    ffi_lib 'Discontinuity'

    ###########################################################################
    # Enums
    ###########################################################################

    ###########################################################################
    #
    # Enum of possible discontinuity return codes.
    #
    ###########################################################################
    enum :DiscRetCode, [ :FILEOPEN_ERROR,   0,
                         :NO_DISCONTINUITY, 1,
                         :DISC_DETECTED,    2
                       ]

    ###########################################################################
    #
    # @function discontinuity
    #
    # Calls discontinuity detection native code which detects if there is
    # discontinuity in the output file with respect to input file.
    #
    # @param [pointer] reference_file File path with which we compare output
    #                                 file.
    #
    # @param [pointer] output_file File path to check whether there is
    #                              discontinuity.
    #
    # @return [Enum] Returns discontinuity return codes.
    #
    # @raise [RunTimeError] If the reference, output files are not found.
    #
    ###########################################################################
    def self.discontinuity( reference_file, output_file )
        time_ptr = FFI::MemoryPointer.new( :float, 1 )
        return_value = DiscontinuityDetection( reference_file,
                                               output_file,
                                               time_ptr
                                             )
        if( :FILEOPEN_ERROR == return_value )
            raise 'file open error in discontinuity detection'
        end
        if( :DISC_DETECTED == return_value )
            # Reading point of time at which discontinuity detected.
            time = time_ptr.read_array_of_float( 1 )
            $LOG.debug "Discontinuity detected at #{time[0].round( 6 )} seconds"
        end

        return return_value
    end

    ###########################################################################
    #
    # Invokes the object code to perform discontinuity detection.
    #
    ###########################################################################
    attach_function :DiscontinuityDetection, [ :pointer, :pointer, :pointer ], :DiscRetCode
end

################################# END OF FILE #################################