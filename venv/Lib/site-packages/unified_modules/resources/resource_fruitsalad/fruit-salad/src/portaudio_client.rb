################################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   portaudio_client.rb
### @brief  Playback and recording of .wav files using portaudio API
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
#################################################################################

###############################################################################
# Includes
###############################################################################

require 'ffi'
require 'configuration'
require 'logfw'
require 'result'

###############################################################################
# Cleanup
###############################################################################

at_exit do
    PortaudioClient::terminate
end

###############################################################################
#
# FruitSalad playback and recording facility. Wraps a native implementation
# supplied as a shared library.
#
###############################################################################
module PortaudioClient
    extend FFI::Library

    ###########################################################################
    # Constants
    ###########################################################################

    ###########################################################################
    #
    # Sample rate
    #
    ###########################################################################
    SampleRate = Conf.property( :SampleRate, nil )

    ###########################################################################
    #
    # The number of audio channels to open for playback.
    #
    ###########################################################################
    PlaybackChannels = Conf.property( :Playback_Channels, 2 )

    ###########################################################################
    #
    # The number of audio channels to open for playback.
    #
    ###########################################################################
    RecordingChannels = Conf.property( :Recording_Channels, 2 )

    ###########################################################################
    #
    # Audio buffer size.
    #
    ###########################################################################
    BufferSize = Conf.property( :AudioBufferSize, 2048 )


    # Boolean indicates whether to return error code or not.
    ReturnErrorCodes = Conf.property( :ReturnErrorCodes, false )

    @thread = nil
    @playback_completed = false

    ###########################################################################
    # Shared library to bind with
    ###########################################################################
    ffi_lib "portaudio_client_x86"

    ###########################################################################
    # Enums
    ###########################################################################

    ###########################################################################
    #
    # Enum of possible client states.
    #
    ###########################################################################
    enum :PlayerState, [ :uninitialized,  0x0,
                         :initialized,    0x1,
                         :playback_ready, 0x2,
                         :record_ready,   0x4,
                         :playing,        0x8,
                         :recording,      0x10
                       ]

    ###########################################################################
    #
    # Enum of possible client status codes.
    #
    ###########################################################################
    enum :PlayerStatus, [ :pa_client_success,                         0,
                          :pa_client_uninitialized,                  -1,
                          :pa_initialization_error,                  -2,
                          :pa_termination_error,                     -3,
                          :pa_stream_open_error,                     -4,
                          :pa_stream_close_error,                    -5,
                          :pa_stream_start_error,                    -6,
                          :pa_stream_stop_error,                     -7,
                          :pa_client_file_error,                     -8,
                          :pa_samplingrate_support_error,            -9,
                          :pa_invalid_host_api_error,                -10,
                          :pa_playback_channel_count_support_error,  -11,
                          :pa_recording_channel_count_support_error, -12
                        ]

    ###########################################################################
    #
    # Declaration of a callback function used to report client status.
    #
    ###########################################################################
    callback :StatusCallback, [:bool, :PlayerState], :void

    ###########################################################################
    #
    # Declaration of a callback function used to report client errors.
    #
    ###########################################################################
    callback :ErrorCallback, [:PlayerStatus, :int, :string], :void

    ###########################################################################
    #
    # Initializes the client. Should only be called once.
    #
    ###########################################################################
    attach_function :SetUp, [ :int, :StatusCallback, :ErrorCallback], :PlayerStatus

    ###########################################################################
    #
    # Terminates the client. Should only be called onece.
    #
    ###########################################################################
    attach_function :Terminate, [], :int

    ###########################################################################
    #
    # Starts playback of a file indicated by the supplied path.
    #
    ###########################################################################
    attach_function :StartPlaybackFromFile, [:int, :int, :string], :PlayerStatus

    ###########################################################################
    #
    # Stops playback.
    #
    ###########################################################################
    attach_function :StopPlayback, [], :int

    ###########################################################################
    #
    # Starts recording to a file and stores it in the given location.
    #
    ###########################################################################
    attach_function :StartRecordingToFile, [:int, :int, :string], :PlayerStatus

    ###########################################################################
    #
    # Stops recording.
    #
    ###########################################################################
    attach_function :StopRecording, [], :int

    ###########################################################################
    #
    # Puts the calling thread to sleep and keeps a reference to it.
    #
    ###########################################################################
    def self.wait_for_notification()
        @thread = Thread.current
        sleep
    end

    ###########################################################################
    #
    # A callback used to react to changes in client state.
    #
    ###########################################################################
    PortaudioClient::StateCallback = Proc.new do |on,state|
        $LOG.debug "on #{on} state #{state}"
        if ( not on ) && ( :playing == state )
            @playback_completed = true
            $LOG.info 'playback completed'
            unless @thread.nil?
                @thread.wakeup
            end
        end
    end

    ###########################################################################
    #
    # A callback used to react to client errors.
    #
    ###########################################################################
    PortaudioClient::ErrorCallback =
        Proc.new do |client_status,lib_error_code,lib_error_message|
        raise "PortaudioClient error code: #{client_status} \n caused by"\
              " library error: (#{lib_error_code}) #{lib_error_message}"
    end

    ###########################################################################
    # Initialization
    ###########################################################################

    @@is_running = false

    ###########################################################################
    #
    # @function start
    #
    # Initilises the portaudio client
    #
    # no-parameters
    ###########################################################################
    def self.start()
        @thread = nil
        @playback_completed = false
        unless @@is_running
            player_status = SetUp( BufferSize,
                                   StateCallback,
                                   ErrorCallback
                                  )
            if :pa_client_success != player_status
                error_message = "portaudio_client: Error during setup: #{player_status}"
                if ReturnErrorCodes
                    return APIError.new(:PORTAUDIO_SETUP_FAILED,
                                          error_message,
                                          Thread.current.backtrace)
                else
                    raise error_message
                end
            end
            @@is_running = true
        end
        return ResultSuccess.new() if ReturnErrorCodes
    end

    #########################################################################
    #
    # @function start_playback
    #
    # Setps the player playback configuration with given channel and samplingrate
    # configuration and Starts playback from a file stored at the given location.
    #
    # @param [int]       playbackChannel playback channels used to play the stream
    # @param [int]       sampleRate      playback samplerate used to play the stream
    # @param [string]    playbackFile    playback file name.
    #
    ###########################################################################
    def self.start_playback( playbackChannel, sampleRate, playbackFile )
        player_status = StartPlaybackFromFile( playbackChannel,
                                               sampleRate,
                                               playbackFile
                                             )
        if :pa_client_success != player_status
            error_message = "portaudio_client: Error during playback configuration: #{player_status}"
            if ReturnErrorCodes
                return APIError.new(:ANALOG_PLAYBACK_ERROR,
                                      error_message,
                                      Thread.current.backtrace)
            else
                raise error_message
            end
        end
        return ResultSuccess.new() if ReturnErrorCodes
    end

    ###########################################################################
    #
    # @function start_recording
    #
    # Setps the player recording configuration with given channel and samplingrate
    # Starts recording to a file and stores it in the given location.
    #
    # @param [int]       recordChannel   playback channels used to play the stream
    # @param [int]       sampleRate      playback samplerate used to play the stream
    # @param [string]    recordFile      playback file name.
    #
    ###########################################################################
    def self.start_recording( recordChannel, sampleRate, recordFile )
        player_status = StartRecordingToFile( recordChannel,
                                              sampleRate,
                                              recordFile
                                            )
        if :pa_client_success != player_status
            error_message = "portaudio_client: Error during recording configuration: #{player_status}"
            if ReturnErrorCodes
                return APIError.new(:ANALOG_RECORD_ERROR,
                                      error_message,
                                      Thread.current.backtrace)
            else
                raise error_message
            end
        end
        return ResultSuccess.new() if ReturnErrorCodes
    end

    ###########################################################################
    #
    # @function Termination
    #
    # Terminates the portaudio client
    #
    # no-parameters
    ###########################################################################
    def self.terminate
        Terminate() if @@is_running
        @@is_running = false
        return
    end

    ###########################################################################
    #
    # @function playback_completed?
    #
    # Gives current status of playback whether it is completed or not.
    #
    # @return [Boolean] Returns playback status either completed(true) or not.
    #
    ###########################################################################
    def self.playback_completed?
        return @playback_completed
    end

end
###############################END OF FILE#####################################