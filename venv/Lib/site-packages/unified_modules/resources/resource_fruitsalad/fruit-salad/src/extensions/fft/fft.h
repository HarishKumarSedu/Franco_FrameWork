////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   fft.h
/// @brief  Function export definitions.
///
/// @version \$Id: fft.h 588 2014-12-08 13:41:12Z piotrs $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
/// Defines
///////////////////////////////////////////////////////////////////////////////

#ifndef FFT_H
#define FFT_H

#ifdef FFT_EXPORTS
#define FFT_API __declspec(dllexport) 
#else
#define FFT_API __declspec(dllimport) 
#endif

///////////////////////////////////////////////////////////////////////////////
/// Function declarations
///////////////////////////////////////////////////////////////////////////////

extern "C"
{
///////////////////////////////////////////////////////////////////////////////
/// 
/// Function: CFFT
///
/// @brief Performs a complex FFT transform.
///
/// @note Perform a fast fourier transform of the given input buffer (ipReal
///       and ipImag) which refer to (real and imaginery) respectively.
///       The output is give as real and imaginary buffers given in (opReal
///       and opImag) respectively.
///
/// @param pIpReal Pointer to the real part of the input buffer.
/// @param pIpImag Pointer to the imaginary part of the input buffer.
/// @param pOpReal Pointer to the real part of the output buffer.
/// @param pOpImag Pointer to the imaginary part of the output buffer.
/// @param sign   When -1 FFT is perfomed and when 1 IFFT is performed.
/// @param fftLen FFT length.
///
///////////////////////////////////////////////////////////////////////////////
FFT_API void CFFT( float *pIpReal,
                   float *pIpImag,
                   float *pOpReal,
                   float *pOpImag,
                   float sign,
                   int   fftLen
                  );
}

///////////////////////////////////////////////////////////////////////////////
/// 
/// Function: bit_rev
///
/// @brief Performs decimation in time bit-reversal so that the frequency
///        components would not need sorting.
///
/// @param number Element number.
/// @param nBits Number of bits used (which is log2(fftLen)).
///
/// @return The sorted index for that element.
///
///////////////////////////////////////////////////////////////////////////////
int BitRev( int number, int nBits );

#endif //FFT_H
/////////////////////////////END OF FILE///////////////////////////////////////