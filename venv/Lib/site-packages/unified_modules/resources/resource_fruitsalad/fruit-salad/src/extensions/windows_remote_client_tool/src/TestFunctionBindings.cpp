////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file TestFunctionBindings.cpp
/// @brief  Unit test for our client code execution tool.
///
/// @version \$Id: TestFunctionBindings.cpp 658 2015-01-06 15:09:00Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "stdafx.h"
#include "bindings.h"

#define RUN( test, testName ) if ( test () ) { std::cout << "Test failed: " << testName << "\n"; } else { std::cout << testName << " passed\n"; }

#define TEST_VALUE 104

///////////////////////////////////////////////////////////////////////////////
///
/// Function: DummyBinding
///
/// @brief Stand-in function binding for use as part of a unittest.
///
/// Used for unittesting our mechanism for storing and accessing function bindings.
///
/// @param arguments The standard arguments list passed to all function bindings.
///
/// @return The arbitrary, strictly positive, TEST_VALUE.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( DummyBinding )
{
	UNREFERENCED_PARAMETER( arguments );
    return TEST_VALUE;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: TestFunctions
///
/// @brief Unit test for our mechanism for storing and calling function bindings by pointer.
///
/// Registers a dummy binding, calls it and verifies that the returned integer
/// value matches that expected.
///
/// (no parameters)
///
/// @return false if the test passes, else true.
///
///////////////////////////////////////////////////////////////////////////////
bool TestFunctions()
{
    int testValue = 0;
    Functions functions;
    functions.RegisterFunction( "DummyBinding", &DummyBinding );
    testValue = functions.CallFunction( "DummyBinding", Functions::Arguments() );
    return TEST_VALUE != testValue;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: RunUnittests
///
/// @brief Function which calls each unit test in order.
///
/// (no parameters)
///
///////////////////////////////////////////////////////////////////////////////
void RunUnittests()
{
    RUN( TestFunctions, "TestFunctions" );
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: RunUnittestsBinding
///
/// @brief Binding for RunUnittests which allows us to run our unit tests from the
/// main executable.
///
/// @param arguments The standard arguments list, unused by this binding.
///
/// @return Integer 0.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( RunUnittestsBinding )
{
	UNREFERENCED_PARAMETER( arguments );
    RunUnittests();
    return 0;
}

////////////////////////////////// END OF FILE ////////////////////////////////
