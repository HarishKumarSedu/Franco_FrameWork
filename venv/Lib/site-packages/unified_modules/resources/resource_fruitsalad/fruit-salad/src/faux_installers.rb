# encoding: utf-8
################################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   faux_installers.rb
### @brief  Null target implementation for checking installers.
###
### @version \$Id: faux_installers.rb 998 2015-04-08 10:27:26Z emmas $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
#################################################################################

###############################################################################
# Includes
###############################################################################
require 'configuration'
require 'singleton'

###############################################################################
#
# Module: FruitSalad
#
# Extends the FruitSalad module with classes for checking and performing operations
# with installers for WISCE™, Extensions SDK and device packs (Windows specific).
#
###############################################################################
module FruitSalad
    #######################################################################
    #
    # Class: InstallerRegInfo
    #
    # Collects together the relevant information returned from the registry for
    # an installed program. This implementation stubs out any associated methods
    # but seeks to do nothing while still allowing the tests themselves to pass.
    #
    #######################################################################
    class InstallerRegInfo
        attr_reader :version, :uninstall_str, :name, :guid

        #######################################################################
        #
        # @function to_s
        #
        # Create a printable string from the object.
        #
        # (no parameters)
        #
        #######################################################################
        def to_s
            return "Faux Installer"
        end
    end

    #######################################################################
    #
    # Singleton Class.
    #
    # Provides methods for invoking installers and checking the registry for installed programs.
    #
    #######################################################################
    class Installer
        include Singleton

        #######################################################################
        #
        # @function installer_dir_path
        #
        # Set the directory path of the installer commands.
        #
        # @param [String] dir_path Directory path for the installer commands.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.installer_dir_path( dir_path )
            raise Cucumber::Pending
        end

        ###############################################################################
        #
        # @function clean_installers_dir
        #
        # Pretends to remove all executables from the installers directory.
        #
        # (no parameters)
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.clean_installers_dir
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function copy_installer
        #
        # Looks up and copies the requested installer and copies to the installer_dir_path location.
        #
        # @param [String] installer_name Name of the installer to locate and copy.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.copy_installer( installer_name )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function run_installer_silently
        #
        # Run an installer sliently.
        #
        # @param [String] installer_name Name of the isntaller file to run.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.run_installer_silently( installer_name )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function installer_filename
        #
        # Create the installer name from user friendly terms.
        #
        # @param [String] program_name       Program or device pack name.
        # @param [nil|String] version        Whether to look for a specific version (nil if any version).
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.installer_filename( program_name, version )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function run_silent_uninstall
        #
        # Run the uninstaller for a given InstallerRegInfo silently.
        #
        # @param [InstallerRegInfo] reg_info_entry Installed program information returned
        #                                          from the registry.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.run_silent_uninstall( reg_info_entry )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function remove_installer
        #
        # Remove an installer from the current installer directory.
        #
        # @param [String] installer_name Name of the installer file to run.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.remove_installer( installer_name )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function check_program_is_installed
        #
        # Check whether the requested program is installed.
        #
        # @param [String] program_name       Program or device pack name.
        # @param [Boolean] is_install        Whether the program should be installed or uninstalled.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.check_program_is_installed( program_name, is_install )
            raise Cucumber::Pending
        end

        #######################################################################
        #
        # @function check_for_installed_version
        #
        # Check whether there is a program of version in the InstallerRegInfo array.
        #
        # @param [String]      program_name  Program or device pack name.
        # @param [nil|String]  version       Whether to look for a specific version (nil if any version).
        # @param [Boolean]     is_install    Whether the program should be installed or uninstalled.
        # @param [Boolean]     assert        Whether exceptions should be raised if the program was in the incorrect state.
        #
        # @raise [Cucumber::Pending]
        #
        #######################################################################
        def self.check_for_installed_version( program_name, version, is_install, assert )
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function lookup_installed_versions_by_GUID
        #
        # Lookup the uninstall keys in the registry for a given GUID.
        #
        # @param [String] guid GUID string (including braces) of the program to lookup.
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.lookup_installed_versions_by_GUID( guid )
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function lookup_installed_versions_by_name
        #
        # Lookup the uninstall keys in the registry for a given name.
        #
        # Used to locate device packs by name as the GUID is not fixed (depends on revision).
        #
        # Exact string being searched for is "<name> WISCE\x99 pack" (where \x99 is the ™ character).
        #
        # @param [String] name Name string of the program to lookup.
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.lookup_installed_versions_by_name( name )
            raise Cucumber::Pending
        end

        ###############################################################################
        #
        # Device pack creation.
        #
        ###############################################################################

        ###############################################################################
        # @function clean_devices_dir
        #
        # Removes any existing files from the Device directory of the temp Device pack dir.
        #
        # Used as a staging area for the make_kit.bat script used to run InstallAware and
        # create the device packs.
        #
        # (no parameters)
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.clean_devices_dir
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function check_create_devices_dir
        #
        # Check for the presence of the Devices dir in the temp device pack area, create if absent.
        #
        # (no parameters)
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.check_create_devices_dir
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function copy_device_to_pack_dir
        #
        # Copies the specified device from a source folder into the Devices directory.
        #
        # The Devices directory is packaged into the Device Pack by the make_kit.bat script.
        #
        # @param [String] device_filename Name of the device to be copied to the packaging area.
        # @param [String] device_rev      Revision of the device to be copied to the packaging area.
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.copy_device_to_pack_dir( device_filename, device_rev )
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function create_installer
        #
        # Run the make_kit script to produce the Device Pack installer.
        #
        # @param [String]     pack_name    Name of the installer to be created (Device pack if a valid device ID).
        # @param [String]     version      Version to be assigned to the created installer.
        # @param [nil|String] replace_name Optional device name to create a replacement installer, otherwise nil.
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.create_installer( pack_name, version, replace_name )
            raise Cucumber::Pending
        end

        ###############################################################################
        # @function check_installer_created
        #
        # Check that the expected installer has been created.
        #
        # @param [nil|String] negate If nil check for existance, otherwise check for absence.
        #
        # @raise [Cucumber::Pending]
        #
        ###############################################################################
        def self.check_installer_created?( negate )
            raise Cucumber::Pending
        end

    end # end of Installer class

end # end of FruitSalad module
###############################END OF FILE#############################################