###############################################################################
###
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file linearity_steps.rb
### @brief cucumber steps definition for checking non linearity effects in
###                 recorded output.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

###############################################################################
#
# @!method When_copy_the_captured_output_to
#
# Copy the captured output to the given output file
#
#       Usage:
#       When copy the captured output to "<output>"
#
# @param output The name of the file to be written the output.
#
# @example When copy the captured output to "fn_of_x"
#
###############################################################################
When( /^copy the captured output to "(.*)"$/ ) do | output |
    output = "#{output}.wav"
    device = FruitSalad::get_device
    FruitSalad::create_wav_copy( device.output, output )
end

###############################################################################
#
# @!method When_I_add_the_two_resulting_outputs
#
# Add the given two wav files.
#
#       Usage:
#       When  I add the two resulting outputs "<file1>" and "<file2>"
#
# @param file1 The name of the first file name to be added
# @param file1 The name of the second file name to be added
#
# @example When  I add the two resulting outputs "fn_of_x.wav" and "fn_of_y.wav"
#
###############################################################################
When( /^I add the two resulting outputs "(.*)" and "(.*)"$/ ) do | file1, file2 |
    FruitSalad::signal_addition( file1, file2 )
end

###############################################################################
#
# @!method When_multiply_gain_of_with
#
# Multiply the given gain with the given file
#
#       Usage:
#       When multiply gain of "<gain>" with "<file>"
#
# @param gain The value of the gain to be multiplied
# @param file The input file name to which the given gain need to be multiplied
#
# @example When multiply gain of "0.5" with "fn_of_x.wav"
#
###############################################################################
When( /^multiply gain of "(.*)" with "(.*)"$/ ) do | gain, file |
    FruitSalad::gain_multiplication( file, gain.to_f )
end

###############################################################################
#
# @!method Then_check_similarity_of_resulting_outputs_and_against_the_threshold_of
#
# Compare the two given wav files
#
#       Usage:
#       Then check similarity of resulting outputs "<file1>" and "<file2>" against the threshold of "<threshold>"
#
# @param file1 The name of the first file to be compared
# @param file2 The name of the second file to be compared
# @param threshold The threshold value for comparison
#
# @example Then check similarity of resulting outputs "fn_of_y.wav" and "tmp/multiplied_gain_0.5_fn_of_x.wav" against the threshold of "10"
#
###############################################################################
Then( /^check similarity of resulting outputs "(.*)" and "(.*)" against the threshold of "(.*)"$/ ) do | file1, file2, error_threshold |
    FruitSalad::similarity( file1, file2, error_threshold.to_i )
end

#################################### END OF FILE  ################################