////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file hibernate_suspend
/// @brief Functions for setting up a wakeup timer and entering suspend or hibernation.
///
/// @version \$Id: hibernate_suspend.cpp 806 2015-01-29 17:03:41Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "stdafx.h"

#include <sstream>
#include <iostream>
#include <cassert>
#include <atlbase.h>

//NOTE: The implementation of the hibernate and suspend functionality depend 
//upon Windows Device Testing Framework headers and runtime. This is available 
//as part of the WDK. For this reason the project must be compiled with the 
//"ApplicationForDriver" tool set and an additional include directory is needed 
//to point to the WDTF headers. At runtime, WDTF must be on the system.
#include "WDTF.h"
#include "WDTFInterfaces.h"
#include "WDTFPNPAction.h"
#include "WDTFEDTAction.h"
#include "WDTFSystemAction.h"
#include "WDTFDriverPackageAction.h"
#include "WDTFDriverSetupDeviceAction.h"
#include "WDTFDriverSetupSystemAction.h"

enum SuspendState {
    SUSPEND=1,
    HIBERNATE=4
};

///////////////////////////////////////////////////////////////////////////////
///
/// Function: IsSleepStateSupported
/// 
/// @brief Checks if the system supports the requested sleep state.
///
/// @param aSystem          Pointer to the system action interface from WDTF.
/// @param aState           The numerical S* state that is being queried.
///
/// @return S_OK if the state is supported, else E_NOT_VALID_STATE.
///
///////////////////////////////////////////////////////////////////////////////
static HRESULT IsSleepStateSupported( IWDTFSystemAction2* aSystem, LONG aState )
{
    LONG lSleepState;
    TCHAR* where = L"WinDriverTestAPI::IsSleepStateSupported";
    if ( !CheckError( where, aSystem->GetFirstSleepState( &lSleepState ) ) )
    {
        goto failure;
    }

    while ( lSleepState )
    {
        if ( lSleepState == aState )
        {
            break;
        }
        if ( !CheckError( where, aSystem->GetNextSleepState( &lSleepState ) ) )
        {
            goto failure;
        }
    }
    return S_OK;
failure:
    return E_NOT_VALID_STATE;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: SuspendStateForDuration
/// 
/// @brief Send the system to the requested suspend state for the specified 
///        period of time.
///
/// @param suspendState     The state to go into, one of SUSPEND or HIBERNATE.
/// @param milliseconds     The duration to remain in that state.
///
/// @return S_OK if no error occurs, else E_*.
///
///////////////////////////////////////////////////////////////////////////////
static HRESULT SuspendStateForDuration( SuspendState suspendState, UINT32 milliseconds )
{
    //Note: this function assumes that COM is initialized.
    TCHAR* where = L"WinDriverTestAPI::SuspendStateForDuration";
    CComPtr<IWDTF2> pWDTF;
    CComPtr<IWDTFSystemDepot2> pSystemDepot;
    CComPtr<IWDTFTarget2> pSystemTarget;
    CComPtr<IWDTFAction2> pAction;
    CComPtr<IWDTFSystemAction2> pSystemAction;
    //Sleep time granularity is 1 second so convert ms to s by rounding up.
    LONG lSleepTimeSecs = ( milliseconds + 999 ) / 1000;
    //Convert suspend state to sleep state number.
    LONG lSleepState = suspendState;

    //Get the system target from WDTF.
    if ( !CheckError( where, pWDTF.CoCreateInstance( __uuidof( WDTF2 ) ) ) ) 
        goto failure;
    if ( !CheckError( where, pWDTF->get_SystemDepot( &pSystemDepot ) ) ) 
        goto failure;
    if ( !CheckError( where, pSystemDepot->get_ThisSystem( &pSystemTarget ) ) ) 
        goto failure;

    //Now get the system action interface from the system target.
    if ( !CheckError( where, pSystemTarget->GetInterface( CComBSTR( L"System" ), CComVariant(), CComVariant(), &pAction ) ) ) 
        goto failure;
    if ( !CheckError( where, pAction->QueryInterface( &pSystemAction ) ) ) 
        goto failure;

    //Check that the sleep state is supported.
    if ( !CheckError( where, IsSleepStateSupported( pSystemAction, lSleepState ) ) ) 
        goto failure;

    //Put system into sleep state for specified time.
    if ( !CheckError( where, pSystemAction->put_SleepWakeTimeInSeconds( lSleepTimeSecs ) ) ) 
        goto failure;
    if ( !CheckError( where, pSystemAction->Sleep( lSleepState ) ) ) 
        goto failure;

    return S_OK;
failure:
    return E_FAIL;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: HibernateForDuration
///
/// @brief Instruct the system to enter a hibernation state for a number of
///        milliseconds.
///
/// @param milliseconds The number of milliseconds to suspend for.
///
/// @return True if the system hibernated successfully, else false.
///
///////////////////////////////////////////////////////////////////////////////
DLL bool HibernateForDuration( UINT32 milliseconds )
{
    return !FAILED( SuspendStateForDuration( SuspendState::HIBERNATE, milliseconds ) );
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: SuspendForDuration
///
/// @brief Instruct the system to enter a suspend state for a number of 
///        milliseconds.
///
/// @param milliseconds The number of milliseconds to suspend for.
///
/// @return True if the system suspended successfully, else false.
///
///////////////////////////////////////////////////////////////////////////////
DLL bool SuspendForDuration( UINT32 milliseconds )
{
    return !FAILED( SuspendStateForDuration( SuspendState::SUSPEND, milliseconds ) );
}

///////////////////////////////////// END OF FILE /////////////////////////////
