# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   pass_through_linux.rb
### @brief  Implementation of pass through firmware testing for Linux-derived
###         targets.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

###############################################################################
#
# Encapsulates all of the high-level functionality expected from pass through
# firmware as a component of LinuxSalad and RemoteSalad.
#
###############################################################################
class PassThroughFirmwareForLinux

    # The name of the algorithm in our configuration map.
    AlgorithmName = 'pass through'
    FauxAlgorithmName = 'MBC/VSS'

    SampleRate = Conf.property( :SampleRate, nil )

    ###########################################################################
    #
    # @function initialize
    #
    # Default constructor. Assigns the owning DeviceInterface to the attribute
    # 'device'.
    #
    # @param [DeviceInterface] device The parent device object.
    #
    ###########################################################################
    def initialize( device )
        @device = device
        begin
            @firmware_id = Conf.hash_lookup_value( :Firmware_ids,
                                                   AlgorithmName
                                                 )
        rescue RuntimeError
            @firmware_id = nil
        end
    end

    ###########################################################################
    #
    # @function load
    #
    # Load pass-through firmware onto the test target.
    #
    # @param  [Fixnum] dsp_core_index     The index core to load the firmware
    #                                     onto. 0-indexed.
    # @option [Bool]   :autostart         Automatically start the core running
    #                                     if true. Defaults to false.
    # @option [String] faux_firmware_name A "false identity" to use. This is
    #                                     used as the driver has a hard coded
    #                                     list of firmwares it expects and this
    #                                     list does not include any test
    #                                     firmwares.
    #
    # @raise [RuntimeError] An exception is raised if the firmware fails to
    #                       load.
    #
    ###########################################################################
    def load( dsp_core_index, options = {} )
        autostart = options.fetch( :autostart, false )
        @core_index = dsp_core_index
        @device.load_firmware( AlgorithmName,
                               @core_index,
                               faux_firmware_name: FauxAlgorithmName
                             )
        @device.usecase( "dsp#{@core_index + 1}_pass_through_wake_up_core" )
        opts = { 'version' => nil, 'dsp_core' => @core_index }
        loaded, dsp_core_id = @device.is_firmware_loaded?( AlgorithmName, opts )
        if !loaded
            raise 'Firmware failed to load'
        end
        start if autostart
    end

    ###########################################################################
    #
    # @function start
    #
    # Begin running pass-through firmware.
    #
    # (no parameters)
    #
    ###########################################################################
    def start()
        @device.start_firmware( AlgorithmName, nil, @core_index )
    end

end

################################# END OF FILE #################################