////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file volume_control_binding
/// @brief  Bindings for DLL functions provided by volume_control.cpp of WinDriverTestAPI
///
/// @version \$Id: volume_control_binding.cpp 659 2015-01-06 15:11:33Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
////////////////////////////////////////////////////////////////////////////////

//
// Includes
//
#include "../stdafx.h"
#include "../functions.h"
#include "../bindings.h"

struct IMMDevice;

// Client code declarations.
DLL IMMDevice* GetPlaybackDevice();
DLL IMMDevice* GetCaptureDevice();
DLL bool SetChannelVolume( IMMDevice*, UINT32, const float );
DLL UINT32 GetChannelCount( IMMDevice* );

enum Devices
{
    DEFAULT_PLAYBACK_DEVICE=1,
    DEFAULT_CAPTURE_DEVICE=2
};

///////////////////////////////////////////////////////////////////////////////
///
/// Function: DeserializeAudioDevice
///
/// @brief Convert a serialized reference to a playback or capture device to a
///        native pointer.
///
/// @param deviceType The serialized device reference to convert as an enumeration.
///
/// @return Native pointer to an IMMDevice object representing the deserialized
///         device.
///
///////////////////////////////////////////////////////////////////////////////          
static IMMDevice* DeserializeAudioDevice( Devices deviceType )
{
    switch ( deviceType )
    {
        case DEFAULT_PLAYBACK_DEVICE:
            return GetPlaybackDevice();
        case DEFAULT_CAPTURE_DEVICE:
            return GetCaptureDevice();
        default:
            std::cout << "Unknown audio device" << deviceType << "\n";
            return 0;
    }
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetPlaybackDeviceBinding
///
/// @brief Binding for the client code function GetPlaybackDevice.
///
/// @param arguments Not used.
///
/// @return Serialized reference to the default playback device.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( GetPlaybackDeviceBinding )
{
	UNREFERENCED_PARAMETER( arguments );
    return Devices::DEFAULT_PLAYBACK_DEVICE;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetCaptureDeviceBinding
///
/// @brief Binding for the client code function GetCaptureDevice.
///
/// @param arguments Not used.
///
/// @return Serialized reference to the default capture device.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( GetCaptureDeviceBinding )
{
	UNREFERENCED_PARAMETER( arguments );
    return Devices::DEFAULT_CAPTURE_DEVICE;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: SetChannelVolumeBinding
///
/// @brief Binding for SetChannelVolume from WinDriverTestAPI.dll
///
/// @param arguments a vector<string> of size 3 corresponding to the serialized
///                  audio device reference, the channel number and the volume to
///                  set.
///
/// @return -1 if arguments is malformed, else the normal return value of SetChannelVolume.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( SetChannelVolumeBinding )
{
    int returnValue = FAILURE;
    Devices deviceType;
    IMMDevice* device = 0;
    UINT32 channel;
    float volume;

    // Check number of arguments.
    if ( !MinimumNumberOfArguments( arguments, 3, "SetChannelVolume" ) )
    {
        goto done;
    }

    // Deserialize playback/capture device.
    deviceType = (Devices)IntegerFromString( arguments[0] );
    device = DeserializeAudioDevice( deviceType );
    if ( !device )
    {
        goto done;
    }
    
    // Unpack channel number
    channel = IntegerFromString( arguments[1] );

    // Unpack volume
    volume = FloatFromString( arguments[2] );

    returnValue = SetChannelVolume( device, channel, volume );
done:
    return returnValue;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetChannelCountBinding
///
/// @brief Binding for GetChannelCount from WinDriverTestAPI.dll.
///
/// @param arguments A vector<string> with at least 1 element, corresponding to
///                  a serialized device reference.
///
/// @return The number of channels available on the device specified by arguments.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( GetChannelCountBinding )
{
    int returnValue = FAILURE;
    IMMDevice* device = 0;
    Devices deviceType;

    // Check number of arguments.
    if ( !MinimumNumberOfArguments( arguments, 1, "GetChannelCount" ) )
    {
        goto done;
    }

    // Deserialize playback/capture device.
    deviceType = (Devices)IntegerFromString( arguments[0] );
    device = DeserializeAudioDevice( deviceType );
    if ( !device )
    {
        goto done;
    }

    returnValue = GetChannelCount( device );
done:
    return returnValue;
}

//////////////////////////// END OF FILE //////////////////////////////////////
