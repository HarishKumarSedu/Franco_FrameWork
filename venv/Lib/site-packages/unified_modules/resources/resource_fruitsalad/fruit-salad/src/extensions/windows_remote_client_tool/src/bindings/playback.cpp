////////////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
//
// This software as well as any related documentation is furnished under 
// license and may only be used or copied in accordance with the terms of the 
// license. The information in this file is furnished for informational use 
// only, is subject to change without notice, and should not be construed as 
// a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
// (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
// that may appear in this document or any software that may be provided in
// association with this document. 
//
// Except as permitted by such license, no part of this document may be 
// reproduced, stored in a retrieval system, or transmitted in any form or by 
// any means without the express written consent of Cirrus Logic International
// (UK) Ltd or affiliated companies. 
//
/// @file   playback.cpp
/// @brief  Bindings for DLL functions provided by playback.cpp of WinDriverTestAPI.
///
/// @version \$Id: playback.cpp 700 2015-01-13 14:13:21Z emmas $
///
/// @warning
///   This software is specifically written for Cirrus Logic devices.
///   It may not be used with other devices.
///
//////////////////////////////////////////////////////////////////////////////////
// Includes
//
#include "../stdafx.h"
#include "../functions.h"
#include "../bindings.h"

#include <algorithm>
#include <sstream>
#include <locale>
#include <codecvt>

using std::wstring;

// Client code declarations
DLL bool Playback( int, wstring, int );
DLL int GetMetroIdentifier();
DLL int GetWMPIdentifier();

///////////////////////////////////////////////////////////////////////////////
///
/// Function: PlaybackBinding
///
/// @brief Binding for Playback from WinDriverTestAPI.dll
///
/// @param arguments A vector<string> of size 3 or more. Element 0 corresponds 
//                   to the program identifier to use. Element 1 corresponds to
//                   the duration of the track to play and Elements 3+ correspond
//                   to the file name.
///
/// @return -1 if the playback program fails to launch or exist, else 1.
///
///////////////////////////////////////////////////////////////////////////////
BINDING( PlaybackBinding )
{
    int programIdentifier;
    int duration;
    std::wstringstream fileNameBuilder;
    wstring fileName;
    if ( !MinimumNumberOfArguments( arguments, 3, "Playback" ) )
    {
        goto failure;
    }

    // Unpack arguments
    programIdentifier = IntegerFromString( arguments[0] );
    duration = IntegerFromString( arguments[1] );
    // Unpack file name
    for_each( arguments.begin()+2, arguments.end(),
                [&fileNameBuilder](string element) {
                    if ( fileNameBuilder.gcount() > 0 )
                    {
                        fileNameBuilder << ' ';
                    }
					std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
					std::wstring wideElement = converter.from_bytes( element );
                    fileNameBuilder << wideElement;
                }
            );
    fileNameBuilder << '\0';
    fileName = fileNameBuilder.str();

    if ( Playback( programIdentifier, fileName, duration ) )
    {
        return true;
    }
failure:
    return false;
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetWMPIdentifierBinding
///
/// @brief Binding for GetWMPIdentifier in playback.cpp in WinDriverTestAPI.
///
/// @param arguments are not used.
///
/// @return The integer value of the enum used to identify Windows Media Player
///
///////////////////////////////////////////////////////////////////////////////
BINDING( GetWMPIdentifierBinding )
{
    UNREFERENCED_PARAMETER( arguments );
    return GetWMPIdentifier();
}

///////////////////////////////////////////////////////////////////////////////
///
/// Function: GetMetroIdentifierBinding
///
/// @brief Binding for GetMetroIdentifier in playback.cpp in WinDriverTestAPI.
///
/// @param arguments are not used
///
/// @return The integer value of the enum used to identify Metro Media Player
///
///////////////////////////////////////////////////////////////////////////////
BINDING( GetMetroIdentifierBinding )
{
    UNREFERENCED_PARAMETER( arguments );
    return GetMetroIdentifier();
}

/////////////////////////////////// END OF FILE ///////////////////////////////
