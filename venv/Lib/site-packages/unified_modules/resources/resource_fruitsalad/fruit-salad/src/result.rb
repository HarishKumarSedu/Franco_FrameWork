# encoding: utf-8
###############################################################################
###
### Copyright (c) 2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   result.rb
### @brief Implementation of return codes for fruit-salad API's
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################


#
# Class for Success status of an Fruit-salad methods.
#
class ResultSuccess
    SUCCESS = 0

    def initialize(data = nil)
        @data = data
    end

    def status_code
        SUCCESS
    end

    def data
        @data
    end

end

#
# Main class for Error format.
#
class ErrorFormat

    attr_accessor :status_code
    attr_accessor :error_code
    attr_accessor :error_message
    attr_accessor :back_trace

    def error_info
        return "#{@back_trace} \n#{@error_code} - #{@status_code} : #{@error_message}"
    end

    def to_s
        return "#{@back_trace} \n#{@error_code} - #{@status_code} : #{@error_message}"
    end

    def initialize(err_msg, bck_trace)
        @error_message = err_msg
        @back_trace = bck_trace[-3..-1].join("\n")
    end

    def format(error_code, codes)
        @error_code = error_code.to_sym
        @status_code = codes.fetch(error_code)
    end

end

#
# Class for Internal errors in an Fruit-salad methods
#
class InternalError < ErrorFormat

    @@codes = {
                     :UNSUPPORTED_ARGUMENTS => 100,
                     :OBJECT_NOT_INITIALIZED => 101
                 }

    def initialize(error_code, err_msg, bck_trace)
        format(error_code, @@codes)
        super( err_msg, bck_trace)
    end

end

#
# Class for API errors in Fruit-salad.
#
class APIError < ErrorFormat

    @@codes = {
                   :PORTAUDIO_SETUP_FAILED => 200,
                   :UNSUPPORTED_ANALOG_PLAYBACK => 201,
                   :UNSUPPORTED_ANALOG_REC => 202,
                   :UNSUPPORTED_DIGITAL_REC => 203,
                   :ANALOG_PLAYBACK_ERROR => 204,
                   :ANALOG_RECORD_ERROR => 205,
                   :UNSUPPORTED_PLAYBACK_TYPE => 206,
                   :UNSUPPORTED_RECORDING_TYPE => 207,
                   :UNSUPPORTED_DIGITAL_PLAYBACK => 208,
                   :TINYMIX_SET_PROP_ER => 209,
                   :TINYMIX_UNABLE_TO_SET_PROP => 210
                 }

    def initialize(error_code, err_msg, bck_trace)
        format(error_code, @@codes)
        super( err_msg, bck_trace)
    end

end

#
# Class for File system errors in Fruit-salad methods.
#
class FileSystemError < ErrorFormat

    @@codes = {
                     :FILE_NOT_FOUND => 301,
                     :FILE_OPEN_ERROR => 302
                 }

    def initialize(error_code, err_msg, bck_trace)
        format(error_code, @@codes)
        super( err_msg, bck_trace)
    end

end

#
# Class for Network errors in Fruit-salad methods.
#
class NetworkError < ErrorFormat

    @@codes = {
                     :HOST_CONNECTION_CLOSED => 401,
                     :SSH_TIME_OUT_ERROR => 402,
                     :UNKWN_SSH_ERROR => 403,
                }

    def initialize(error_code, err_msg, bck_trace)
        format(error_code, @@codes)
        super( err_msg, bck_trace)
    end

end