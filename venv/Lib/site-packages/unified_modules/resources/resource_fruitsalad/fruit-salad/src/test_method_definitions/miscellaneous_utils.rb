###############################################################################
###
### Copyright (c) 2017 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  miscellaneous_utils.rb
### @brief Routines for Binary operations.
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

require 'src/fruitsalad_utils'

############################################################################
# @Function convert_integer_array_to_byte_array
#
# Converts Integer Array to Byte Array.
#
# @param values [Integer Array] Array of Integer Values.
# @param register_length [Integer] Length of register in bits.
#
# @return [Byte Array] returns the converted Byte array.
#
#############################################################################

def convert_integer_array_to_byte_array( values, register_length )
    return FruitSaladUtils::integer_array_to_byte_array( values, register_length )
end

############################################################################
# @Function convert_byte_array_to_hex_array
#
# Converts Byte Array to Hex Array.
#
# @param values [Byte Array] Array of Byte Values.
# @param register_length [Integer] Length of register in bits.
#
# @return [Hex Array] returns the Hex array.
#
#############################################################################
def convert_byte_array_to_hex_array( values, register_length )
    return FruitSaladUtils::byte_array_to_hex_array(values, register_length )
end

#########################################################################
#
# @function is_output_bit_perfect_with_input?
#
# Compare the output with input or reference for bit-perfect.
# This comparison is done with excluding the ouput header.
#
# @param [String] file  The name of the input or reference file
# @param [String] file  The name of the output file
#
# @return [boolean] true if output is bit-perfect with input else false.
#
#########################################################################
def is_output_bit_perfect_with_input?(input_file, output_file)
    return FruitSaladUtils::is_bit_perfect?(input_file, output_file)
end

#########################################################################
#
# @function check_for_phase_alignment_between_available_channels
#
# COmpare whether the input file with multiple channels are in phase.
#
# @param [String] record_file_name  The name of the record file
#
# @return [boolean] true if the input file channels are in phase.
# Note:You need to install sox tool.
#
#########################################################################
def check_for_phase_alignment_between_available_channels( record_file_name )

    file_names = split_recorded_file_to_multiple_mono_files( record_file_name )
    silence_remove = false
    status = true
    for files in 1...file_names.length
        return_status = FruitSaladUtils::is_bit_perfect?( file_names[0], file_names[files], silence_remove )
        if !return_status
            status = return_status
        end
    end
    return status
end

#########################################################################
#
# @function split_recorded_file_to_multiple_mono_files
#
# Generates multiple mono channel files using input file with multiple channels.
#
# @param [String] orginal_file_name  The name of the input multi-channel file
#
# @return [array] Return array of output file names
# Note:You need to install sox tool.
#
#########################################################################
def split_recorded_file_to_multiple_mono_files( orginal_file_name )
    return FruitSaladUtils::split_input_file_to_multiple_mono_files( orginal_file_name )
end

############################################################################
# @Function remove_lead_and_trail_silence
#
# Removes lead and trail silence present in the input file.
#
# @param values [string] Input wav file.
#
# @return [nil]
#
#############################################################################
def remove_lead_and_trail_silence( wav_file )
    FruitSaladUtils::remove_lead_trail_silence( wav_file )
end