#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   testFruitSaladTargetClasses.rb
### @brief  Testing target classes support default and extended mechanisms as expected.
###
### @version \$Id: testFruitSaladTargetClasses.rb 544 2014-12-02 14:51:06Z aangus $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'targets/WindowsSalad.rb'
require 'targets/NullSalad.rb'

class TestFruitSaladTargetClasses < Test::Unit::TestCase

    def test_NullSalad
        salad_target = FruitSalad::NullSalad.new

        assert_respond_to( salad_target, :usecase_from_file, 'Failure to call :usecase_from_file' )
        assert_equal( nil, salad_target.usecase_from_file('nothing') )

        assert( salad_target.default_usecases.instance_of?( Array ), 'default_usecases should return an Array' )
        assert( salad_target.default_usecases.empty?, 'default_usecases should return empty by default' )
    end

    def test_WindowsSalad
        salad_target = FruitSalad::WindowsSalad.new

        assert_respond_to( salad_target, :usecase_from_file, 'Failure to call :usecase_from_file' )
        assert_equal( nil, salad_target.usecase_from_file('nothing') )

        assert( salad_target.default_usecases.instance_of?( Array ), 'default_usecases should return an Array' )
        assert( salad_target.default_usecases.empty?, 'default_usecases should return empty by default' )
    end



    # hacked to connect to the pi for now.
    def test_WindowsRemoteSalad
        Conf.set( :Remote_Address, '172.22.20.92' )
        Conf.set( :Remote_User, 'pi' )
        Conf.set( :Remote_Password, 'piFruitSalad' )

        require 'src/targets/WindowsRemoteSalad.rb'

        assert_equal( 'pi', Conf.property( :Remote_User, nil ) )

        salad_target = FruitSalad::WindowsRemoteSalad.new

        assert_respond_to( salad_target, :usecase_from_file, 'Failure to call :usecase_from_file' )
        assert_equal( nil, salad_target.usecase_from_file('nothing') )

        assert( salad_target.default_usecases.instance_of?( Array ), 'default_usecases should return an Array' )
        assert( salad_target.default_usecases.empty?, 'default_usecases should return empty by default' )
    end

end
################################### END OF FILE ###########################