################################################################################
### Copyright (c) 2016 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_power_supply.rb
### @brief  Testing 1688b DC power supply functionality.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
# Com port 3 is hard coded in dc_power1688b.ttl. if your machine alloted some
# other com port then change it in dc_power1688b.ttl under fruit-salad/bin/
# teraterm
# Install USB driver required for 1688b dc power supply.

gem 'test-unit'
require 'test/unit'
require_relative '../src/devices/power_supply.rb'

################################################################################
#
# Unit test for 1688b DC power supply functionality.
#
################################################################################
class TestDcpowersupply < Test::Unit::TestCase

    ############################################################################
    # @function test_voltage
    #
    # Verify that set_voltage_1688b method works plausibly.
    #
    # @param [float]  voltage is argument to set voltage. voltage range is 1 to 18
    #                 and it takes decimal till 1 place.
    #
    # @return none
    #
    ############################################################################
    def test_voltage
        voltage = 4
        ret = set_voltage_1688b(voltage)
        assert_equal(true, ret, 'voltage is not set properly')
    end

    ############################################################################
    # @function test_current
    #
    # Verify that set_current_1688b method works plausibly.
    #
    # @param [float] current is argument to set current. Current range is 0 to 20
    #                and it takes decimal till 1 place.
    #
    # @return none
    #
    ############################################################################
    def test_current
        current = 4.5
        ret = set_current_1688b(current)
        assert_equal(true, ret, 'current is not set properly')
    end

    ############################################################################
    # @function test_specific_volatge_and_Current
    #
    # Verify that set_specific_voltage_and_current_1688b method works plausibly.
    #
    # @param [float] voltage is argument to set voltage. voltage range is 1 to 18
    #                and it takes decimal till 1 place.
    #
    # @param [float] current is argument to set current. Current range is 0 to 20
    #                and it takes decimal till 1 place.
    #
    # @return none
    #
    ############################################################################
    def test_specific_volatge_and_current
        voltage = 3
        current = 2
        ret = set_specific_voltage_and_current_1688b(voltage, current)
        assert_equal(true, ret, 'voltage or current are not set properly')
    end

    ############################################################################
    # @function test_variable_voltage
    #
    # Verify that set_variable_voltage_1688b method works plausibly.
    #
    # @param [float]  initial_voltage Is intial voltage for variable voltage cycle.
    #                 initial_voltage range is 1 to 18 and it takes decimal till 1
    #                 place.
    #
    # @param [float]  final_voltage Is final voltage for variable voltage cycle.
    #                 final_voltage range is 1 to 18 and it takes decimal till 1
    #                 place.
    #
    # @param [float]  step_size Is step size for variable voltage cycle.Take its
    #                 value only till 1 decimal place.
    #
    # @param [float]  step_duration is the duration for which a perticular output
    #                 voltage remain in output pin of dc power supply.
    #                 step_duration is in seconds, you can set it as you want.
    #
    # @param [float]  const_current_value Is current that will remain constant for
    #                 whole variable voltage cycle. const_current_value range is
    #                 0 to 20 and it takes decimal till 1 place.
    #
    # @return none
    #
    ############################################################################
    def test_variable_voltage
        initial_voltage = 5
        final_voltage = 2
        step_size = 0.5
        step_duration = 2.5
        const_current_value = 4.5
        ret = set_variable_voltage_1688b(initial_voltage,
                                         final_voltage,
                                         step_size,
                                         step_duration,
                                         const_current_value)
        assert_equal(true, ret, 'voltage cycle is not run properly')
    end
end

################################### END OF FILE ################################
