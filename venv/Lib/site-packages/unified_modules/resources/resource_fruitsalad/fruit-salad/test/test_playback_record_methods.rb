################################################################################
### Copyright (c) 2016-2017 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International(UK) Ltd assumes no responsibility or liability for any errors
### or inaccuracies that may appear in this document or any software that may be
### provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_playback_record_methods.rb
### @brief  Tests of playback and record test method definitions.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/test_method_definitions/playback_record.rb'
require_relative '../src/test_method_definitions/target_operations.rb'

require 'configuration'
require 'fruitsalad_utils'

if __FILE__ == $0
    raise 'IP address not specified as argument' if ARGV.size < 1
end

# When test is executed individually with ip address as argument.
unless ARGV[0] =~ /.rb/
    $arg = ARGV[0]
# When test is invoked through rake file with ip address as argument.
else
    exit unless ENV['TARGET'] =~ /remote/i
    $arg = ENV['IP']
end

#######################################################################
# Class: TestPlaybackRecordMethods
#
# Test case for testing Playback and Record test method definitions.
#
#######################################################################
class TestPlaybackRecordMethods < Test::Unit::TestCase

    ###########################################################################
    #
    # @function create_remote_salad
    #
    # Creates an instance of RemoteSalad with a given configuration.
    #
    # @param [String] config  Path to a configuration file.
    # @param [String] user    Remote user name.
    # @param [String] address IP address of a remote system.
    #
    # @return [RemoteSalad] An instance of RemoteSalad.
    #
    ###########################################################################
    def create_remote_salad( config, user, address )
        Conf.set_source( config )
        Conf.set( :Remote_User, user )
        Conf.set( :Remote_Address, address )
        # has to be required _after_ loading configuration
        require 'src/targets/RemoteSalad'
        device = FruitSalad::get_device()
        raise 'Device not connected.' unless device.device_connected?
        return device
    end

    #######################################################################
    # @function test_playback_methods
    #
    # Testing test_playback_methods method:
    #
    # (no parameters)
    #
    #######################################################################
    def test_playback_methods
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux.yaml',
                                      'root',
                                      ip_address
                                    )
        device.setup

        background_play = false
        file_name = 'resources/utterance21_topright'
        channels = 1
        assert_raise do
            play_analog_data_from_host( file_name, background_play )
        end

        file_name = 'resources/utterance21_topright.wav'
        assert_nothing_raised do
            play_analog_data_from_host( file_name, background_play )
        end

        assert_nothing_raised do
            play_digital_data_from_host( file_name, channels, background_play )
        end

        background_play = true
        assert_nothing_raised do
            play_analog_data_from_host( file_name, background_play )
        end

        assert_nothing_raised do
            stop_playing_analog_data_from_host()
        end

        assert_nothing_raised do
            stop_playing_digital_data_from_host()
        end

        background_play = false
        file_path = '/tmp/fruitsalad'
        assert_nothing_raised do
            play_data_from_ap( file_name, file_path )
        end

        background_play = true
        assert_nothing_raised do
            play_data_from_ap( file_name, file_path, background_play )
        end

        wait_till_complete = true
        assert_nothing_raised do
            stop_playing_data_from_ap( wait_till_complete )
        end
    end

    #######################################################################
    # @function test_record_methods
    #
    # Testing test_record_methods method:
    #
    # It should correctly convert DSP string identifers into indicies.
    # Pass through already converted numbers.
    # Raise an exception if the specifier does not conform to the expected format.
    #
    # (no parameters)
    #
    #######################################################################
    def test_record_methods
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux.yaml',
                                      'root',
                                      ip_address
                                    )

        device.setup

        record_file_name = 'record_output.wav'
        sample_rate = 48000
        channels = 1

        assert_nothing_raised do
            start_recording_analog_data_at_host( record_file_name,
                                                 sample_rate,
                                                 channels
                                               )
        end

        assert_nothing_raised do
            stop_recording_analog_data_at_host()
        end

        record_samples = sample_rate * 10
        assert_nothing_raised do
            start_recording_digital_data_at_host( record_file_name,
                                                  sample_rate,
                                                  channels,
                                                  record_samples
                                                )
        end
        assert_nothing_raised do
            stop_recording_digital_data_at_host( record_file_name,
                                                 channels
                                               )
        end
    end

end
################################### END OF FILE ###########################
