################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   testFruitSaladBase.rb
### @brief  Tests of generic base FruitSalad Methods.
###
### @version \$Id: testFruitSaladBase.rb 716 2015-01-16 16:29:08Z aangus $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/fruitsalad_base.rb'

exit unless ENV['TARGET'].nil?

#######################################################################
# Class: TestFruitSaladBase
#
# Test case for the generic classes/methods in the FruitSaladBase module.
#
#######################################################################
class TestFruitSaladBase < Test::Unit::TestCase

    #######################################################################
    # @function test_extract_dsp_index
    #
    # Testing extract_dsp_index method:
    #
    # It should correctly convert DSP string identifers into indicies.
    # Pass through already converted numbers.
    # Raise an exception if the specifier does not conform to the expected format.
    #
    # (no parameters)
    #
    #######################################################################
    def test_extract_dsp_index
        device = FruitSaladBase::DeviceInterface.new()

        # string identifiers
        assert_equal( 0, device.extract_dsp_index( 'DSP1' ) )
        assert_equal( 1, device.extract_dsp_index( 'DSP2' ) )
        assert_equal( 2, device.extract_dsp_index( 'DSP3' ) )
        assert_equal( 3, device.extract_dsp_index( 'DSP4' ) )
        # case insensitive
        assert_equal( 0, device.extract_dsp_index( 'Dsp1' ) )
        assert_equal( 1, device.extract_dsp_index( 'dsP2' ) )
        assert_equal( 2, device.extract_dsp_index( 'dsp3' ) )
        assert_equal( 3, device.extract_dsp_index( 'dSp4' ) )
        # Large number
        assert_equal( 3999, device.extract_dsp_index( 'dsp4000' ) )
        # Integers
        assert_equal( 0, device.extract_dsp_index( 0 ) )
        assert_equal( 1, device.extract_dsp_index( 1 ) )
        assert_equal( 2, device.extract_dsp_index( 2 ) )
        assert_equal( 3, device.extract_dsp_index( 3 ) )
        # Incorrect DSP specifiers
        assert_raise('Invalid DSP core specifier.') do
            device.check_core_within_range( 'NOTACORE' )
        end
        assert_raise('Invalid DSP core specifier.') do
            device.check_core_within_range( 'Duck2' )
        end
        # Negative core number
        assert_raise('Negative core index.') do
            device.check_core_within_range( 'dsp-4' )
        end
    end
end
################################### END OF FILE ###########################
