#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2014 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies. 
###
### @file   testRemoteWinDriverTestAPI.rb
### @brief  Testing remote windows driver functionality.
###
### @version \$Id: testRemoteWinDriverTestAPI.rb 558 2014-12-03 16:55:34Z aangus $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

# require fruitsalad_env_setup first or paths will not be setup correctly.
require_relative '../src/fruitsalad_env_setup.rb'


################################################################
#  TestRemoteWinDriverTestAPI
#
# @note Test::Unit TestCase for the windows_remote execution
#       of WinDriverTestAPI functionality using the fruitsalad
#       player and daemon executables.
################################################################
class TestRemoteWinDriverTestAPI < Test::Unit::TestCase     
    ############################################################
    # setup code run before each test
    #
    # Start and setup a fresh daemon prior to each test.
    #
    # (no parameters)
    ############################################################
    def setup 
        @daemon = Thread.start do
            `bin\\fruitsalad_player_daemon.exe`                        
        end
        sleep( 1 )        
        `bin\\fruitsalad_player.exe set_up -p 2 -r 2 -s 44100 -b 2048`    
    end    
	
    ############################################################
    # teardown code run after each test
    #
    # Issue terminate command to the daemon 
    # wait for exit.
    #
    # (no parameters)
    ############################################################
    def teardown 
        `bin\\fruitsalad_player.exe terminate`    
        sleep( 1 )
        @daemon.join(1)        
    end
    
    ############################################################
    # Testing the codec_state command (workstation).
    # 
    # A workstation should not have access to a valid device.
    # In this instance the method should return:
    # [success]: 0
    # [CODEC_STATE]: 0
    #
    # i.e. the WinDriverTestAPI method call was unsuccessful 
    # and the codec_state remains undefined.
    #
    # (no parameters)
    ############################################################
    def test_codec_power_state_workstation
        out = `bin\\fruitsalad_player.exe codec_state`        
        md = out.match(%r{\[success\]: (\d+)})
        assert( md, 'Could not match [success]: data line in output.' )        
        assert_equal( 0, md[1].to_i, 'from a workstation this call should be unsuccessful' )
        
        md = out.match(%r{\[CODEC_STATE\]: (\d+)})
        assert( md, 'Could not match [CODEC_STATE]: data line in output.' )
        # on the windows platform this should remain in the undefined (0) state.
        assert_equal( 0, md[1].to_i, 'from a workstation the codec_state should return undefined (0)' )
    end
end
################################### END OF FILE ###############################