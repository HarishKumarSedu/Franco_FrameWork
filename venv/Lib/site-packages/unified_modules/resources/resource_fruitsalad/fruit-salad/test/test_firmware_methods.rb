################################################################################
### Copyright (c) 2016-2017 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International(UK) Ltd assumes no responsibility or liability for any errors
### or inaccuracies that may appear in this document or any software that may be
### provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_firmware_methods.rb
### @brief  Tests of firmware test methods definitions.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/test_method_definitions/firmware.rb'
require_relative '../src/test_method_definitions/target_operations.rb'

require 'configuration'
require 'fruitsalad_utils'

if __FILE__ == $0
    raise 'IP address not specified as argument' if ARGV.size < 1
end

# When test is executed individually with ip address as argument.
unless ARGV[0] =~ /.rb/
    $arg = ARGV[0]
# When test is invoked through rake file with ip address as argument.
else
    exit unless ENV['TARGET'] =~ /remote/i
    $arg = ENV['IP']
end

#######################################################################
# Class: TestFirmwareMethods
#
# Test case for testing Firmware test method definitions.
#
#######################################################################
class TestFirmwareMethods < Test::Unit::TestCase

    ###########################################################################
    #
    # @function create_remote_salad
    #
    # Creates an instance of RemoteSalad with a given configuration.
    #
    # @param [String] config  Path to a configuration file.
    # @param [String] user    Remote user name.
    # @param [String] address IP address of a remote system.
    #
    # @return [RemoteSalad] An instance of RemoteSalad.
    #
    ###########################################################################
    def create_remote_salad( config, device_config, user, address )
        Conf.set_source( config )
        Conf.set_source( device_config, device_yaml = true )
        Conf.set( :Remote_User, user )
        Conf.set( :Remote_Address, address )
        # has to be required _after_ loading configuration
        require 'src/targets/RemoteSalad'
        device = FruitSalad::get_device()
        raise 'Device not connected.' unless device.device_connected?
        return device
    end

    #######################################################################
    # @function test_firmware_methods
    #
    # Testing test_firmware_methods method:
    #
    # (no parameters)
    #
    #######################################################################
    def test_firmware_methods
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux.yaml',
                                      'configs/moon_device.yaml',
                                      'root',
                                      ip_address
                                    )
        device.setup

        codec_name = Conf.property( :CodecName, 'moon' )        # Get the codec name
        usecase_path = Conf.property( :UsecasePath, 'targets/arndale_linux_usecases/' )
        usecase_path = File.join( ENV['FRUITSALAD_HOME'], "#{usecase_path}#{codec_name}" )
        destination_path = Conf.property( :Remote_TempDir, '/tmp/fruitsalad/' )

        # Copy the binary file to run on target platform
        bin_file = Conf.property( :SaladMix_Binary, 'arm-linux-gnueabihf-saladmix' )
        bin_file_path = File.join( ENV['FRUITSALAD_HOME'], 'bin/' )
        is_executable = true
        saladmix_binary = true
        copy_file( destination_path, bin_file_path, bin_file, is_executable, saladmix_binary )

        # load the SCC usecase file into target platform
        usecase_file = Conf.property( :Reset_All, nil )
        load_routing_file( destination_path, usecase_path, usecase_file )

        # load the SCC usecase file into target platform
        usecase_file = Conf.property( :SCC_Reset, nil )
        load_routing_file( destination_path, usecase_path, usecase_file )

        firmware_dsp_core = Conf.property( :SCC_Firmware_core, nil )
        firmware_id = Conf.property( :SCC_Firmware_ID, nil )
        firmware_ctrl_name = Conf.property( :SCC_Firmware_Ctrl_Name, nil )

        assert_raise do
            verify_firmware_running( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

        assert_raise do
            verify_firmware_loaded( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

        # load the SCC usecase file into target platform
        usecase_file = Conf.property( :SCC_Usecase, nil )
        load_routing_file( destination_path, usecase_path, usecase_file )

        assert_nothing_raised do
            verify_firmware_loaded( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

        assert_nothing_raised do
            verify_firmware_running( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

        firmware_dsp_core = nil
        firmware_id = nil
        firmware_ctrl_name = nil

        assert_raise do
            verify_firmware_loaded( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

        assert_raise do
            verify_firmware_running( firmware_dsp_core, firmware_ctrl_name, firmware_id )
        end

    end
end
################################### END OF FILE ###########################
