###############################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.
###                    All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic
### International (UK) Ltd assumes no responsibility or liability for any
### errors or inaccuracies that may appear in this document or any software
### that may be provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_soundclear_control_wisce.rb
### @brief  TestCase for unit-testing the SoundClearControlForWISCE class.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###############################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'configuration'

unless ENV['TARGET'].nil?
    exit unless ENV['TARGET'] =~ /wisce/i
end

###############################################################################
#
# Tests for the SoundclearControl for Wisce ruby implementation.
#
###############################################################################
class TestSoundClearControlForWISCE < Test::Unit::TestCase

    @@device = ENV['DEVICE']
    if( @@device.nil? || @@device == 'clwr' )
        @@device = 'clwr'
        config_file = 'configs/clwr_wisce_conf.yaml'
    elsif( @@device == 'florida' )
        config_file = 'configs/florida_wisce_conf.yaml'
    else
        raise 'Not a valid device to test'
    end

    puts "Device : #{@@device}"
    Conf::set_source( config_file )
    require_relative "#{ENV['FRUITSALAD_HOME']}/src/targets/WISCESalad.rb"

    ###########################################################################
    # @function run_SCC
    #
    # Loads SCC specified revision firmware and starts running
    #
    # @param [String] revision Revision of SCC firmware.
    #
    ###########################################################################
    def run_SCC( revision )

        @wisce = FruitSalad.get_device()
        @wisce.setup

        algo_name = 'Ez2 Control'
        autorun = true

        firmware_data = Conf::get_firmware_data( @wisce.device_id,
                                                 @wisce.hw_revision,
                                                 algo_name,
                                                 revision
                                               )
        dsp_core = firmware_data.fetch( 'core', nil )
        dsp_index = @wisce.extract_dsp_index( dsp_core )

        @wisce.soundclear_control.load( dsp_index,
                                        autostart:autorun,
                                        firmware_revision:revision
                                      )
    end

    ###########################################################################
    # @function test_SCC30_buffer_test
    #
    # Checks SC control 3.0 buffer test functionality.
    #
    # @param [Boolean] status Parameter to invoke the unit test
    #
    ###########################################################################
    def test_SCC30_buffer_test( status )

        puts "test_SCC30_buffer_test"
        success = 0
        error = -1

        revision = '3.0'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.usecase_from_file( 'Clearwater_3.0_settings' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/Hi_Galaxy_NotEnrolled_Clearwater.wav'
        status = @wisce.soundclear_control.buffer_test( test_file,
                                                        nil
                                                      )
        assert_equal( status, success, 'Buffer test is failing' )
    end

    ###########################################################################
    # @function test_SCC30_buffer_test_stream_types
    #
    # Checks SC control 3.0 buffer test functionality for different stream
    # types.
    #
    # @param [Boolean] status Parameter to invoke the unit test
    #
    ###########################################################################
    def test_SCC30_buffer_test_stream_types( status )

        puts "test_SCC30_buffer_test_stream_types"
        success = 0
        error = -1

        type = 'uncompressed'
        revision = '3.0'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.usecase_from_file( 'Clearwater_3.0_settings' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/Hi_Galaxy_NotEnrolled_Clearwater.wav'
        status = @wisce.soundclear_control.buffer_test( test_file,
                                                        nil,
                                                        type: type
                                                      )
        assert_equal( status, success, 'Buffer test is failing' )

        type = 'unknown'
        revision = '3.0'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.usecase_from_file( 'Clearwater_3.0_settings' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/Hi_Galaxy_NotEnrolled_Clearwater.wav'
        assert_raise do
            status = @wisce.soundclear_control.buffer_test( test_file,
                                                            nil,
                                                            type: type
                                                          )
        end
    end

    ###########################################################################
    # @function test_SCC25_buffer_test
    #
    # Checks SC control 2.5 buffer test functionality.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_SCC25_buffer_test

        puts "test_SCC25_buffer_test"
        success = 0
        error = -1

        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        status = @wisce.soundclear_control.buffer_test( test_file,
                                                        nil
                                                      )
        assert_equal( status, success, 'Buffer test is failing' )
    end

    ###########################################################################
    # @function test_SCC25_buffer_test_phrase_actions
    #
    # Checks SC control 2.5 buffer test functionality for different phrase
    # actions.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_SCC25_buffer_test_phrase_actions

        puts "test_SCC25_buffer_test_phrase_actions"
        success = 0
        error = -1

        action = 'exclude'
        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        status = @wisce.soundclear_control.buffer_test( test_file,
                                                        nil,
                                                        action: action
                                                      )
        assert_equal( status, success, 'Buffer test is failing' )

        action = 'unknown'
        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        assert_raise do
            status = @wisce.soundclear_control.buffer_test( test_file,
                                                            nil,
                                                            action: action
                                                          )
        end
    end

    ###########################################################################
    # @function test_SCC25_buffer_test_stream_types
    #
    # Checks SC control 2.5 buffer test functionality for different stream
    # types.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_SCC25_buffer_test_stream_types

        puts "test_SCC25_buffer_test_stream_types"
        success = 0
        error = -1

        type = 'uncompressed'
        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        status = @wisce.soundclear_control.buffer_test( test_file,
                                                        nil,
                                                        type: type
                                                      )
        assert_equal( status, success, 'Buffer test is failing' )

        type = 'unknown'
        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        assert_raise do
            status = @wisce.soundclear_control.buffer_test( test_file,
                                                            nil,
                                                            type: type
                                                          )
        end
    end

    ###########################################################################
    # @function test_soundclear_control_tests
    #
    # Checks supported soundclear control tests.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_soundclear_control_tests

        status = 0
        puts "test_soundclear_control_tests"
        if( @@device == 'clwr' )
            #test_SCC30_buffer_test( status )
            #test_SCC30_buffer_test_stream_types( status )
        end
    end

    ###########################################################################
    # @function test_read_sv_score
    #
    # Checks svscore reading functionality.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_read_sv_score
        revision = '2.5'
        run_SCC( revision )
        @firmware_id = 'SENSORY_ALGORITHM_SENSORY_PID_SVSCORE'
        @wisce.write_element_value( @firmware_id, 0x100 )
        actual_value =@wisce.soundclear_control.read_svscore
        expected_value = 256
        assert_equal( actual_value, expected_value, 'Actual value does not match with expected value' )
        @wisce.write_element_value( @firmware_id, 100 )
        actual_value = @wisce.soundclear_control.read_svscore
        expected_value = 100
        assert_equal( actual_value, expected_value, 'Actual value does not match with expected value' )
    end

    ###########################################################################
    # @function test_SCC25_measure_buffer_read_time
    #
    # Checks SC control 2.5 buffer read time functionality.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_SCC25_measure_buffer_read_time

        success = 0
        error = -1

        revision = '2.5'
        run_SCC( revision )

        @wisce.usecase_from_file( 'soundclear_control_no_sad' )
        @wisce.soundclear_control.clear_irq

        test_file = 'resources/bluegeenie7.wav'
        status = @wisce.soundclear_control.measure_time( test_file )
        assert_equal( status, success, 'measuring of buffer read time is failing ' )

        read_time = @wisce.soundclear_control.time_taken
        assert( read_time < 3, 'time taken to read buffer was more than 3 seconds' )
    end
end

################################### END OF FILE ###############################
