################################################################################
### Copyright (c) 2016-2017 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd. Cirrus Logic
### International(UK) Ltd assumes no responsibility or liability for any errors
### or inaccuracies that may appear in this document or any software that may be
### provided in association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_target_operation_methods.rb
### @brief  Tests of target operations test method definitions for VEGA.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################

# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/test_method_definitions/target_operations.rb'

require 'configuration'
require 'fruitsalad_utils'

if __FILE__ == $0
    raise 'IP address not specified as argument' if ARGV.size < 1
end

# When test is executed individually with ip address as argument.
unless ARGV[0] =~ /.rb/
    $arg = ARGV[0]
# When test is invoked through rake file with ip address as argument.
else
    exit unless ENV['TARGET'] =~ /remote/i
    $arg = ENV['IP']
end

#######################################################################
# Class: TestTargetOperationMethodsVega
#
# Test case for testing target operations test method definitions for VEGA.
#
#######################################################################
class TestTargetOperationMethodsVega < Test::Unit::TestCase

    ###########################################################################
    #
    # @function create_remote_salad
    #
    # Creates an instance of RemoteSalad with a given configuration.
    #
    # @param [String] config  Path to a configuration file.
    # @param [String] user    Remote user name.
    # @param [String] address IP address of a remote system.
    #
    # @return [RemoteSalad] An instance of RemoteSalad.
    #
    ###########################################################################
    def create_remote_salad( config, user, address )
        Conf.set_source( config )
        Conf.set( :Remote_User, user )
        Conf.set( :Remote_Address, address )
        # has to be required _after_ loading configuration
        require 'src/targets/RemoteSalad'
        device = FruitSalad::get_device()
        raise 'Device not connected.' unless device.device_connected?
        return device
    end

    #######################################################################
    # @function test_target_operation_methods
    #
    # Testing test_target_operation_methods method:
    #
    # (no parameters)
    #
    #######################################################################
    def test_target_operation_methods
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux_vega.yaml',
                                      'root',
                                      ip_address
                                    )

        assert_nothing_raised do
            connect_to_target()
        end

        # Copy the binary file to run on target platform
        assert_nothing_raised do
            file_path = File.join( ENV['FRUITSALAD_HOME'], 'bin/' )
            file_name = "vega_fwupdate.fwu"
            remote_dir = "/lib/firmware/"
            is_executable = true
            saladmix_binary = false
            destination_file = "cs48lx50-fwu.bin"
            copy_file( remote_dir,
                       file_path,
                       file_name,
                       is_executable,
                       saladmix_binary,
                       destination_file:destination_file
                     )
        end

        # loading modules
        modules = [ 'cs48lx50_spi', 'snd_soc_lochnagar_audio', 'snd_soc_cs48lx50_codec', 'snd_soc_tacna']
        enumerate = true
        assert_nothing_raised do
            load_modules(modules, enumerate:enumerate )
        end

        # Reading all ALSA controls
        assert_nothing_raised do
            value = read_controls()
        end

        # Reading value from control
        assert_nothing_raised do
            key = "EQ1 Input 1 Volume"
            value = read_mixer_property( key )
        end

        # Unloading modules
        modules = [ 'snd_soc_lochnagar_audio', 'snd_soc_cs48lx50_codec', 'snd_soc_tacna', 'cs48lx50_spi']
        assert_nothing_raised do
            unload_modules(modules)
        end

        # Reading value from control
        assert_raise do
            key = "EQ1 Input 1 Volume"
            value = read_mixer_property( key )
        end

        # Reading all ALSA controls
        assert_raise do
            value = read_controls()
        end
    end
end

################################### END OF FILE ###########################
