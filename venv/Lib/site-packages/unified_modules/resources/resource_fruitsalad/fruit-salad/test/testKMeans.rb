###############################################################################
###
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   testKMeans.rb
### @brief  Unit testing for the KMeans classification implementation.
###
### @version \$Id: testKMeans.rb 1067 2015-06-15 10:25:31Z aangus $
###
### @warning
###    This software is specifically written for Cirrus Logic devices.
###    It may not be used with other devices.
###
###############################################################################

gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'KMeans'

exit unless ENV['TARGET'].nil?

###############################################################################
#
# Unit tests for the K-Means algorithm object.
#
###############################################################################
class TestKMeans < Test::Unit::TestCase

    ###########################################################################
    #
    # @function setup
    #
    # Create a KMeans object as a test fixture for each test.
    #
    # (no parameters)
    #
    ###########################################################################
    def setup
        @fixture = KMeans.new
    end

    ###########################################################################
    #
    # @function test_convergeance_on_single_datapoint
    #
    # Register a single data-point and add a single centroid. No-matter what
    # the centroid seed is, the centroid will converge on the data-points
    # location.
    #
    # (no paramters)
    #
    ###########################################################################
    def test_convergeance_on_single_datapoint
        @fixture.add_data_points( [10, 10] )
        @fixture.add_centroid( 0, 0 )
        @fixture.iterate
        assert_equal( [10, 10], @fixture.centroids[0] )
    end

    ###########################################################################
    #
    # @function test_convergeance_on_two_datapoints
    #
    # Place two datapoints and a centroid on each data-point. The centroids will
    # not diverge from those positions.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_convergeance_on_two_datapoints
        @fixture.add_data_points( [0, 0, 5], [0, 0, 10] )
        @fixture.add_centroid( 0, 0, 5 )
        @fixture.add_centroid( 0, 0, 10 )
        @fixture.iterate 10
        assert_equal( [0, 0, 5], @fixture.centroids[0] )
        assert_equal( [0, 0, 10], @fixture.centroids[1] )
    end

end

################################ END OF FILE ##################################
