# encoding: utf-8
################################################################################
### Copyright (c) 2015-2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  test_remote_salad.rb
### @brief Tests for RemoteSalad.
### @note  These tests are written with the assumption that the remote system
###        is an Arndale (running Android) equipped with a WM8280 codec.
###
### @version \$Id: test_remote_salad.rb 951 2015-03-16 17:00:14Z piotrs $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
################################################################################
gem 'test-unit'
require 'test/unit'
require_relative "../src/fruitsalad_env_setup.rb"
require 'configuration'
require 'fruitsalad_utils'

if __FILE__ == $0
    raise 'IP address not specified as argument' if ARGV.size < 1
end

# When test is executed individually with ip address as argument.
unless ARGV[0] =~ /.rb/
    $arg = ARGV[0]
# When test is invoked through rake file with ip address as argument.
else
    exit unless ENV['TARGET'] =~ /remote/i
    $arg = ENV['IP']
end

class TestRemoteSalad < Test::Unit::TestCase
    include FruitSaladUtils

    ###########################################################################
    #
    # @function create_remote_salad
    #
    # Creates an instance of RemoteSalad with a given configuration.
    #
    # @param [String] config  Path to a configuration file.
    # @param [String] user    Remote user name.
    # @param [String] address IP address of a remote system.
    #
    # @return [RemoteSalad] An instance of RemoteSalad.
    #
    ###########################################################################
    def create_remote_salad( config, user, address )
        Conf.set_source( config )
        Conf.set( :Remote_User, user )
        Conf.set( :Remote_Address, address )
        # has to be required _after_ loading configuration
        require 'src/targets/RemoteSalad'
        device = FruitSalad::get_device()
        raise 'Device not connected.' unless device.device_connected?
        return device
    end

    ###########################################################################
    #
    # @function test_mixer_settings
    #
    # Runs a series of tests related to setting and reading mixer controls.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_mixer_settings
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux.yaml',
                                      'root',
                                      ip_address
                                    )
        device.setup

        # test whether simple enum controls get set correctly
        device.set_mixer_property 'HPOUT1L Input 1', 'IN1L'
        value = device.mixer_property 'HPOUT1L Input 1'
        assert_equal( 'IN1L', value )
        device.set_mixer_property 'DSP6 Firmware', 'Voice Ctrl'
        value = device.mixer_property 'DSP6 Firmware'
        assert_equal( 'Voice Ctrl', value )

        # test whether a 'switch' control gets set correctly
        device.set_mixer_property 'HPOUT1 Digital Switch', 'Off Off'
        value = device.mixer_property 'HPOUT1 Digital Switch'
        value = value.gsub( /HPOUT1 Digital Switch:/, '' ).strip!
        assert_equal( 'Off Off', value )

        # test whether a multivalued byte control gets set correctly
        device.set_mixer_property 'DRC2',
                            '0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00'
        value = device.mixer_property 'DRC2'
        value = value.gsub( /DRC2:/, '' )
        assert_equal( '0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00',
                      value
                    )

        # test whether 'set at offset' works correctly
        device.set_mixer_property 'DRC2',
                            '0x00 0x00 0x09 0x33 0x00 0x18 0x00 0x00 0x00 0x00'
        device.set_mixer_property 'DRC2', '0x18', 1
        value = device.mixer_property 'DRC2'
        value = value.gsub( /DRC2:/, '' )
        assert_equal( '0x00 0x18 0x09 0x33 0x00 0x18 0x00 0x00 0x00 0x00',
                      value
                    )

        # test whether exceptions are raised when invalid data is provided
        assert_raise RuntimeError do
            device.set_mixer_property 'asd', 'asd'
        end
        assert_raise RuntimeError do
            device.mixer_property 'asd'
        end
        assert_raise RuntimeError do
            device.set_mixer_property 'DSP3 Firmware', 'Ez2RaiseException'
        end
    end


    ############################################################################
    # @function test_write_memory_value
    #
    # It is used to test the write to memory function means writing the values
    # into the register and read back the value from the same register and compare
    # it with the written value.Both should be equal.
    #
    # ( no parameters )
    #
    ############################################################################
    def test_write_memory_value
        ip_address = $arg
        device = create_remote_salad( 'configs/arndale_linux.yaml',
                                      'root',
                                      ip_address
                                    )
        device.setup
        #Testing with moon codec input enable register
        input_rate_reg_address = 776
        value = Array[40,50]
        device.write_block_data( input_rate_reg_address.to_s(16),value, bytes = 4, 16 )
        input_rate_reg_address = 776
        ret = device.read_memory_value( input_rate_reg_address.to_s(16), 2, 16 )
        assert_equal( '0040', ret )
        input_volume_ramp_reg_address = 777
        ret = device.read_memory_value( input_volume_ramp_reg_address.to_s(16), 2, 16 )
        assert_equal( '0050', ret )
    end

end
##############################END OF FILE######################################
