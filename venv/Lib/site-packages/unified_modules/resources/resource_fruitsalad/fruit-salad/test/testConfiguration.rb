#!/usr/bin/ruby
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   testConfiguration.rb
### @brief  TestCase for Configuration loading, especially firmware data
###
### @version \$Id: testConfiguration.rb 952 2015-03-17 10:43:24Z emmas $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'configuration'
require 'defaults'

exit unless ENV['TARGET'].nil?

#######################################################################
#
# Automated testing for patching the default firmware data instead of overwriting
# it utterly.
#
#######################################################################
class TestConfiguration < Test::Unit::TestCase

    include Defaults # Defines @@firmware

    ###########################################################################
    #
    # Load the default configuration and verify that our defaults are intact
    #
    ###########################################################################
    def test_load_defaults
        fixture = Conf.new
        assert_equal( 48000, fixture.dict["SampleRate"], "Default sample rate should be 48000" )
        assert_equal(
            @@firmware[KEY_DEVICE_ID_FLORIDA]["Ez2 Control"]["id"],
            fixture.dict["Firmware"][KEY_DEVICE_ID_FLORIDA]["Ez2 Control"]["id"],
            "Firmware id for Ez2 Control should match default value."
        )
    end

    ###########################################################################
    #
    # Load a configuration file which overwrites the id string for Ez2 Control.
    #
    ###########################################################################
    def test_overwrite_defaults
        Conf::set_source 'configs/measure_snr_multimic.yaml'
        fixture = Conf.new
        assert_not_equal(
            @@firmware[KEY_DEVICE_ID_FLORIDA]["Ez2 Control"]["id"],
            fixture.dict["Firmware"]["Ez2 Control"]["id"],
            "Firmware id for Ez2 Control should not match the default value."
        )
    end

    ###########################################################################
    #
    # Unit test for the functionality needed to merge two Hash objects together.
    #
    ###########################################################################
    def test_merge_defaults_into_map
        fixture = Conf.new
        a = { a: 1, b: 1, c: 1, d: { a: false, b: true }, e: {} }
        b = { b:2, c: 3, d: { a: true }, e: true }

        merged = fixture.merge_defaults_into_map( b, a )

        assert_equal( merged[:a], 1 )
        assert_equal( merged[:b], 2 )
        assert_equal( merged[:c], 3 )
        assert_true( merged[:d][:a] )
        assert_true( merged[:d][:b] )
        assert_true( merged[:e] )

    end

    ###########################################################################
    #
    # Unit test for get_firmware_data.
    #
    ###########################################################################
    def test_get_firmware_data
        firmware = Conf.get_firmware_data( DEVICE_ID_FLORIDA, 0, "Ez2 Control", nil )
        assert_equal( firmware.fetch( "id"),
                          "FIRMWARE_FLORIDA_EZ2CONTROL",
                          "Firmware ID for Florida should match")

        firmware = Conf.get_firmware_data( DEVICE_ID_CLEARWATER, 2, "Ez2 Control", nil )
        assert_equal( firmware.fetch( "id"),
                          "FIRMWARE_CLWR_EZ2CONTROL",
                          "Firmware ID for Clearwater should match")

        firmware = Conf.get_firmware_data( DEVICE_ID_CLEARWATER, 2, "Ez2 Control", "3.0" )
        assert_equal( firmware.fetch( "id"),
                          "FIRMWARE_CLWR_EZ2CONTROL30",
                          "Firmware ID for Clearwater should match")

        assert_raise do
           firmware = Conf.get_firmware_data( 1234, 3, "Ez2NotExist", nil )
        end
    end
end
################################### END OF FILE ###########################
