# encoding: utf-8
###########################################################################
### Copyright (c) 2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  testWISCESimulatedSystem.rb
### @brief Tests for WISCESalad.
### @note  TestCase for WISCE Simulated System.
###
###
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
###########################################################################
# Requirements : There must be WM8280 Device file and
#                 florida_dsp3_Ez2Control_001700.wmfw Firmware File
#                 in Wolfson Folder
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup'
require 'logfw'
require 'test_method_definitions/setup_target'
require 'test_method_definitions/target_operations'
require 'test_method_definitions/firmware'

exit unless ENV['TARGET'].nil?

class TestWISCESimulatedSystem < Test::Unit::TestCase

    ###########################################################################
    #
    #    @function create_simulated_system
    #
    #    Creates an instance of WISCESalad
    #
    ###########################################################################
    def create_simulated_system
        Conf.set_source( 'configs/wisce_config_simulated.yaml' )
        SetupTarget.new( 'WISCE' )
        connect_to_target
    end

    ###########################################################################
    #
    #    @function reset_current_device
    #
    #    Reset the current connected Device.
    #
    ###########################################################################
    def reset_current_device
        device_name = get_device_name()
        reset_device( device_name )
    end

    ###########################################################################
    #
    #    @function testLoadFirmware
    #
    #        Loads Firmware on Simulated System and verifies whether it is loaded
    #        or not.
    #
    ###########################################################################
    def testLoadFirmware
        create_simulated_system
        reset_current_device
        @firmware_file = Conf.property('Firmware_File',nil)
        @dsp_core_index = Conf.property('Core_index',nil)
        @firmware_algorithm = Conf.property('Firmware_Algo',nil)
        status = load_firmware( @firmware_file ,@dsp_core_index )
        verify_firmware_loaded([@dsp_core_index],@firmware_algorithm,nil)
    end

    ###########################################################################
    #
    #   @function testStartCore
    #
    #   Start the core on which firmware is loaded and checks if that core is
    #   running.
    #
    ###########################################################################
    def testStartCore
        start_core( @dsp_core_index )
        check_if_core_is_running( @dsp_core_index )
    end

    ###########################################################################
    #
    #   @function test_get_default_register_value
    #
    #   Reads the default value of the mentioned Register.
    #
    ###########################################################################
    def test_get_default_register_value
        dsp3_control_val = get_register_default_value('DSP3 Control 1')
        $LOG.debug "Default value of DSP3 Control 1 is #{dsp3_control_val}"
    end

    ###########################################################################
    #
    #   @function test_set_register_value
    #
    #   Writes a value to Register.
    #
    ###########################################################################
    def test_set_register_value
        write_register_by_name('DSP3 Control 1',"0001")
    end
end