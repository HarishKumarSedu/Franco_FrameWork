#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under 
### license and may only be used or copied in accordance with the terms of the 
### license. The information in this file is furnished for informational use 
### only, is subject to change without notice, and should not be construed as 
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document. 
###
### Except as permitted by such license, no part of this document may be 
### reproduced, stored in a retrieval system, or transmitted in any form or by 
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies. 
###
### @file   testAntBuild.rb
### @brief  Script for checking the Ant build.xml script works as intended.
###
### @version \$Id: testAntBuild.rb 962 2015-03-18 14:59:38Z aangus $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

#######################################################################
#
# @note TestCase for the Ant build.xml script.
#
#######################################################################
class TestAntBuild < Test::Unit::TestCase     
    #######################################################################
    # @function setup
    #
    # @note Clean the build using ant each time
    #
    # (no parameters)
    #######################################################################
    def setup
        system('ant.bat clean')
    end    
    
    #######################################################################
    # @function test_docs
    #
    # @note Test documentation generation using doxygen and yard
    #
    # (no parameters)
    #######################################################################
    def test_docs
        system('ant.bat docs')
        assert( File.exists?('documentation_output') )    
        assert( File.exists?('documentation_output/yard') )    
        assert( File.exists?('documentation_output/html') )    
    end
    
    #######################################################################
    # @function test_linux_archive
    #
    # @note Test creation of the Linux archive
    #
    # (no parameters)
    #######################################################################
    def test_linux_archive        
        assert( !File.exists?('linux_archive') )
        system('ant.bat docs')
        system('ant.bat LinuxArchive')
        assert( File.exists?('linux_archive') )
        
        dll_files = Dir::glob( "linux_archive/FruitSalad/lib/*.dll" )
        assert_equal( 0, dll_files.length, "there should be no dlls in the linux archive" )   
        
        # these should really be built by the linux/remote target as required
        assert( File.exists?('linux_archive/FruitSalad/lib/libfft.arm.so') )    
        assert( File.exists?('linux_archive/FruitSalad/lib/libfft.x86.so') )    
        
        release_dirs = Dir::glob( "release_*" )
        assert_equal( 1, release_dirs.length )
        tar_files = Dir::glob( "#{release_dirs.first}/*.tar.gz" )
        assert_equal( 1, tar_files.length )   
    end

    #######################################################################
    # @function test_installer
    #
    # @note Test creation of the Windows installer using installAware
    #
    # (no parameters)
    #######################################################################
    def test_installer
        system('ant.bat installer')
        release_dirs = Dir::glob( "release_*" )
        assert_equal( 1, release_dirs.length, 'Failed to find single release directory' )
        exe_files = Dir::glob( "#{release_dirs.first}/*.exe" )
        assert_equal( 1, exe_files.length, 'Failed to find single exe installer' )                
    end
    
    #######################################################################
    # @function test_windows_archive
    #
    # @note Test creation of the Windows archive.
    #
    # (no parameters)
    #######################################################################
    def test_windows_archive        
        assert( !File.exists?('windows_archive') )
        system('ant.bat ocra')
        system('ant.bat docs')
        system('ant.bat WindowsArchive')
        assert( File.exists?('windows_archive') )
        assert( File.exists?('windows_archive/FruitSalad') )
        assert( File.exists?('windows_archive/FruitSalad/bin') )
        assert( File.exists?('windows_archive/FruitSalad/lib') )   
        assert( File.exists?('windows_archive/FruitSalad/src') )        
        assert( File.exists?('windows_archive/FruitSalad/targets') )        
        
        check_archive_resources_directory( 'windows_archive/FruitSalad/resources' )
        
        # copied dirs but to different named locations
        assert( File.exists?('windows_archive/FruitSalad/docs') )        
        assert( File.exists?('windows_archive/FruitSalad/features') )        
        
        # copied files
        assert( File.exists?('windows_archive/FruitSalad/Gemfile') )        
        assert( File.exists?('windows_archive/FruitSalad/Online documentation.url') )        
        assert( File.exists?('windows_archive/FruitSalad/fruitsalad.rb') )                
        assert( File.exists?('windows_archive/FruitSalad/fruitsalad.exe') )                
        
        release_dirs = Dir::glob( "release_*" )
        assert_equal( 1, release_dirs.length )
        zip_files = Dir::glob( "#{release_dirs.first}/*.zip" )
        assert_equal( 1, zip_files.length )                
    end
    
    #######################################################################
    # @function check_archive_resources_directory
    #
    # Checks that the resources archive created does not contain any sub-directories.
    #
    # @param [String] resources_dir path of the resources directory to check.
    #
    #######################################################################
    def check_archive_resources_directory( resources_dir )
        assert( File.exists?( resources_dir ) )  
        
        entries = Dir.entries( resources_dir )
        entries.select! { |entry| File.directory?( entry ) }
        entries.reject! { |entry| entry.match( /^\.\.?$/ ) }
        assert_equal( 0, entries.length, 'Unexpected sub-directories present' )
    end
    
    #######################################################################
    # @function check_directory_entry_count
    #
    # Checks that a directory has the expected number of entries.
    #
    # @param [String]  dir_path        path to the directory to check.
    # @param [Integer] expected_count  expected number of entries.
    #
    #######################################################################
    def check_directory_entry_count( dir_path, expected_count )
        assert( File.exists?( dir_path ) )  
        
        entries = Dir.entries( dir_path )
        entries.reject! { |entry| entry.match( /^\.\.?$/ ) }
        assert_equal( expected_count, entries.length, 'Unexpected number of entries present in directory.' )
    end
    
    #######################################################################
    # @function test_noise_resources_archive
    #
    # Test that the noise_resources archive is created correctly.
    #
    # (no parameters)
    #######################################################################
    def test_noise_resources_archive
        assert( !File.exists?('noise_resources') )
        system('ant.bat NoiseResourcesArchive')    
        
        resources_dir = 'noise_resources'
        check_directory_entry_count( resources_dir, 1 )
        
        # have subdirectoires have been copied
        cafe_noise_dir =  resources_dir + '/cafe_noise'
        check_directory_entry_count( cafe_noise_dir, 6 )
        
        # check that there are file contents
        check_directory_entry_count( cafe_noise_dir + '/bottomleft', 40 )        
        
        # zip file has been created
        release_dirs = Dir::glob( "release_*" )
        assert_equal( 1, release_dirs.length )
        zip_files = Dir::glob( "#{release_dirs.first}/*.zip" )
        assert_equal( 1, zip_files.length )
    end
    
    #######################################################################
    # @function test_ocra
    #
    # @note Test creation of the One Click Ruby Application fruitsalad.exe
    #
    # (no parameters)
    #######################################################################
    def test_ocra
        assert( !File.exists?('fruitsalad.exe') )
        system('ant.bat ocra')
        assert( File.exists?('fruitsalad.exe') )
    end
    
    #######################################################################
    # @function test_dllbuild_WinDriverTestAPI
    #
    # @note Test individual Build of the WinDriverTestAPI.dll
    #
    # (no parameters)
    #######################################################################
    def test_dllbuild_WinDriverTestAPI
        assert( !File.exists?('lib/WinDriverTestAPI.dll') )
        system('ant.bat WinDriverTestAPI')
        assert( File.exists?('lib/WinDriverTestAPI.dll') )	
    end    

    #######################################################################
    # @function test_dllbuild_portaudio_client
    #
    # @note Test individual Build of the portaudio_client.dll
    #
    # (no parameters)
    #######################################################################
    def test_dllbuild_portaudio_client
        assert( !File.exists?('lib/portaudio_client.dll') )
        assert( !File.exists?('lib/portaudio_client_x86.dll') )
        system('ant.bat portaudio_client')
        assert( File.exists?('lib/portaudio_client_x86.dll') )	
    end    

    #######################################################################
    # @function test_dllbuild_fft
    #
    # @note Test that Windows DLLs are correctly built
    #
    # (no parameters)
    #######################################################################
    def test_dllbuild_fft
        assert( !File.exists?('lib/FFT.dll') )
        assert( !File.exists?('lib/FFT64.dll') )
        assert( !File.exists?('lib/fft_x86.dll') )
        system('ant.bat fft')
        assert( File.exists?('lib/fft_x86.dll') )	
    end  
    
    #######################################################################
    # @function test_clean
    #
    # @note Test that built files are correctly deleted. 
    #
    # (no parameters)
    #######################################################################
    def test_clean
        # create a temp directory to check it was cleaned
        Dir.mkdir('release_0.0.0.0')         
        
        system('ant.bat clean')
        
        assert( !File.exists?('documentation_output') )    
        assert( !File.exists?('linux_archive') )    
        assert( !File.exists?('windows_archive') )    
        assert( !File.exists?('.yardoc') )    
        assert( !File.exists?('fruitsalad.exe') )    
        release_dirs = Dir::glob( "release_*" )
        assert_equal( 0, release_dirs.length )
    end
end
################################### END OF FILE ###########################