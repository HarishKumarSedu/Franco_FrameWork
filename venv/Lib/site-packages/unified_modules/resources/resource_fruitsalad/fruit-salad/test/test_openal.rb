#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_openal.rb
### @brief  Testing our OpenAL wrapper.
###
### @version \$Id: test_openal.rb 1020 2015-05-05 09:50:35Z emmas $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'openal'

exit unless ENV['TARGET'].nil?

class TestOpenAL < Test::Unit::TestCase

    ###########################################################################
    #
    # @function setup
    #
    # Initialise our OpenAL mixing context.
    #
    # (no parameters)
    #
    ###########################################################################
    def setup
        OpenAL.start
    end

    ###########################################################################
    #
    # @function teardown
    #
    # Deinitialise our OpenAL mixing context.
    #
    # (no parameters)
    #
    ###########################################################################
    def teardown
        OpenAL.stop
    end

    ###########################################################################
    #
    # @function test_allocate_buffers
    #
    # Verify that we are able to allocate a valid buffer within the current OpenAL
    # context.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_allocate_buffers
        buffer = OpenAL.create_buffer [ 0 ]
        assert_not_equal( 0, buffer, "Invalid buffer name, buffer not created." )
        OpenAL.release_buffer( buffer )
    end

    ###########################################################################
    #
    # @function test_create_source
    #
    # Verify that we are able to create a source from an OpenAL buffer.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_create_source
        buffer = OpenAL.create_buffer [ -1, 1, -1, 1 ]
        source = OpenAL.create_source( buffer, 0,0,0 )
        assert_not_equal( 0, source, "Invalid source name, source not created." )
        OpenAL.release_source( source )
        OpenAL.release_buffer( buffer )
    end

    ###########################################################################
    #
    # @function test_render
    #
    # Verifies that we are able to render audio using the loopback device.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_render
        buffer = OpenAL.create_buffer( [ -1, 1 ] * 48000 )
        source = OpenAL.create_source( buffer, 0,0,0 )
        rendering = OpenAL.play( [source], 1 )
        assert_equal( rendering.length, 48000, "Not enough samples rendered by OpenAL." )
        OpenAL.release_source( source )
        OpenAL.release_buffer( buffer )
    end

end
################################### END OF FILE ###############################
