################################################################################
### Copyright (c) 2016-2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file  test_logging_module.rb
### @brief Tests for logging module.
### @note  These tests are written with the assumption that the remote system
###        is an Arndale (running Linux) equipped with given audio device.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
###
################################################################################
gem 'test-unit'
require 'test/unit'

require_relative "../src/fruitsalad_env_setup.rb"
require 'configuration'
require 'fruitsalad_utils'

if __FILE__ == $0
    raise 'IP address not specified as argument' if ARGV.size < 1
end

# When test is executed individually with ip address as argument.
unless ARGV[0] =~ /.rb/
    $arg = ARGV[0]
# When test is invoked through rake file with ip address as argument.
else
    exit unless ENV['TARGET'] =~ /remote/i
    $arg = ENV['IP']
end

class TestRemoteLogging < Test::Unit::TestCase
    include FruitSaladUtils

    ###########################################################################
    #
    # @function create_remote_salad
    #
    # Creates an instance of RemoteSalad with a given configuration.
    #
    # @param [String] config  Path to a configuration file.
    # @param [String] user    Remote user name.
    # @param [String] address IP address of a remote system.
    #
    # @return [RemoteSalad] An instance of RemoteSalad.
    #
    ###########################################################################
    def create_remote_salad( config, user, address )
        Conf.set_source( config )
        Conf.set( :Remote_User, user )
        Conf.set( :Remote_Address, address )
        # has to be required _after_ loading configuration
        require 'src/targets/RemoteSalad'
        device = FruitSalad::get_device()
        raise 'Device not connected.' unless device.device_connected?
        return device
    end

    ###########################################################################
    #
    # @function test_logging_methods
    #
    # It checks that logging functionally successfully executed or not.
    #
    ###########################################################################
    def test_logging_methods
        ip_address = $arg
        device = create_remote_salad( 'configs/cirruslink_linux.yaml',
                                      'root',
                                      ip_address
                                    )
        device.setup
        expected = 0
        device.initialize_logging()
        actual = device.dmesg_log()
        assert_equal( expected, actual )
        device.initialize_logging()
        actual = device.dsp_firmware_info_log()
        assert_equal( expected, actual )
        device.initialize_logging()
        actual = device.registerdump_16bit()
        assert_equal( expected, actual )
        device.initialize_logging()
        actual = device.registerdump_32bit()
        assert_equal( expected, actual )
        device.initialize_logging()
        actual = device.tinymix_log()
        assert_equal( expected, actual )
        device.initialize_logging()
        actual = device.widget_status_log()
        assert_equal( expected, actual )

        actual = FruitSaladUtils::logging_info()
        assert_equal( expected, actual )

    end
end

##############################END OF FILE######################################
