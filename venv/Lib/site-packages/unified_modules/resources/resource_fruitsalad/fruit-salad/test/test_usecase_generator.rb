#!/usr/bin/ruby
# encoding: utf-8
################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_usecase_generator.rb
### @brief  Testing tinymix usecase generator.
###
### @version \$Id: test_usecase_generator.rb 1025 2015-05-06 08:48:47Z piotrs $
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../miscutil/generate_tinymix_usecase.rb'

exit unless ENV['TARGET'].nil?

class TestTinymixUsecaseGenerator < Test::Unit::TestCase
    ###########################################################################
    #
    # @function test_parse_bool
    #
    # Establish whether the mechanism for parsing bool values allowed by
    # tinymix works correctly.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_parse_bool
        generator = UsecaseGenerator.new
        value = generator.parse_bool_value( 'On' )
        assert_equal( 1, value )
        value = generator.parse_bool_value( 'on' )
        assert_equal( 1, value )
        value = generator.parse_bool_value( 'Off' )
        assert_equal( 0, value )
        value = generator.parse_bool_value( 'off' )
        assert_equal( 0, value )
        value = generator.parse_bool_value( '1' )
        assert_equal( 1, value )
        value = generator.parse_bool_value( '0' )
        assert_equal( 0, value )
        value = generator.parse_bool_value( 1 )
        assert_equal( 1, value )
        value = generator.parse_bool_value( 0 )
        assert_equal( 0, value )
        assert_raise( ArgumentError ) { generator.parse_bool_value( 'true' ) }
        assert_raise( ArgumentError ) { generator.parse_bool_value( 5 ) }
        assert_raise( ArgumentError ) { generator.parse_bool_value( 'Of' ) }
    end

    ###########################################################################
    #
    # @function test_split_byte_value
    #
    # Verify that tinymix byte controls get correctly split into separate
    # byte values.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_split_byte_value
        generator = UsecaseGenerator.new
        assert_nothing_raised do
            value = generator.split_byte_value( 'af050b' )
            assert_equal( ['af', '05', '0b'], value )
            value = generator.split_byte_value( '1234567890abcdef' )
            assert_equal( ['12', '34', '56', '78', '90', 'ab', 'cd', 'ef'],
                          value
                        )
            value = generator.split_byte_value( '1A2B3C4DE56F' )
            assert_equal( ['1A', '2B', '3C', '4D', 'E5', '6F'], value )
        end
        assert_raise( ArgumentError ) { generator.split_byte_value( '123dd' ) }
        assert_raise( ArgumentError ) do
            generator.split_byte_value( 'dd45zx' )
        end
        assert_raise( ArgumentError ) do
            generator.split_byte_value( 'dd 45 f6' )
        end
    end

    ###########################################################################
    #
    # @function test_parse_control
    #
    # Test whether controls (as printed by tinymix) get properly parsed.
    #
    # (no parameters)
    #
    ###########################################################################
    def test_parse_control
        generator = UsecaseGenerator.new
        assert_nothing_raised do
            value = generator.parse_control( "43\tINT\t2\tHPOUT Digital "     \
                                             "Volume   20 90" )
            assert_equal( ['"HPOUT Digital Volume"', 20, 90], value )
            value = generator.parse_control( "154\tBOOL\t1\tSome Switch      "\
                                             "On" )
            assert_equal( ['"Some Switch"', 1 ], value )
            value = generator.parse_control( "1\tENUM\t1\tDSPx Firmware    "  \
                                             "Ez2 Control" )
            assert_equal( ['"DSPx Firmware"', '"Ez2 Control"'], value )
            value = generator.parse_control( "33\tBYTE\t3\tDRC1              "\
                                             "003f15" )
            assert_equal( ['DRC1', 0, 63, 21], value )
            value = generator.parse_control( 'asdf asdf' )
            assert_equal( [], value )
        end
        assert_raise( ArgumentError ) do
            generator.parse_control( "4\tTYPE\t1\tName                0x2" )
        end
    end
end
################################### END OF FILE ###############################
