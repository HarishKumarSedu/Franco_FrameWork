################################################################################
### Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_portaudio_client.rb
### @brief  Testing portaudio client functionality.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
#
# Hardware Requirements : Line-in Cable with loop back Connection.
#
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'src/portaudio_client.rb'
require 'src/wavefile_analyzer'

class TestPortaudioClient < Test::Unit::TestCase

    include WavefileAnalyzer

    def testPortaudioClient
        exitCode = PortaudioClient::SetUp( 2048, PortaudioClient::StateCallback, PortaudioClient::ErrorCallback )
        assert_equal( :pa_client_success, exitCode, 'set up failed' )
        exitCode = PortaudioClient::StartRecordingToFile( 2, 48000, 'test_recording.wav' )
        assert( File.file? 'test_recording.wav' )
        assert_equal( :pa_client_success, exitCode, 'recording did not start successfuly' )
        exitCode = PortaudioClient::StartPlaybackFromFile( 2, 48000, 'resources/test.wav' )
        PortaudioClient::wait_for_notification()
        assert_equal( :pa_client_success, exitCode, 'plyback did not start successfuly' )
        exitCode = PortaudioClient::StopPlayback()
        assert_equal( 0, exitCode, 'playback failed to stop' )
        exitCode = PortaudioClient::StopRecording()
        assert_equal( 0, exitCode, 'recording failed to stop' )
        exitCode = PortaudioClient::Terminate()
        assert_equal( 0, exitCode, 'termination failed' )
        assert_equal( peak_frequency( 'resources/test.wav' ),
                      peak_frequency( 'test_recording.wav' ),
                      "Unsuccessful playback and record"
                    )
    end
end
################################### END OF FILE ###############################
