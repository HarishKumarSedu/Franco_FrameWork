################################################################################
### Copyright (c) 2015 Cirrus Logic International (UK) Ltd. All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   test_decompress.rb
### @brief  Testing decompression functionality.
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require_relative '../src/decompress.rb'
require 'WaveInfo'

exit unless ENV['TARGET'].nil?

###############################################################################
#
# Unit test for decompression functionality implemented in native object code.
#
###############################################################################
class TestDecompress < Test::Unit::TestCase

    ###########################################################################
    #
    # @function testDecompress
    #
    # Verify that native decompress method with integration to host buffer read
    # method works plausibly.
    #
    # (no parameters)
    #
    ###########################################################################
    def testDecompress
        sample_rate = 16000
        bit_depth = 16
        channels = 1
        input_file = 'resources/test_compressed.raw'
        output_file = 'decompressed.wav'

        assert( File.exists?( input_file ) )
        exit_code = NativeDecompress::Decompress( input_file,
                                                  output_file,
                                                  sample_rate,
                                                  bit_depth,
                                                  channels
                                                )
        assert_equal( :success,
                      exit_code,
                      'Decompress process completed successfully' )

        match_wave_parameters( output_file, sample_rate, channels )

        assert_nothing_raised do
            NativeDecompress::do_decompress( input_file,
                                             output_file,
                                             sample_rate,
                                             bit_depth,
                                             channels
                                           )
        end

        match_wave_parameters( output_file, sample_rate, channels )

        input_file = 'resources/test_corrupted.raw'

        assert( File.exists?( input_file ) )
        exit_code = NativeDecompress::Decompress( input_file,
                                                  output_file,
                                                  sample_rate,
                                                  bit_depth,
                                                  channels
                                                )
        assert_equal( :data_corrupt,
                      exit_code,
                      'Decompression returned data corrupted error'
                    )

        assert_raise do
            NativeDecompress::do_decompress( input_file,
                                             output_file,
                                             sample_rate,
                                             bit_depth,
                                             channels
                                           )
        end
    end

    ###########################################################################
    #
    # @function match_wave_parameters
    #
    # Matches the wave file information with the given input parameters.
    #
    # @param [String]  output_file Name of the output file.
    #
    # @param [Integer] sample_rate Sample rate of the input file.
    #
    # @param [Integer] channels    Number of channels present in the input file
    #
    ###########################################################################
    def match_wave_parameters( output_file, sample_rate, channels )

        wave = WaveInfo.new( output_file )
        output_file_sample_rate = wave.sample_rate
        output_file_channels = wave.channels
        result = false

        if( ( sample_rate.to_i == output_file_sample_rate.to_i ) &&
            ( channels.to_i == output_file_channels.to_i ) )
              result = true
        else
              result = false
        end
        assert( result, 'mismatch between decompressed wave file and input parameters' )
    end
end
################################### END OF FILE ###############################
