gem 'test-unit'
require 'test/unit'
require_relative '../src/fruitsalad_env_setup.rb'
require 'logfw'
require_relative '../src/test_method_definitions/miscellaneous_utils.rb'

##############################################################################
#
# Unit test for is_output_bit_perfect_with_input? function.
#
##############################################################################
class TestBitPerfect < Test::Unit::TestCase

    def test_bit_perfect
        input_file = "resources/bluegeenie7.wav"
        output_file = "resources/hello_bluegeenie.wav"
        ret = is_output_bit_perfect_with_input?(input_file, output_file)
        assert_equal(true, ret, 'Not bit-perfect')

        output_file = "resources/bluegeenie7_2s.wav"
        ret = is_output_bit_perfect_with_input?(input_file, output_file)
        assert_equal(false, ret, 'Bit-perfect, but expected no bit perfect')

        # Validation with trailing silence in the output
        reference_file = "resources/verify.wav"
        output_file = "resources/trailing_silence.wav"
        ret = is_output_bit_perfect_with_input?(reference_file, output_file)
        assert_equal(true, ret, 'Not bit-perfect')

        # Validation with leading silence in the output
        reference_file = "resources/verify.wav"
        output_file = "resources/leading_silence.wav"
        ret = is_output_bit_perfect_with_input?(reference_file, output_file)
        assert_equal(true, ret, 'Not bit-perfect')

        # Validation with leading & trailing silence in the output
        output_file = "resources/leading_trailing_silence.wav"
        ret = is_output_bit_perfect_with_input?(reference_file, output_file)
        assert_equal(true, ret, 'Not bit-perfect')

        # Validation with leading, middle & trailing silence in the output
        output_file = "resources/leading_middle_trailing_silence.wav"
        ret = is_output_bit_perfect_with_input?(reference_file, output_file)
        assert_equal(false, ret, 'Bit-perfect, but expected no bit perfect')

    end
end
