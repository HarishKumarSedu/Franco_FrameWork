#!/usr/bin/ruby
################################################################################
### Copyright (c) 2017 Cirrus Logic International (UK) Ltd.  All rights reserved.
###
### This software as well as any related documentation is furnished under
### license and may only be used or copied in accordance with the terms of the
### license. The information in this file is furnished for informational use
### only, is subject to change without notice, and should not be construed as
### a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
### (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
### that may appear in this document or any software that may be provided in
### association with this document.
###
### Except as permitted by such license, no part of this document may be
### reproduced, stored in a retrieval system, or transmitted in any form or by
### any means without the express written consent of Cirrus Logic International
### (UK) Ltd or affiliated companies.
###
### @file   testWisceFUSBBox.rb
### @brief  TestCase for WISCE automation functions used by Fruit Salad.
###
###
### @warning
###   This software is specifically written for Cirrus Logic devices.
###   It may not be used with other devices.
################################################################################
# ensure that the gem version of test-unit is loaded
# otherwise the report generation will not occur.
gem 'test-unit'
require 'test/unit'

require_relative '../src/fruitsalad_env_setup.rb'
require 'targets/WISCESalad.rb'

class TestFUSBBox < Test::Unit::TestCase

    #######################################################################
    # @function test_WISCE_SPI_reset_lochnagar
    #
    # Test that a device can be setup, enable SPI and trigger a re-detect.
    #
    # The device should not lose its settings.
    #
    # N.B. This test is changing values on the FPGA (WM0050) that will not be
    # reset as standard by the :reset usecase (which software resets the device only).
    # Hence the rescue and re-throw of the assertion exception once SPI has been disabled.
    #
    # (no parameters)
    #
    #######################################################################
    def test_WISCE_SPI_usage_lochnagar
        system_name = 'FUSB Box'
        device_name = 'WM5110'
        n = 1000

        wisce = FruitSalad::WISCESalad.new( false, false )
        wisce.enable_spi( system_name, device_name )
        wisce.list_devices

        device = wisce.find_by_name_with_protocol( 'ZZ1234', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE )
        assert_nil( device, 'This device should not exist.' )

        device = wisce.find_by_name_with_protocol( device_name, FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_UNKNOWN )
        assert_nil( device, 'Should not find the WM5110 device with an unknown protocol.' )

        device = wisce.find_by_name_with_protocol( device_name, FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT )
        assert_not_nil( device, 'Unable to find requested device using a given protocol.' )

        device = wisce.find_by_name_with_protocol( device_name, FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE )
        assert_not_nil( device, 'Unable to find requested device using a given protocol.' )

        protocol = wisce.connect_device( 'WM5110', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE )
        assert_equal( FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE, protocol )
        assert_field_equals( wisce, 'SW_RST_DEV_ID', '5110' )

        protocol = wisce.connect_device( 'WM5110', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT )
        assert_equal( FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT, protocol )
        assert_field_equals( wisce, 'SW_RST_DEV_ID', '5110' )

        protocol = wisce.connect_device( 'WM5110', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_UNKNOWN )
        assert_not_nil( protocol, 'Should find one of the protocols, although this is not deterministic as to which one.' )
        assert_field_equals( wisce, 'SW_RST_DEV_ID', '5110' )


        protocol = wisce.connect_device( 'WM5110', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT )
        str = ''
        bm_times_i2c = Benchmark.measure do
             n.times {str = wisce.read_element_value( 'SW_RST_DEV_ID' )}
        end
        puts "Benchmark (I2C) real time: #{bm_times_i2c.real}"
        assert_equal( '5110', str )

        protocol = wisce.connect_device( 'WM5110', FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE )
        str = ''
        bm_times_spi = Benchmark.measure do
             n.times {str = wisce.read_element_value( 'SW_RST_DEV_ID' )}
        end
        puts "Benchmark (SPI) real time: #{bm_times_spi.real}"
        assert_equal( '5110', str )

        wisce.usecase_from_file( 'DisableLochnagarSPI' )
    end

    #######################################################################
    # @function test_WISCE_SPI_firmware_lochnagar
    #
    # Test direct loading of a firmware file using SPI.
    #
    # @note Requires WISCE V3.3+ to resolve issues with dependencies of the
    # LoadFirmware automation method on System.Windows.Forms.
    #
    # (no parameters)
    #
    #######################################################################
    def test_WISCE_SPI_firmware_lochnagar
        system_name = 'FUSB Box'
        device_name = 'WM5110'
        algo_name = 'Ez2 Control'

        wisce = FruitSalad::WISCESalad.new( false, false )
        wisce.enable_spi( system_name, device_name )

        wisce.usecase_from_file( 'Reset_paths' )
        protocol = wisce.connect_device( device_name, FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE )
        assert_equal( FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SPI_32IX_16DAT_4WIRE, protocol )
        assert_field_equals( wisce, 'SW_RST_DEV_ID', '5110' )

        dsp_core_index = 2
        wisce.usecase_from_file( 'dsp3_clocking' )
        wisce.usecase_from_file( 'drc_settings' )
        firmware_filename = 'resources/florida-dsp3-ez2-control.wmfw'
        bm_times_spi = Benchmark.measure do
            firmare_loaded = wisce.load_firmware( firmware_filename, dsp_core_index )
        end
        puts "Benchmark (SPI) real time: #{bm_times_spi.real}"
        assert( firmare_loaded, 'Firmware file failed to load.' )
        is_loaded = wisce.is_firmware_loaded?( algo_name, '0.22.0', dsp_core_index )
        assert( is_loaded, 'This revision should be on the device.' )

        wisce.usecase_from_file( 'Reset_paths' )
        protocol = wisce.connect_device( device_name, FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT )
        assert_equal( FruitSalad::WISCE_CONST::WM_COMMS_PROTOCOL_P_SMBUS_32INX_16DAT, protocol )
        assert_field_equals( wisce, 'SW_RST_DEV_ID', '5110' )

        dsp_core_index = 2
        wisce.usecase_from_file( 'dsp3_clocking' )
        wisce.usecase_from_file( 'drc_settings' )
        firmware_filename = 'resources/florida-dsp3-ez2-control.wmfw'
        bm_times_i2c = Benchmark.measure do
            firmare_loaded = wisce.load_firmware( firmware_filename, dsp_core_index )
        end
        puts "Benchmark (I2C) real time: #{bm_times_i2c.real}"
        assert( firmare_loaded, 'Firmware file failed to load.' )
        is_loaded = wisce.is_firmware_loaded?( algo_name, '0.22.0', dsp_core_index )
        assert( is_loaded, 'This revision should be on the device.' )

        wisce.usecase_from_file( 'DisableLochnagarSPI' )
    end

end