<!--============================================================================
==
== Copyright (c) 2014-2015 Cirrus Logic International (UK) Ltd.  All rights reserved.
==
== This software as well as any related documentation is furnished under 
== license and may only be used or copied in accordance with the terms of the 
== license. The information in this file is furnished for informational use 
== only, is subject to change without notice, and should not be construed as 
== a commitment by Cirrus Logic International (UK) Ltd.  Cirrus Logic International
== (UK) Ltd assumes no responsibility or liability for any errors or inaccuracies
== that may appear in this document or any software that may be provided in
== association with this document. 
==
== Except as permitted by such license, no part of this document may be 
== reproduced, stored in a retrieval system, or transmitted in any form or by 
== any means without the express written consent of Cirrus Logic International
== (UK) Ltd or affiliated companies. 
==
== @file    build.xml
== @brief   Top-level Ant build file for FruitSalad Acceptance Testing Framework
==
== This file is the top-level Ant build file for the FruitSalad Acceptance Testing 
== Framework. This handles archiving, release and build procedures. Where sub-projects 
== are used, their ant buildfiles (in sub-directories) will each be called in turn.
==
== Targets exist for each sub-project such that these can be built individually
== by specifiying their target on the command-line. 
==
== To see a list of all the available targets in this file, along with short
== descriptions of each one, type:
==    ant -p
==
== N.B. that this file imports the generic WMBuild.xml and not all of the available targets
== are applicable to this project, see ant usuage for targets intended to be used for this build.
==
== @version \$Id: build.xml 963 2015-03-18 16:24:31Z aangus $
==
== @warning
==   This software is specifically written for Cirrus Logic devices.
==   It may not be used with other devices.
==
=============================================================================-->
<project name="FruitSalad" default="build">
    <!-- Global properties -->
    <property environment="env"/>
    <property name="loglines" value="50"/>
    <!-- Where the dependencies get loaded to and referenced from -->
    <property name="common.dir" value="${basedir}/depends"/>
    <!-- Import the standard build rules -->
    <import file="${common.dir}/build/WMBuild.xml"/>
    
    <!-- Where the public release area is located -->
    <property name="release.dir" value="\\filer\systems\EvalSoftware\FruitSalad"/>    
    <!-- Where to deploy builds and documentation to -->
    <property name="deploy.dir" value="${release.dir}\latest_build"/>    
    
    <!--========================================================================-->
    <!-- Helpful usage description -->
    <target name="usage" description="Describes usage of the build script">
        <echo>
	Ant build file for FruitSalad and its associated projects
	ant -p will list the available targets (not all have been tested).  
	Key targets:
      ant update           - update the workspace to the repository head
      ant showversion      - show the version information
      ant docs             - generates the documentation from source
      ant Archives         - constructs the archives from current source
      ant version          - show and update the version information
      ant dlls             - build all sub-project dlls
      ant installer        - builds setup installer for Windows using the current source
      ant build  (default) - build all source and create distribution directories
      ant release          - tests and then tags the repository head and releases the archives (no builds done)
      ant buildrelease     - builds, tests and releases
      ant CucumberReports  - Exemplar fruitsalad run with json output for Jenkins Cucumber reporting.
      ant RubyTest         - Rake test to run Test::Unit for JUnit style XML report generation.
      ant test             - Run RubyTest and CucumberReports
	    
    Expected output archives: 
	  windows   = FruitSalad_$ReleaseVersion$.zip 
	  linux     = FruitSalad_$ReleaseVersion$.tar.gz
	  installer = FruitSalad_Setup_$ReleaseVersion$.exe
        </echo>
    </target>

    <!-- Usage alias -->
    <target name="help" depends="usage"/>
    <!--========================================================================-->
    <!-- Cucumber Reports Generation  -->
    <!-- Added as part of the build file to ensure test commands are revision controlled.  -->
    <target name="CucumberReports" depends="init" description="Run FruitSalad to generate the .json output for cucumber reports." >                
            <!-- Do not allow all features to be run as this will pick up the copies found in the
                 *_archives and create ambiguous step definition failures.

                 Failing features will mark the build as failing:
                   e.g. -f features\frequency_response.feature -->	  
            <exec executable="cmd" failonerror="true">
                <arg value="/c"/>
                <arg value="ruby"/>
                <arg value="fruitsalad.rb"/>
                <arg value="null"/>
                <arg value="-f"/>
                <arg value="features\tone_generation.feature"/>
                <arg value="--"/>
                <arg value="--format"/>
                <arg value="json"/>
                <arg value="-o"/>
                <arg value="cucumber.json"/>                
            </exec>        
    </target>
    <!--========================================================================-->
    <!-- Ruby Unit Testing -->    
    <target name="RubyTest" depends="init" description="Rake test to run Test::Unit for JUnit style XML report generation." >
            <exec executable="cmd" failonerror="true">
                <arg value="/c"/>
                <arg value="rake"/>
                <arg value="test"/>                
            </exec>        
    </target>
    <!-- Testing -->
    <target name="test" depends="RubyTest,CucumberReports" description="Run RubyTest and CucumberReports." />
    <!--========================================================================-->
    <!-- Docs Generation  -->
    <target name="cleandocs" depends="init" description="Remove the documentation_output directory" >    
        <!-- remove all previously generated documentation 
             no need to fail on error, or will fall over if no such dir exists -->	  
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="documentation_output" includes="**/*"/>
        </delete>
    </target>

    <!-- Version dependency added to ensure DoxyFile version is updated correctly.  -->
    <target name="docs" depends="init,version,cleandocs,yard,doxygen" description="Automated documentation generation using yard and doxygen." />                        
    
    <!-- Doxygen -->
    <target name="doxygen" depends="init" description="Doxygen." >            
        <exec executable="cmd" dir="${basedir}/docs" failonerror="true">
            <arg value="/c"/>
            <arg value="doxygen"/>
        </exec>                
    </target>
        
    <!-- Insert the current version number into the documentation header title and Fruit Salad.
         Can be expanded at a later date to update a dedicated version info class within Fruit Salad. -->
    <target name="InsertDocVersion" depends="init,version">
        <echo>Updating FruitSaladGuide.md with version: ${version.installer}</echo>
        <!-- Main documentation header -->
        <replaceregexp file="docs/FruitSaladGuide.md"            
                       match="Welcome to Cirrus Fruit Salad \(V[\d\.]+\)"
                       replace="Welcome to Cirrus Fruit Salad (V${version.installer})"/>
        <!-- fruitsalad version option -->
        <replaceregexp file="fruitsalad.rb"            
                       match="FRUITSALAD_VERSION\s=\s\'V[\d\.]+\'"
                       replace="FRUITSALAD_VERSION = \'V${version.installer}\'"/>
    </target>

    <!-- YARD -->
    <target name="yard" depends="init,version,InsertDocVersion" description="Yard documentation of ruby and feature files." >    
        <property name="yard.failonerror" value="false"/>
        <sequential>           	  
            <!-- enable plugins for yard-cucumber -->
            <exec executable="cmd" failonerror="${yard.failonerror}">
              <arg value="/c"/>
              <arg value="yard"/>
              <arg value="config"/>
              <arg value="load_plugins"/>
              <arg value="false"/>
            </exec>
            <exec executable="cmd" failonerror="${yard.failonerror}">
                <arg value="/c"/>
                <arg value="yardoc"/>	
                <!-- load common options from the docs/.yardopts file -->
                <arg value="--yardopts"/>
                <arg value="docs/.yardopts"/>
                <!-- Only look at the subset of FruitSalad files -->
                <arg value="src/**/*.rb"/>
                <arg value="targets/**/*.rb"/>
                <!-- Output location -->
                <arg value="-o"/>
                <arg value="documentation_output/yard"/>                
            </exec>
            <exec executable="cmd" failonerror="${yard.failonerror}">
                <arg value="/c"/>
                <arg value="yardoc"/>				
                <!-- load common options from the docs/.yardopts file -->
                <arg value="--yardopts"/>
                <arg value="docs/.yardopts"/>
                <!-- Only look at the subset of FruitSalad files -->
                <arg value="features/**/*.rb"/>
                <!-- Output location -->
                <arg value="-o"/>
                <arg value="documentation_output/step_definitions"/>
            </exec>
        </sequential>
    </target>
    <!--========================================================================-->
    <!-- Build Targets -->
    <!--========================================================================-->    
    <target name="ReleaseFiles" depends="Archives,installer" description="Create files for distribution."/>  
    <target name="Archives" depends="NoiseResourcesArchive,WindowsArchive,LinuxArchive" description="Create archives for distribution."/>
  
    <!-- build everything -->    
    <target name="build" depends="init,version,dlls,bins,ocra,docs,Archives,installer" />
  
    <!-- Copy into files into the windows_archive directory for testing and zip -->
    <target name="-WindowsFileCopies" depends="init,version" description="Copy existing FruitSalad files into windows_archive for testing and zip.">
        <antcall target="-CommonArchiveCopies">
            <param name="archive.dir" value="windows_archive/" />
        </antcall>

        <!-- Create a zip archive for simple distribution of openssh for the remote windows target -->
        <zip basedir="tools/openssh_installer" destfile="tools/openssh_installer.zip" />
        <copy todir="windows_archive/FruitSalad/tools" file="tools/openssh_installer.zip" />

        <copy todir="windows_archive/FruitSalad/">
            <!-- windows specific files -->
            <fileset file="windows.txt" />
            <fileset file="fruitsalad.exe" />
        </copy>     
    </target>
    
    <!-- Create the archive for windows distribution (does not build anything) -->	      
    <target name="WindowsArchive" depends="-WindowsFileCopies" description="Create the Windows zip archive.">
        <!-- Zip the archive for distribution, include only the FruitSalad directory and all children -->
        <zip basedir="windows_archive/" 
             destfile="release_${version.installer}/FruitSalad_${version.installer}.zip" 
             includes="FruitSalad/**" />        
    </target>
    
    <!-- Create an archive of noise resources for distribution (does not build anything) -->
    <target name="NoiseResourcesArchive" depends="init,version" description="Create the Windows zip archive.">
        <mkdir dir="noise_resources/"/>
        <!-- Clear any previous contents -->
        <delete includeemptydirs="true">
            <fileset dir="noise_resources/" includes="**/*"/>
        </delete>  
        
        <!-- Copy any subdirectories of resources into the folder to be distributed -->
        <copy todir="noise_resources/">
            <fileset dir="resources" >
                <depth min="2"/>
            </fileset>            
        </copy>
        
        <!-- Zip the archive for distribution, include only the FruitSalad directory and all children -->
        <zip basedir="noise_resources/" 
             destfile="release_${version.installer}/noise_resources_${version.installer}.zip" 
             includes="**" />
    </target>
    
    <!-- Generic copy of files into an archive that are common to all versions -->
    <target name="-CommonArchiveCopies" depends="init,version" description="Common copy of FruitSalad files for distribution.">
        <mkdir dir="${archive.dir}/FruitSalad"/>
        <delete includeemptydirs="true">
            <fileset dir="${archive.dir}/FruitSalad" includes="**/*"/>
        </delete>    
        <copy todir="${archive.dir}/FruitSalad/">
            <!-- copy directories, default copy will only copy contents rather than the dir itself -->            
            <fileset dir="./" includes="src/**"> 
                <exclude name="src/extensions/**" />
			</fileset>       
            <fileset dir="./" includes="bin/**" />
            <fileset dir="./" includes="lib/**.dll"/>
            <fileset dir="./" includes="lib/**.so" />
            <fileset dir="./" includes="src/extensions/saladmix/**" />
			<fileset dir="./" includes="targets/**" />    
            <fileset dir="./" includes="resources/*" >
                <!-- prevent empty directories from being included -->
                <type type="file" />
            </fileset>
            <fileset dir="./" includes="configs/**" />
            <fileset dir="./" includes="fruitsalad_example/**" />
            <!-- copy top-level files -->	                  
            <fileset file="Gemfile" />
            <fileset file="Online documentation.url" />
            <fileset file="fruitsalad.rb" />            
        </copy> 
    
        <!-- Copy Generated documentation -->
        <copy todir="${archive.dir}/FruitSalad/docs">
            <fileset dir="documentation_output/" />    
        </copy>
        <!-- Copy Features folder -->
        <copy todir="${archive.dir}/FruitSalad/example_features/">
            <fileset dir="features/" />    
        </copy> 
    
        <!-- Blank Features folder and step definitions-->
        <mkdir dir="${archive.dir}/FruitSalad/features/step_definitions"/>
    </target>
  
    <target name="-LinuxFileCopies" depends="init,version" description="Copy existing FruitSalad files into linux_archive for testing and tar.">    
        <antcall target="-CommonArchiveCopies">
            <param name="archive.dir" value="linux_archive/" />
        </antcall>
        <copy todir="linux_archive/FruitSalad/">
            <fileset dir="./" includes="lib/**.so" />
            <!-- linux specific files -->	      
            <fileset file="linux.txt" />
            <fileset dir="./" includes="vendor/tinyalsa/**" />
        </copy>
    </target>
  
    <!-- Create the archive for linux distribution (does not build anything) -->	  
    <target name="LinuxArchive" depends="-LinuxFileCopies" description="Create the Linux archive for distribution.">
        <tar compression="gzip" 
             basedir="linux_archive/" 
             destfile="release_${version.installer}/FruitSalad_${version.installer}.tar.gz" 
             includes="FruitSalad/**"/>            
    </target>
 
    <!-- For completeness duplicate the InstallAwate setup creation command, 
         the complateness of this operation is still unknown as the installer was failing to operate for some people.
	 Now building from the windows_archive to ensure the same files are copied when
	 using the installer or the zip extract.
         N.B. a first time install of InstallAware will take one-two hours... -->
    <target name="installer" depends="init,version,WindowsArchive" description="Build the installer using InstallAware.">    
        <echo>Installer version ${version.installer}</echo>
        <echo>About to run make_kit.bat</echo>
        <echo>Running in ${kit.dir}</echo>
        <exec executable="${kit.dir}\make_kit.bat" failonerror="true">
            <arg value="VERSION=${version.installer}"/>        
            <arg value="RELEASE_DIR=release_${version.installer}"/>        
        </exec>                 
    </target>

    <!-- The fruitsalad.exe bundle created with the OCRA tool (embeds a ruby interpreter and gems). 
         Possibly unecessary and creates a discrepency between the linux and windows versions. -->
    <target name="ocra" depends="init" description="Build the One-Click Ruby Application fruitsalad Executable.">
        <sequential>   
            <echo>Bundle installing gems...</echo>    
            <exec executable="cmd" failonerror="true">
                <arg value="/c"/>
                <arg value="bundle"/>
                <arg value="install"/>
            </exec>
            <echo>Creating One-Click Ruby Application fruitsalad.exe...</echo>    
            <exec executable="cmd" failonerror="true">
                <arg value="/c"/>
                <arg value="ocra"/>
                <arg value="fruitsalad.rb"/>
                <arg value="--output"/>
                <arg value="fruitsalad.exe"/>
                <arg value="--gemfile"/>
                <arg value="Gemfile"/>
                <arg value="--no-dep-run"/>	
                <arg value="--add-all-core"/>
                <arg value="--gem-full"/>
                <arg value="--dll"/>
                <arg value="libffi-6.dll"/>
                <arg value="--dll"/>
                <arg value="libyaml-0-2.dll"/>
            </exec>
        </sequential>
    </target>

    <!-- overides for init parameters set in WMBuild.xml -->
    <target name="preinit" depends="WMBuild.preinit">	    
        <!-- auto-update the DoxFile with the correct version number -->
        <property name="CopyVersionDoxyfile" value="${basedir}\docs\Doxyfile" />
        <property name="kit.dir" location="${basedir}\installAware\" />        
    </target>
    <!--========================================================================-->
    <!-- Release Targets -->
    <!--========================================================================--> 
    <!-- Tag the repository with the version number -->
    <target name="UpdateRepository" depends="UpdateChangeHistory,ReleaseMessage">        
        <!-- When releasing also commit the updated version file and any built sources to the repo -->
        <svn>
            <commit message="${release.message}">
                <fileset file="Version.xml" />    
                <fileset file="fruitsalad.exe" />
                <fileset file="ChangeHistory.txt" />
                <fileset file="fruitsalad.rb" />
                <fileset dir="lib" />
                <fileset dir="bin" />
            </commit>
        </svn>        
        <echo>${release.message}</echo>
    </target>     
    
    <!-- Create a reusable release message -->
    <target name="ReleaseMessage" depends="init,version">
        <tstamp>
            <format property="RELEASE_DATE" pattern="dd MMM yyyy" locale="en,UK"/>
        </tstamp>
        <property name="release.message" 
	          value="Release ${version.full} - ${RELEASE_DATE}${line.separator}=============================${line.separator}Subversion revision ${FileVersion.WCRevision}${line.separator}${line.separator}FIXME: Edit this commit log with a changelog and check the revision number.${line.separator}"/>
	<echo>${release.message}</echo>
    </target>      

    <!-- Update the change history with the revision number to match the ReleaseMessage (replaces the #FRUITSALAD_WC_REVISION# string)-->
    <target name="UpdateChangeHistory" depends="init,version">
        <replaceregexp file="ChangeHistory.txt"
                       match="#FRUITSALAD_WC_REVISION#"
                       replace="${FileVersion.WCRevision}"/>
    </target>

    <!-- Tag the repository with the version number -->
    <target name="release" depends="ReleaseMessage,UpdateRepository">
        <svn>
            <copy srcUrl="http://svnl/BITS/trunk/Fruit%20Salad" 
                  destUrl="http://svnl/BITS/tags/releases/${version.installer}" 
	              message="${release.message}" />
        </svn>        
        <echo>${release.message}</echo>
    </target> 
    
    <!-- build, test and release Fruit Salad -->
    <target name="buildrelease" depends="build,test,release"/>    
    
    <!-- build, test and release and deploy Fruit Salad -->
    <target name="build_release_deploy" depends="build,test,release,DeployLatestRelease"/>    
    
    <!--========================================================================-->        
    <!-- Deploy Targets -->
    <!-- Does not build anything, expects build and release commands 
         to have been executed previously. -->
    <!--========================================================================-->                
    <!-- Deploy the latest_build to the public area -->
    <target name="DeployLatestBuild" depends="version">
        <antcall target="DeployLatestFiles">
            <param name="deploy.dir" value="${release.dir}\latest_build"/>
        </antcall>
    </target> 
    
    <!-- Deploy the latest_release to the public area -->
    <target name="DeployLatestRelease" depends="version">
        <antcall target="DeployLatestFiles">
            <param name="deploy.dir" value="${release.dir}\latest_release"/>
        </antcall>
        <antcall target="DeployLatestFiles">
            <param name="deploy.dir" value="${release.dir}\${version.full}"/>
        </antcall>
    </target> 
    
    <!-- Common target for deploying latest build and docs files to thedirectory specified by deploy.dir -->
    <target name="DeployLatestFiles" depends="version">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${deploy.dir}"/>
        </delete>
        <!-- Copy the generated docs to public area -->        
        <copy todir="${deploy.dir}\docs">
            <fileset dir="documentation_output"/>
        </copy>
        <!-- Copy the contents of the release folder to public area -->
        <copy todir="${deploy.dir}">
            <fileset dir="release_${version.installer}"/>
        </copy>
    </target> 

    <!-- Copy files upsteam to the public release directory 
         Does not build the release files, use ant build first. -->	
    <target name="deploy" depends="DeployLatestBuild"/> 
    <!--========================================================================-->        
    <!-- Clean build directories by deleting created files  -->
    <target name="clean" depends="init,version,saladmix_clean" description="Remove the contents of the build directories" >            
        <!-- no need to fail on error, or will fall over if no such dir exists -->	          
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="Release" />
            <fileset dir="." includes="**/release_*/**" />
            <fileset dir="documentation_output"/>
            <fileset dir="linux_archive"/>
            <fileset dir="windows_archive"/>
            <fileset dir="noise_resources"/>
            <fileset dir=".yardoc"/>                        
            <fileset file="fruitsalad.exe"/>
            <fileset file="tools/openssh_installer.zip" />
        </delete>            
        <CHILD_BUILD ChildProject="WinDriverTestAPI" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\WinDriverTestAPI\build" ChildTarget="clean"/>
        <CHILD_BUILD ChildProject="portaudio_client" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\portaudio_client\build" ChildTarget="clean"/>
        <CHILD_BUILD ChildProject="fft" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\fft" ChildTarget="clean"/>
        <CHILD_BUILD ChildProject="fruitsalad_player" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\fruitsalad_player\build" ChildTarget="clean"/>
    </target>        
    <!--========================================================================-->    
    <!-- base rule which calls the child build files -->
    <macrodef name="CHILD_BUILD">
        <attribute name="ChildProject"/>
        <attribute name="target" default="all"/>
        <attribute name="ChildAntFile" default="foo.xml"/>
        <attribute name="ChildTarget" default="@{target}"/>
        <attribute name="ChildDir" default="${basedir}\@{ChildProject}"/>
        <attribute name="IsSubBuild" default="true"/>
        <sequential>
            <echo message="=== Building @{ChildTarget} in @{ChildProject} calling @{ChildDir}/@{ChildAntFile} ==="/>
            <ant antfile="@{ChildAntFile}" dir="@{ChildDir}" target="@{ChildTarget}" inheritAll="false">
                <property name="sub_build" value="@{IsSubBuild}"/>
            </ant>
        </sequential>
    </macrodef>
    <!--========================================================================-->  
    <target name="bins" depends="init,version,fruitsalad_player,windows_remote_client_tool,saladmix" description="build the binary projects" />
    <target name="dlls" depends="init,version,WinDriverTestAPI,fft,portaudio_client" description="build the dll projects" />
    <!-- Build the WinDriverTestAPI project -->
    <target name="WinDriverTestAPI" depends="init" description="build the WinDriverTestAPI project files">        
        <property name="_child_target" value="build"/>
        <CHILD_BUILD ChildProject="WinDriverTestAPI" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\WinDriverTestAPI\build" ChildTarget="${_child_target}"/>
    </target>
    <!-- Build the portaudio_client project -->
    <target name="portaudio_client" depends="init" description="build the portaudio_client project files">        
        <property name="_child_target" value="build"/>
        <CHILD_BUILD ChildProject="portaudio_client" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\portaudio_client\build" ChildTarget="${_child_target}"/>
    </target>
    <!-- Build the fft project -->
    <target name="fft" depends="init" description="build the portaudio_client project files">        
        <property name="_child_target" value="build"/>
        <CHILD_BUILD ChildProject="fft" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\fft" ChildTarget="${_child_target}"/>
    </target>
    <target name="fruitsalad_player" depends="init,WinDriverTestAPI" description="build the fruitsalad_player solution">
        <property name="_child_target" value="build"/>
        <CHILD_BUILD ChildProject="fruitsalad_player" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\fruitsalad_player\build" ChildTarget="${_child_target}"/>
    </target>
    <target name="windows_remote_client_tool" depends="init,WinDriverTestAPI" description="build the windows_remote_client_tool solution">
        <property name="_child_target" value="build"/>
        <CHILD_BUILD ChildProject="windows_remote_client_tool" ChildAntFile="build.xml" ChildDir="${basedir}\src\extensions\windows_remote_client_tool\build" ChildTarget="${_child_target}"/>
    </target>
    
    <!--========================================================================-->
    <!-- Locate nmake -->
    <target name="-find_nmake">
        <property environment="env"/>

        <available file="${env.ProgramFiles(x86)}/Microsoft Visual Studio 11.0/VC/bin/nmake.exe"
                   type="file"
                   property="nmake"
                   value="${env.ProgramFiles(x86)}/Microsoft Visual Studio 11.0/VC/bin/nmake.exe"
                   />

        <fail unless="nmake" message="nmake not found. Ensure you have visual studio 2012 installed in the default location." />
    </target>

    <!-- Check if the android build tool chain is in the path -->
    <target name="-check_for_android_toolchain">
        <property environment="env" /> 
        <available file="arm-linux-androideabi-gcc.exe"
                   type="file"
                   filepath="${env.Path}"
                   property="arm-android-gcc"
                   value="arm-linux-androideabi-gcc.exe"
                   />
        <fail unless="arm-android-gcc" message="arm-linux-androideabi-gcc.exe not found. Ensure that a standalone NDK toolchain is present in your path." />
    </target>

    <!-- Clean all files built as a part of the saladmix project-->
    <target name="saladmix_clean" depends="-find_nmake,-check_for_android_toolchain" description="cleans saladmix binaries">
        <exec executable="${nmake}" dir="${basedir}/src/extensions/saladmix" failonerror="true">
            <arg value="clean" />
            <arg value="RM=del -q" />
            <arg value="CP=copy" />
            <arg value="PATH_SEPARATOR=\\" />
            <arg value="CROSS_COMPILE=arm-linux-androideabi-" />
        </exec>
        <delete includeemptydirs="true" failonerror="false">
            <fileset file="bin/arm-linux-androideabi-saladmix" />
        </delete>
    </target>

    <!-- Build the saladmix project -->
    <target name="saladmix" depends="-find_nmake,-check_for_android_toolchain,saladmix_clean" description="builds saladmix binaries">
        <exec executable="${nmake}" dir="${basedir}/src/extensions/saladmix" failonerror="true">
            <arg value="RM='del -q'" />
            <arg value="CP=copy" />
            <arg value="PATH_SEPARATOR=\\" />
            <arg value="CROSS_COMPILE=arm-linux-androideabi-" />
        </exec>
        <exec executable="${nmake}" dir="${basedir}/src/extensions/saladmix" failonerror="true">
            <arg value="install" />
            <arg value="RM=del -q" />
            <arg value="CP=copy" />
            <arg value="PATH_SEPARATOR=\\" />
            <arg value="CROSS_COMPILE=arm-linux-androideabi-" />
        </exec>
    </target>
</project>    
