#!/usr/bin/env python
"""
@brief
Resource library written for accessing class and method in ruby test framework fruit-salad

@Description:
This resource library provides wrapper methods to access method in fruit-salad targets

Supported features:
- Set config file and test setup target
- Get fruit-salad log file path
- Read register
- load routing file
- load firmware file on a dsp core
- Start dsp core
- Stop dsp core
- stop resource fruit-salad
"""
import os
import socket
import rython

from collections import namedtuple

# Data structure for TARGETS supported
_TARGETS = namedtuple('FS_TARGETS', 'WISCE REMOTE')
FS_TARGETS = _TARGETS('WISCE', 'Remote')


# Custom RubyContext class
class MyRubyContext(rython.RubyContext):
    def unload(self):
        """
        Over-rided method which does wait for xmlrpc_server_proc using
        xmlrpc_server_proc.wait() instead of os.waitpid(xmlrpc_server_proc, 0).
        """
        self._RubyContext__xmlrpc_client.registry.shutdown()
        self._RubyContext__xmlrpc_server_proc.wait()
        self.__xmlrpc_server_proc = None
        self.__ruby_port = None


class ResourceFruitSalad(object):
    """
    Resource library written for accessing class and method in ruby test framework fruit-salad
    """
    def __init__(self):
        self.target = None
        self._target_context = None
        self.fs_home = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'fruit-salad')
        self.fs_src = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                   'fruit-salad', 'src')

    @staticmethod
    def _get_ip_address():
        """
        Get ip address of local PC
        """
        tcp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        tcp.connect(('8.8.8.8', 1))  # connect() for UDP doesn't send packets
        local_ip_address = tcp.getsockname()[0]
        tcp.close()
        return local_ip_address

    def _set_config(self, config_file, device_yaml=False):
        """
        Sets the passed file as config file for test inputs
        @param config_file: [str] Config file path
        """
        self._target_context('Conf.set_source(\'%s\')' % config_file)
        if device_yaml:
            self._target_context('Conf.set_source(\'%s\', device_yaml=true)' % device_yaml)

    def set_config_and_target(self, target, config_yaml=False, device_yaml=False):
        """
        Method to set config file and test platform target

        @param config_yaml: [str] Config file path
        @param target: [_TARGETS] Any supported target
        @param device_yaml: [str] Device config file
        """
        target_class_name = '%sSalad' % target
        fs_env_file = os.path.join(self.fs_src, 'fruitsalad_env_setup.rb')
        fs_logfw_file = os.path.join(self.fs_src, 'logfw.rb')
        fs_conf_file = os.path.join(self.fs_src, 'configuration.rb')
        fs_target_op = os.path.join(self.fs_src, 'test_method_definitions', 'target_operations.rb')
        if target in list(FS_TARGETS.__dict__.values()):
            target_rb_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                                               'fruit-salad', 'src', 'targets', target_class_name + '.rb')
            self._target_context = MyRubyContext(host=self.__class__._get_ip_address(),
                                                 requires=[fs_env_file,
                                                           fs_conf_file,
                                                           fs_logfw_file,
                                                           fs_target_op],
                                                 debug=True)
            self._set_config(config_yaml, device_yaml)
            self._target_context("require '%s'" % target_rb_file_path)
            self._target_context("connect_to_target()")

    def get_fs_log_file(self):
        """
        Returns fruit-salad log file path
        @return [str] fruit-salad log file path
        """
        log_file_path = self._target_context("get_present_log_file_name()")
        return log_file_path

    def stop_resource_fruitsalad(self):
        """
        Releases rubycontext session
        """
        self._target_context.unload()

    def require_file(self, rb_file):
        self._target_context("require '%s'" % rb_file)
        return self._target_context
