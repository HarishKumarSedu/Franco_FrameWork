import sys
import os
import platform
import requests

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class Jenkins(object):

    def __init__(self):
        """
        Init method
        :return:
        """
        self.log = logging.getLogger(Jenkins.__name__)
        self.username = None
        self.password = None
        self.auth_token = None
        self.artifacts_path_jenkins = None
        self.download_dir = None
        self.bsp_name = None
        self.platform = platform.system()
        self.build_url = ""

    def set_config_details(self, config):
        self.username = config['username']
        self.password = config['password']
        self.auth_token = (self.username, self.password)
        self.artifacts_path_jenkins = config['artifacts_path_jenkins']
        self.download_dir = config['download_dir']
        self.bsp_name = config.get('bsp_name')

    def get_bsp_version_from_jenkins(self):
        """
        Gets the latest bsp version
        @return Returns the latest bsp version
        """
        bsp_version = None
        resp = requests.get(self.artifacts_path_jenkins, auth=(self.username, self.password))
        if '[200]' in str(resp):
            bsp_version = resp.content.split(self.bsp_name + "_")[1].split('.scspkg')[0]
        else:
            self.log.error("Unable to get BSP version. jenkins url: %s, user: %s, password: %s"
                           % (self.artifacts_path_jenkins, self.username, self.password))
        self.log.info("daily target bsp version: %s" % bsp_version)
        return bsp_version

    def download_bsp_from_jenkins(self, bsp_version=None):
        """
        Downloads the BSP from given Jenkins url
        :return:
        """
        if not bsp_version:
            bsp_version = self.get_bsp_version_from_jenkins()
        filename = ''.join([self.bsp_name, '_', bsp_version, '.scspkg'])
        file_url = ''.join([self.artifacts_path_jenkins, filename])
        resp = requests.get(file_url, auth=(self.username, self.password))
        if '[200]' in str(resp):
            with open(os.path.join(self.download_dir, filename), "wb") as code:
                code.write(resp.content)
            self.log.info("Download daily BSp package %s successful" % filename)
        else:
            self.log.error("Unable to get BSP version. jenkins url: %s, user: %s, password: %s"
                           % (file_url, self.username, self.password))

    def create_dir(self, dir_path=None):
        """
        Creates the directory if not exists
        :param dir_path: dir to create
        :return: None
        """
        if dir_path is None:
            dir_path = self.download_dir
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)

    def download_latest_artifact(self, artifact_name, job_url=None):
        """
        Downloads latest artifact from job
        @param artifact_name: [str] name of artifact to be downloaded
        @param job_url: [str] Jenkins job url
        """
        if job_url:
            if not job_url.endswith("/"):
                job_url = job_url + "/"
        else:
            job_url = self.artifacts_path_jenkins
        if not os.path.exists(self.download_dir):
            os.mkdir(self.download_dir)
        self.get_build_url(job_url=job_url)
        artifact_file_url = job_url + 'lastSuccessfulBuild/artifact/%s' % artifact_name
        response = requests.get(artifact_file_url, auth=(self.username, self.password), verify=False)
        if '[200]' in str(response):
            with open(os.path.join(self.download_dir, artifact_name), "wb") as artifact_file:
                artifact_file.write(response.content)
            self.log.info("Download artifact %s successful" % artifact_file_url)
        else:
            self.log.error("Unable to download artifact: %s. Jenkins url: %s,"
                           " User: %s, Password: %s" % (artifact_name, job_url,
                                                        self.username, self.password))

    def get_build_url(self, job_url=None):
        """
        Prints the build url with build number
        @param job_url: job url
        """
        try:
            _build_url = job_url + 'lastSuccessfulBuild/'
            response = requests.get(_build_url.encode(), auth=(self.username, self.password), verify=False)
            last_successful_build_number = response.content.split(b" [Jenkins]</title>")[0].split(b"#")[-1]
            self.log.info("last_successful_build_number: %s" % last_successful_build_number)
            last_successful_build_url = job_url + last_successful_build_number.decode()
            self.log.info("last successful build url: %s" % last_successful_build_url)
            self.build_url = last_successful_build_url
            return last_successful_build_url
        except Exception as e:
            self.log.warning(e)


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class JenkinsCli(Jenkins, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                Jenkins.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, Jenkins)

        RUN = JenkinsCli()
    else:
        # TODO Unit tests pending
        pass
