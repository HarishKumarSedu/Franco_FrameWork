#!/usr/bin/env python
"""
@brief
Resource library to parse, update xml file

@Description:
This resource library provides methods to access, modify xml data.

Supported features:
- Remove element in XML
- Change element value in XML
- Copy element into XML
- Change element value from a section in XML
- Read element value from a section in XML
"""
from lxml import etree as ET
import copy
import sys


class XmlParserException(Exception):
    """
    Exception class if requested element is not found in the XML
    """
    def __init__(self, message):
        super(XmlParserException, self).__init__(message)


class XmlParser(object):

    @staticmethod
    def remove_element(xml_file, element_name, new_xml_file=None):
        """
        This method deletes a particular element from the xml file.
        @param xml_file [string] xml file with path
        @param element_name [string] the name of the element we are deleting or path to element
        (example: ./audioConfiguration/audioAdapterSettings/adapterType)
        @param new_xml_file [string] new xml file with path

        Usage:
        <XmlParser object>.remove_element("example.xml", "element_name")
        """
        try:
            tree = ET.parse(xml_file)
            for element in tree.xpath("//%s" % element_name):
                parent_element = element.xpath("..")[0]
                parent_element.remove(element)
            if new_xml_file:
                tree.write(new_xml_file, xml_declaration=True, encoding='UTF-8')
            else:
                tree.write(xml_file, xml_declaration=True, encoding='UTF-8')
        except Exception as err:
            raise XmlParserException(err)

    @staticmethod
    def copy_element(xml_file, element_name, new_xml_file):
        """
        This method copy and paste a particular element into the xml file.
        @param xml_file [string] xml file with path
        @param element_name [string] the name of the element we are copying
        @param new_xml_file [string] new xml file with path

        Usage:
        <XmlParser object>.copy_element("example.xml", "applicationId", "example1.xml")
        """
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            # Find element to copy
            element_in_xml = tree.find("//%s" % element_name)
            # Create a copy
            copy_element_in_xml = copy.deepcopy(element_in_xml)
            # Append the copy
            root.append(copy_element_in_xml)
            tree.write(new_xml_file, xml_declaration=True, encoding='UTF-8')
        except Exception as err:
            raise XmlParserException(err)

    @staticmethod
    def change_element_value(xml_file, element_name, element_value, new_xml_file=None):
        """
        This method changes value of a particular element from the xml file.
        @param xml_file [string] xml file with path
        @param element_name [string] the name of the element we are deleting
        @param element_value [string] the value we enter in the xml file
        @param new_xml_file [string] new xml file with path

        Usage:
        <XmlParser object>.change_element_value_in_xml("example.xml", "element_name", "element_value")
        """
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            for element in root.iter(element_name):
                element.text = element_value
            if new_xml_file:
                tree.write(new_xml_file, xml_declaration=True, encoding='UTF-8')
            else:
                tree.write(xml_file, xml_declaration=True, encoding='UTF-8')
        except Exception as err:
            raise XmlParserException(err)

    @staticmethod
    def change_element_value_from_section(xml_file, section_name, ref_element_name, ref_element_value, element_name,
                                          element_value, new_xml_file=None):
        """
        This method changes the value of an element in a section by keeping another element and its value as a
        reference.

        Example: We have multiple <Release> sections in xml file and we want to change the value of a child of
        <Release> element named <BaseVersion>. But there are multiple <BaseVersion> elements corresponding to different
        <Release> elements. We only want to change the <Base Version> of the <Release> parent which also has an element
        <DiffPatch> and its value is "false".

        @param xml_file [string] xml file with path
        @param section_name [string] Path of the section in xml
        @param ref_element_name [string] Name of element in sections whose vale needs to be checked
        @param ref_element_value [string] Text of ref element that needs to be checked
        @param element_name [string] Name of element in section whose text needs to be changed
        @param element_value [string] Text that needs to be written to an element
        @param new_xml_file [string] new xml file with path
        @return no return

        Usage:
        <XmlParser object>.change_element_value_from_section('example.xml', "MCUReleases/Release", "DiffPatch", "false",
         "BaseVersion", "1.9.0")
        """
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            sections = root.findall(section_name)
            for sec_index in range(len(sections)):
                if ref_element_value in sections[sec_index].find(ref_element_name).text:
                    sections[sec_index].find(element_name).text = element_value
                    break
            if new_xml_file:
                tree.write(new_xml_file, xml_declaration=True, encoding='UTF-8')
            else:
                tree.write(xml_file, xml_declaration=True, encoding='UTF-8')
        except Exception as err:
            raise XmlParserException(err)

    @staticmethod
    def read_element_value_from_section(xml_file, section_name, ref_element_name, ref_element_value, element_name):
        """
        This method reads the value of an element in a section by keeping another element and its value as a
        reference.

        @param xml_file [string] Full path to file
        @param section_name [string] Path of the sections in xml
        @param ref_element_name [string] Name of element in sections which text needs to be checked
        @param ref_element_value [string] Value of ref_element_name that needs to be checked
        @param element_name [string] Name of element in section whose value needs to be read
        @return [string] value of given XML element

        Usage:
        <XmlParser object>.read_element_value_from_section('example.xml', "MCUReleases/Release", "DiffPatch", "false",
        "BaseVersion")
        """
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            sections = root.findall(section_name)
            for sec_index in range(len(sections)):
                if ref_element_value in sections[sec_index].find(ref_element_name).text:
                    return sections[sec_index].find(element_name).text
        except Exception as err:
            raise XmlParserException(err)


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class XmlParserCli(XmlParser, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""
            def __init__(self, *args, **kwargs):
                XmlParser.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, XmlParser)

        RUN = XmlParserCli()
