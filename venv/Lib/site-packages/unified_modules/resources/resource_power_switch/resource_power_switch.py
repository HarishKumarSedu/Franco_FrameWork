#!/usr/bin/env python
"""
@brief
A resource library to access and control the U-X3 power switch.

@Description:
This resource library provides wrapper methods to access and control U-X3 power switch.

Supported features:
- Power On
- Power Off
- Power Reset
@b Usage
@code
pwr_switch = ResourcePowerSwitch()
pwr_switch.power_reset(socket_number)
@endcode
"""
import sys
from time import sleep
import serial.tools.list_ports

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourcePowerSwitchError(Exception):
    """Define ResourcePowerSwitchError Exception type"""
    def __init__(self, message=None):
        super(ResourcePowerSwitchError, self).__init__(message)


class ResourcePowerSwitch(object):
    """Class which encapsulates apis to deal with USB U-X3 Power Switch

            U-X3 only has 3 ports numeration from 1 to 3

            U-X3 Serial command : 'echo *0XY >\\.\Z'
            * is the attention code
            X is the port number 1, 2 or 3
            Y is the is the action: 1=ON, 2=OFF, 3=Reset
            Z is the COM port connected to U-X3
     """
    def __init__(self):
        """
        Constructor
        """
        self.log = logging.getLogger(ResourcePowerSwitch.__name__)
        self.com_port = ''
        self.socket_number = None
        self.serial = None
        self.fpga_load_delay = None
        self.AC_VID = None
        self.AC_PID = None
        self.socket_numbers = [1, 2, 3]

    def set_config_details(self, fpga_load_delay=30, ac_vid='0403', ac_pid='6001'):
        """ This method is used to set config details for resource power switch """
        self.fpga_load_delay = fpga_load_delay
        self.AC_VID = ac_vid
        self.AC_PID = ac_pid

    def power_cycle_fpga(self):
        """Finds USB U-X3 Power Switch by its VID&PID and reset defined out port."""
        try:
            self.log.info('Searching for USB U-X3 Power Switch on COM ports.')
            ports = list(serial.tools.list_ports.comports())
            # port is a list tuples for available COM ports
            # First element of tuple is COM Name
            # Second COM Description
            # Third COM Hardware Ids
            for element in ports:
                # Power Switch is using generic VID and PID number and we can have
                # conflict if any other USB communication device if any other USB communication
                # device with generic VID and PID is connected to computer.
                if(('USB VID:PID=%s:%s' % (self.AC_VID, self.AC_PID) in element[2]) or
                        ('FTDIBUS\\VID_%s+PID_%s' % (self.AC_VID, self.AC_PID) in element[2])):
                    self.com_port = str(element[0])
            if self.com_port == '':
                self.log.error("Could not find USB U-X3")
                raise ResourcePowerSwitchError('Could not find USB U-X3 on any COM port '
                                               '(VID=%s, PID=%s)' % (self.AC_VID, self.AC_PID))
            else:
                self.log.info('Found USB U-X3 Power Switch on port %s.', self.com_port)
                self.serial = serial.Serial(port=self.com_port, baudrate=300, parity=serial.PARITY_NONE,
                                            bytesize=serial.EIGHTBITS)
        except Exception as e:
            raise ResourcePowerSwitchError('Error communicating with U-X3 Power Switch!, got error %s' % e)

    def power_on(self, socket_number=1):
        """ Performs power on operation for given socket number of USB U-X3 power  """
        self.power_cycle_fpga()
        self.log.info('Powering ON FPGA board on AC port #%s', socket_number)
        self.serial.write((r'echo *0%s1 >\\.\%s' % (socket_number, self.com_port)).encode())
        self.log.info('Waiting %s seconds for FPGA image to load...', self.fpga_load_delay)
        sleep(self.fpga_load_delay)
        self.serial.close()

    def power_off(self, socket_number=1):
        """ Performs power off operation for given socket number of USB U-X3 power  """
        self.power_cycle_fpga()
        self.log.info('Powering OFF FPGA board on AC port #%s', socket_number)
        self.serial.write((r'echo *0%s2 >\\.\%s' % (socket_number, self.com_port)).encode())
        self.log.info('Waiting %s seconds for FPGA image to load...', self.fpga_load_delay)
        sleep(self.fpga_load_delay)
        self.serial.close()

    def power_reset(self, socket_number=1):
        """ Performs power reset operation for given socket number of USB U-X3 power  """
        self.power_cycle_fpga()
        self.log.info('Powering RESET FPGA board on AC port #%s', socket_number)
        self.serial.write((r'echo *0%s3 >\\.\%s' % (socket_number, self.com_port)).encode())
        self.log.info('Waiting %s seconds for FPGA image to load...', self.fpga_load_delay)
        sleep(self.fpga_load_delay)
        self.serial.close()

    def power_reset_all(self):
        """
        Performs power reset operation on all socket numbers/ports of USB U-X3 power switch
        """
        self.power_cycle_fpga()
        for socket_number in self.socket_numbers:
            self.log.info('Powering RESET FPGA board on AC port #%s', socket_number)
            self.serial.write((r'echo *0%s3 >\\.\%s' % (socket_number, self.com_port)).encode())
        self.log.info('Waiting %s seconds for FPGA image to load...', self.fpga_load_delay)
        sleep(self.fpga_load_delay)
        self.serial.close()


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class ResourcePowerSwitchCli(ResourcePowerSwitch, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""
            def __init__(self):
                ResourcePowerSwitch.__init__(self)
                cli_support.CliOptions.__init__(self, ResourcePowerSwitch)

        RUN = ResourcePowerSwitchCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest

        class ResourcePowerSwitchUnitTests(BaseTest):
            def __init__(self, result):
                super(ResourcePowerSwitchUnitTests, self).__init__(result=result)
                self.power_switch = None

            def setup(self):
                self.power_switch = ResourcePowerSwitch()
                self.power_switch.set_config_details()

            def initiate(self):
                reset_socket_number = 1
                self.power_switch.power_reset(reset_socket_number)
                self.power_switch.power_reset_all()

            def complete(self):
                pass

            def teardown(self):
                pass

        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        TEST = ResourcePowerSwitchUnitTests(result=RESULTS)
        TEST.run()
