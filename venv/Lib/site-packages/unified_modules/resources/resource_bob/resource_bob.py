#!/usr/bin/env python
"""
Resource library for Bob Force Calibration Robot

BOB can be used to do button press on the handset.
It performs button press by applying a static load to the handset using a plunger.

The Bob controller receives serial commands over USB using the following port settings:
    Baud Rate: 115200
    Data Bits: 8
    Stop Bits: 1
    Parity: None
    Flow Control: None
    Termination Character: Carriage Return (\r)

For more details go through https://docs.cirrus.com/display/STUM/AN0501R1+-+Bob+User+Guide
"""

import sys
import serial
import time
from serial.serialutil import SerialException

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceBOBError(Exception):
    pass


class ResourceBOB(object):

    def __init__(self, port='COM4', timeout=10, baudrate=115200, retry_connection=3, verbose=False):
        self.log = logging.getLogger(ResourceBOB.__name__)
        self.verbose = verbose
        self._bob = None
        self.SERVO_DOWN_VALUE = 0
        self.SERVO_UP_VALUE = 100
        self.log.info('Attempting to connect to BOB on {}...'.format(port))
        self.connect(baudrate, retry_connection, port, timeout)

    def connect(self, baudrate, retry_connection, port, timeout):
        """
        Establish serial connection to BOB
        :param baudrate: Baudrate
        :param retry_connection: Number of retries upon connection failure
        :param port: Serial port number
        :param timeout: timeout in seconds
        """
        for retry_count in range(1, retry_connection + 1):
            try:
                self._bob = serial.Serial(port, baudrate=baudrate, timeout=timeout)
                break
            except SerialException:
                self.log.warning("Retry {}, Connecting to Serial port: {} failed".format(
                    retry_count, port))
                time.sleep(0.5)
        else:
            raise ResourceBOBError("Unable to connect to BOB on Port:{}, Baudrate: {}".format(
                    port, baudrate))
        self._bob.reset_input_buffer()
        self._bob.read_until('\n>')
        self.log.info('Connected.')

    def _cmd_(self, cmd):
        """
        Sending commands to serial port
        :param cmd: [str] command
        :return: response of the command
        """
        try:
            cmd = "%s\r" % cmd
            self._bob.write(cmd.encode())
            return self._bob.read_until('>').decode()
        except Exception as e:
            self.log.error('ERROR!, Command: %s execution failed, %s'.format(cmd, e))

    def home(self):
        """
        Set the BOB to HOME position(Home the motor and reset "0" position)
        HOME MUST be set before running any command on BOB
        """
        self.log.info('Homing BOB...')
        self._cmd_('home')
        self.log.info('Homing complete.')

    def move_abs(self, position):
        """
        Move the motor from HOME to given position
        :param position: Absolute position
        """
        self.log.info('Moving to absolute position: {} mm..'.format(position))
        self._cmd_('move abs {}'.format(position))
        self.log.info('Move complete.')

    def move_rel(self, distance):
        """
        Move the motor to relative position
        :param distance: Relative position
        """
        self.log.info('Moving relative {} mm...'.format(distance))
        self._cmd_('move rel {}'.format(distance))
        self.log.info('Move complete.')

    def move_servo(self, value):
        """
        Move the servo motor to the indicated position
        :param value range is 0 - 100
        """
        self.log.info('Moving servo to {}...'.format(value))
        self._cmd_('move srv {}'.format(value))
        self.log.info('Move complete.')

    def lower_arm(self, settle_time=0.0):
        """
        Lower the motor arm
        :param settle_time: Time delay after lowering arm
        """
        self.log.info('Lowering servo arm...')
        self._cmd_('move srv {}'.format(int(self.SERVO_DOWN_VALUE)))
        time.sleep(settle_time)
        self.log.info('Lowered.')

    def raise_arm(self):
        """
        Raise the motor arm to initial position
        """
        self.log.info('Raising servo arm...')
        self._cmd_('move srv {}'.format(int(self.SERVO_UP_VALUE)))
        self.log.info('Raised.')

    def press(self, dwell_time):
        """
        Performs a single press at the current location
        :param dwell_time: dwell time for button press
        """
        self.log.info('Pressing with {} seconds of dwell time...'.format(dwell_time))
        self._cmd_('press {}'.format(dwell_time))
        self.log.info('Press complete.')

    def park(self):
        """
        Home the motor and lower the plunger
        """
        self.log.info('Parking BOB...')
        self._cmd_('park')
        self.log.info('Parked.')

    def status_values(self):
        """
        It returns the values of given position and actual position
        """
        split_data = self.read_status()

        actual = float(split_data[4][-8:-2])
        target = float(split_data[3][-8:-2])
        status = True if (abs(target - actual) < 0.1) else False

        return {'actual': actual, 'target': target, 'status': status}

    def read_status(self):
        """
        Read current motor status
        :return: current motor status
        """
        raw_data = self._cmd_('status')
        split_data = raw_data.split('\n')
        if self.verbose:
            self.log.info(split_data)
        return split_data

    def close(self):
        """
        End the serial session with BOB
        """
        self._bob.close()


if __name__ == '__main__':
    if "--unittest" in sys.argv:
        from unified_modules.test_support.testresults import TestResults

        class ResourceBOBTest(ResourceBOB):
            def __init__(self, port='COM4'):
                super(ResourceBOBTest, self).__init__(port=port)
                self.results = TestResults()
                self.home()
                self.target_pos = 10
                self.settle_time = 5

            def test_bob_setup(self):
                self.move_abs(self.target_pos)
                self.results.assert_true(self.status_values()['status'],
                                         "Verify BOB is moved to target position")
                # Plunger presses button and Verification should be done at System level
                self.lower_arm(self.settle_time)
                # Plunger releases button and Verification should be done at System level
                self.raise_arm()


        res_bob_test = ResourceBOBTest()
        res_bob_test.test_bob_setup()
        res_bob_test.home()
        res_bob_test.close()

    else:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support


        class ResourceBOBCli(ResourceBOB, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                ResourceBOBCli.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceBOBCli)


        RUN = ResourceBOBCli()
