"""
Resource library for Programmable power supply
"""
import sys
import os
import subprocess

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourcePowerSupplyException(Exception):
    """Exception class for Power supply resource"""
    pass


class ResourcePowerSupply:
    """
    Resource library for Programmable power supply
    """
    def __init__(self):
        self.log = logging.getLogger(self.__class__.__name__)
        self.teraterm_app = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                                         'teraterm')

    def set_voltage_level(self, ps_level):
        """
        Set Voltage level on power supply
        @param ps_level: Power supply voltage level
        @return: Return code of executed command
        """
        ttpmacro = os.path.join(self.teraterm_app, 'ttpmacro.exe')
        ttl_file = os.path.join(self.teraterm_app, 'dc_power1688b.ttl')
        command = " ".join([ttpmacro, '/V', ttl_file, 'VOLT' + ps_level])
        self.log.info("Command: %s" % command)
        try:
            return subprocess.call(command, shell=True)
        except (subprocess.CalledProcessError, OSError) as exp:
            ResourcePowerSupplyException(exp)


if __name__ == '__main__':
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support


        class ResourcePowerSupplyCli(ResourcePowerSupply, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                ResourcePowerSupply.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourcePowerSupply)

        RUN = ResourcePowerSupplyCli()
    else:
        from unified_modules.test_support.testbaseclass import BaseTest

        class ResourcePowerSupplyUnitTests(BaseTest):
            def __init__(self, result):
                super(ResourcePowerSupplyUnitTests, self).__init__(result)
                self.power_supply = ResourcePowerSupply()

            def test_set_voltage_level(self, voltage_level):
                return_code = self.power_supply.set_voltage_level(voltage_level)
                self.result.assert_equal(return_code, 0, "Setting Voltage to 4.0 Volts")

            def complete(self):
                # Set 4.0 V
                self.test_set_voltage_level(0o40)
                self.result.assert_equal("P : PASS",
                                         "%s : %s" % (self.result.step_outcome(),
                                                      self.result.get_overall_outcome()),
                                         "Expected Pass")

            def teardown(self):
                self.result.report_result_to_tf()

        from unified_modules.test_support.testresults import TestResults

        RESULTS = TestResults()
        TEST = ResourcePowerSupplyUnitTests(result=RESULTS)
        TEST.run()
