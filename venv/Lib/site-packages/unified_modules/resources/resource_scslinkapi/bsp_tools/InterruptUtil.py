class InterruptUtil:

    ON_COLOR = "Red"
    OFF_COLOR = "Default"

    mask_map = { "INTC_ADC_MASK" : 0xFFF,
                 "INTC_EQ_MIX_MASK" : 0xFF,
                 "INTC_MBUS_MASK" : 0xFBFF }

    unmask_map = { "INTC_ADC_MASK" : 0x0,
                   "INTC_EQ_MIX_MASK" : 0x0,
                   "INTC_MBUS_MASK" : 0x10 }

    interrupt_names = [ "INTC_ADC_INT_ADC_A1_OVFL_INT", "INTC_ADC_INT_ADC_A2_OVFL_INT", "INTC_ADC_INT_ADC_A3_OVFL_INT", "INTC_ADC_INT_ADC_A4_OVFL_INT", "INTC_ADC_INT_ADC_B1_OVFL_INT", "INTC_ADC_INT_ADC_B2_OVFL_INT", "INTC_ADC_INT_ADC_C1_OVFL_INT", "INTC_ADC_INT_ADC_C2_OVFL_INT", "INTC_ADC_INT_ADC_C3_OVFL_INT", "INTC_ADC_INT_ADC_C4_OVFL_INT", "INTC_EQ_MIX_INT_MIXER1_OVFL_INT", "INTC_EQ_MIX_INT_MIXER2_OVFL_INT", "INTC_EQ_MIX_INT_MIXER3_OVFL_INT", "INTC_EQ_MIX_INT_MIXER4_OVFL_INT", "INTC_EQ_MIX_INT_EQ_CHA_OVFL_INT", "INTC_EQ_MIX_INT_EQ_CHB_OVFL_INT", "INTC_EQ_MIX_INT_EQ_BIQUAD_CHA_OVFL_INT", "INTC_EQ_MIX_INT_EQ_BIQUAD_CHB_OVFL_INT", "INTC_MBUS_INT_MBUS_LOCK_INT", "INTC_MBUS_INT_MBUS_UNLOCK_INT", "INTC_MBUS_INT_MBUS_LEVEL_BCAST_PGM_DONE_INT", "INTC_MBUS_INT_MBUS_BDATA_ERR_INT", "INTC_MBUS_INT_MBUS_DBULK_THRESH_DET_INT", "INTC_MBUS_INT_MBUS_UBULK_THRESH_DET_INT", "INTC_MBUS_INT_MBUS_BULK_PKT_READY_INT", "INTC_MBUS_INT_MBUS_ACEC_DISENGAGE_INT", "INTC_MBUS_INT_MBUS_ACEC_ENGAGE_INT", "INTC_MBUS_INT_MBUS_NSE_ERR_INT", "INTC_MBUS_INT_MBUS_UBULK_CRC_ERR_INT", "INTC_MBUS_INT_MBUS_SOUP_ERR_INT", "INTC_MBUS_INT_MBUS_8B10B_DIS_ERR_INT", "INTC_MBUS_INT_MBUS_8B10B_CODE_ERR_INT" ]

    @classmethod
    def fillRegisterNameLabel(cls, labels):
        for i, interrupt_name in enumerate(cls.interrupt_names):
            text = cls.truncateInterruptName(interrupt_name)
            labels[i].setValue(text)

    @classmethod
    def clearCheckBoxText(cls, check_boxes):
        for check_box in check_boxes:
            check_box.setLabel("")

    @classmethod
    def turnOffLeds(cls, leds):
        for led in leds:
            led.setColorByName(cls.OFF_COLOR)

    @classmethod
    def refreshState(cls, leds):
        for i, fieldName in enumerate(cls.interrupt_names):
            led = leds[i]
            fieldValue = device.readField(fieldName)
            color = cls.ON_COLOR if fieldValue == 1 else cls.OFF_COLOR
            led.setColorByName(color)

    @classmethod
    def maskAll(cls, device):
        for k, v in cls.mask_map.items():
            device.writeRegister(k, v)

    @classmethod
    def unmaskAll(cls, device):
        for k, v in cls.unmask_map.items():
            device.writeRegister(k, v)

    @classmethod
    def truncateInterruptName(cls, interrupt_name):
        text = interrupt_name.split('_')
        text = text[4:]
        return '_'.join(text)
