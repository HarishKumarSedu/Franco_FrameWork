# Copyright (c) 2018 Cirrus Logic, Inc and
# Cirrus Logic International Semiconductor Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license.  The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic.  Cirrus Logic assumes no responsibility or
# liability for any errors or inaccuracies that may appear in this document
# or any software that may be provided in association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic.
#
# Warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
#
## @file   MockWidgets.py
## @brief  Mock objects that resemble some of the SCS widgets

class MockWidgets:
	"""
	Mock objects that resemble some of the SCS widgets
	TODO:
	 - This is very incomplete both in terms of widgets and their properties
	 - Change to properties rather than using simple attributes. That would allow restricting the editability of some elements
	 - Use ObservableProperty. That would allow the registration of event handlers in WidgetUtils.bind_handler.
	"""

	@classmethod
	def is_mock_widget(cls, widget):
		"""
		@return [bool] True if the given object is a mock widget or mock panel
		"""
		return isinstance(widget, MockWidgets.WidgetBase) or isinstance(widget, MockWidgets.PanelControls)

	class PanelControls(dict):
		""" Mock object for context.controls """
		
		def __init__(self, controls = dict()):
			"""
			Constructor
			@param controls [dict] Controls to populate in this mock object
			"""
			self.__dict__ = self
			for name, control in controls.items():
				self[name] = control
	
	class WidgetBase(object):
		"""
		Base class of all mock widgets
		Contains generic properties and various functions used to set common properties
		"""
		def __init__(self, control_id):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			self.name = control_id
			self.x = 0
			self.y = 0
			self.width = 100
			self.height = 100
			self.visibility = True
			self.persistable = False

		def _add_gesturable_props(self):
			"""
			Protected method
			Adds the properties related to controls that react to user interactions (enabled in particular)
			"""
			self.enabled = True

		def _add_value_props(self, default):
			"""
			Protected method
			Adds the properties related to controls that have a value
			@param default [object] default value of the widget, usually int or string
			"""
			self.value = default
			self.persistable = True
	
	class Label(WidgetBase):
		""" Mock Label widget """
		def __init__(self, control_id = 'label_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_value_props('Label')
			self.fontColor = IDeanFontColor.IDEAN_DEFAULT
			self.fontStyle = IDeanFontStyles.IDEAN_FONT_STYLE_BODY
	
	class DiagramImage(WidgetBase):
		""" Mock DiagramImage widget """
		def __init__(self, control_id = 'diagram_image_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_gesturable_props()
			self.darkImage = ""
			self.lightImage = ""

	class ComboBox(WidgetBase):
		""" Mock ComboBox widget """
		def __init__(self, control_id = 'combo_box_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_value_props(1)
			self._add_gesturable_props()
			self.options = "Option1=1|Option2=2"
	
	class Slider(WidgetBase):
		""" Mock Slider widget """
		def __init__(self, control_id = 'slider_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_value_props(0.0)
			self._add_gesturable_props()
			self.min = 0.0
			self.max = 100.0
	
	class CheckBox(WidgetBase):
		""" Mock CheckBox widget """
		def __init__(self, control_id = 'check_box_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_value_props(0)
			self._add_gesturable_props()
			self.options = "Unchecked=0|Checked=1"
			self.enabled = True

	class RoundedButton(WidgetBase):
		""" Mock RoundedButton widget """
		def __init__(self, control_id = 'rounded_button_0'):
			"""
			Constructor
			@param control_id [string] ControlID (aka name) of this instance
			"""
			MockWidgets.WidgetBase.__init__(self, control_id)
			self._add_value_props(0)
			self._add_gesturable_props()
			self.fillColor = 'Default'
		
		def setColorByName(self, color):
			self.fillColor = color

		def getColorByName(self):
			return self.fillColor
