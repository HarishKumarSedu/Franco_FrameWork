#!/usr/bin/env python
"""
@brief
A resource library to BSP mock widgets.

@Description:

Supported features:
- Init mock widgets
@b Usage
@code

@endcode
"""
import os
import sys

from .bsp_tools.MockWidgets import MockWidgets
from .bsp_tools.InterruptUtil import InterruptUtil


class BspMockWidgetsError(Exception):
    """Define BspMockWidgetsError Exception type"""
    pass

class BspMockWidgets(object):
    """
    Wrapper to BSP mock widgets
    """
    def __init__(self):
        self.device = None

if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class BspMockWidgetsCli(BspMockWidgets, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""
            def __init__(self, *args, **kwargs):
                BspMockWidgets.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, BspMockWidgets)

        RUN = BspMockWidgetsCli()
    else:
        print("Unittests : TBD")
        rb0 = MockWidgets.RoundedButton('rounded_button_0')
        rb1 = MockWidgets.RoundedButton('rounded_button_1')
        rb2 = MockWidgets.RoundedButton('rounded_button_2')


        rb0.setColorByName('Red')
        rb1.setColorByName('Blue')
        rb2.setColorByName('Green')
        leds = [rb0, rb1, rb2]

        # make sure leds are on before turning off
        for led in leds:
            print(led.getColorByName())
            print(InterruptUtil.OFF_COLOR)

        # turn off the leds
        InterruptUtil.turnOffLeds(leds)

        # check if leds are turned off
        for led in leds:
            print(led.getColorByName())
            print(InterruptUtil.OFF_COLOR)
