import yaml
from os.path import basename as base_name
from atlassian import Confluence
from unified_modules.resources.resource_html_tags.html_tags_library import HtmlTags
from unified_modules.resources.resource_file_lib.resource_file_lib import ResourceFileLib as FileLib
from pprint import pprint


class DocsPageCreatorError(Exception):
    def __init__(self, message):
        super(DocsPageCreatorError, self).__init__(message)


class DocsPageCreator(object):
    def __init__(self, config=None, body=""):
        self.config = config
        if self.config is None:
            raise DocsPageCreatorError(message="Missing configuration file...")
        self.user = self.config['user']
        self.password = self.config['password']
        self.url = self.config['docs_url']
        self.space = self.config['space']
        self.title = self.config['title']
        self.parent_id = self.config['parent_id']
        if self.parent_id == "None":
            self.parent_id = None
        self.page_id = None
        self.table_tags = HtmlTags.Table()
        self.format_tags = HtmlTags.Format()
        self.html_body = body
        self.confluence = Confluence(url=self.url, username=self.user, password=self.password)
        self.image_storage_format = ""

    @staticmethod
    def get_docs_page_config(file_name):
        docs_page_file_path = FileLib().get_abs_path_relative_to_current_module(
            file_name, __file__)
        with open(docs_page_file_path, 'r') as f:
            config = yaml.safe_load(f)
        return config

    def append_html_or_text_content(self, content=""):
        self.html_body += content

    def add_html_table_from_2d_list(self, array=None):
        if not array:
            array = []
        html_table = self.table_tags.convert_from_2d_list_to_html_table(array)
        self.append_html_or_text_content(html_table)
        return html_table

    def add_line_break(self):
        line_break = self.format_tags.insert_line_break_tag()
        self.append_html_or_text_content(line_break)
        return line_break

    def add_paragraph(self, text="", bold_text=False):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_paragraph_tag(value=text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h1(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h1_tag(text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h2(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h2_tag(text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h3(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h3_tag(text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h4(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h4_tag(text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h5(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h5_tag(text)
        self.append_html_or_text_content(text)
        return text

    def add_heading_h6(self, text="", bold_text=True):
        if bold_text:
            text = self.format_tags.insert_strong_tag(value=text)
        text = self.format_tags.insert_h6_tag(text)
        self.append_html_or_text_content(text)
        return text

    def insert_image(self, filename=None, height=None, width=None):
        """
        :param filename: image file name
        :param height: can be a number of pixels in Integer format or a percentage in string format
        :param width: can be a number of pixels in Integer format or a percentage in string format
        :return: the image represented in html format
        """
        if height is None:
            height = "100%"
        if width is None:
            width = "100%"
        file_name = base_name(filename)
        self.confluence.attach_file(filename=filename,
                                    name=file_name,
                                    content_type="image/png",
                                    page_id=self.get_page_id())
        self.image_storage_format = """
          <ac:image ac:height="{}" ac:width="{}">
            <ri:attachment ri:filename="{}"/>
          </ac:image>
        """.format(height, width, file_name)
        return self.image_storage_format

    def add_page_index(self):
        page_index = """<ac:structured-macro ac:name="toc" ac:schema-version="1"/><br/>"""
        self.append_html_or_text_content(page_index)

    def get_page_id(self):
        page_id = self.confluence.get_page_id(space=self.space, title=self.title)
        return page_id

    def get_space(self, space_key):
        space = self.confluence.get_space(space_key=space_key)
        return space

    def create_space(self, new_space_name="DOM_SQA_TR"):
        self.confluence.create_space(space_key=new_space_name,
                                     space_name="Domino SQA Tests Results")

    def create_page(self, space=None, title=None, html_body=None, parent_id=None, type='page'):
        """

        :param space:
        :param title:
        :param html_body:
        :param parent_id:
        :param type:
        :return: page Info in JSON format
        """
        if space is None:
            space = self.space
        if title is None:
            title = self.title
        if html_body is None:
            html_body = self.html_body
        if parent_id is None:
            parent_id = self.parent_id

        status = self.confluence.create_page(
            space=space,
            title=title,
            body=html_body,
            parent_id=parent_id,
            type=type)
        if status:
            if "statusCode" in status.keys():
                message = "{}; {}; error code: {}".format(status["reason"],
                                                          status["message"],
                                                          status["statusCode"])
                raise DocsPageCreatorError(message=message)
            else:
                print("The page {} was created successfully".format(self.title))
        return status

    def append_content(self, new_content):
        self.confluence.append_page(page_id=self.get_page_id(),
                                    title=self.title,
                                    append_body=new_content)

    def get_all_spaces(self):
        return self.confluence.get_all_spaces()


if __name__ == "__main__":
    creator = DocsPageCreator()
    # add a page index (all the subtitles will be included in the index)
    creator.add_page_index()
    creator.add_heading_h1(text="Welcome to Domino SQA DEMO page!")
    creator.add_paragraph(text="This is a new paragraph", bold_text=True)
    space = creator.get_space(space_key="~srv_domino_sqa")
    pprint(space)
    # shows all the available spaces
    spaces = creator.get_all_spaces()
    pprint(spaces)

    list_array = FileLib.convert_csv_to_array("test_cases_table.csv")

    creator.add_html_table_from_2d_list(array=list_array)
    pprint(creator.create_page())
    image = creator.insert_image(filename="sample1.png", height=600, width=600)
    image2 = creator.insert_image(filename="sample2.png", height=600, width=600)
    creator.add_line_break()
    image_paragraph = creator.add_paragraph(image + image2)
    creator.append_content(new_content=image_paragraph)
    title2 = creator.add_heading_h2(text="Title type: Heading 2")
    creator.append_content(new_content=title2)
    title3 = creator.add_heading_h3(text="Title type: Heading 3")
    creator.append_content(new_content=title3)
    title4 = creator.add_heading_h4(text="Title type: Heading 4")
    creator.append_content(new_content=title4)
    title5 = creator.add_heading_h5(text="Title type: Heading 5")
    creator.append_content(new_content=title5)
