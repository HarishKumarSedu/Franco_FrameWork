# -*- coding: utf-8 -*-
import shutil, os
import squish
import sys

source(findFile('scripts',"real_names.py"));

class WISCE(WISCESystems, WISCETab, WISCEWindow):

    def select_system(self, system_number=None, codec_name =None):
        self.set_systems(ws_systemnumber=system_number, ws_codecname= codec_name)
        self.window_set()
        self.tabname = None

    def set_wiscetab_name(self, string):

        var2 = re.match("(\w+)", self.codec)
        if var2 is not None:
            self.tab_codec_name = str(var2.group())
            self.tabname = string + ' *' + str(self.tab_codec_name) + '*'

        print("self.tabname", self.tabname)
        self.wisce_tabset(self.tabname)
        print(self.get_wisce_tabname())
        


    def open_dspcore_in_wisce_leftpane(self,dsp_core):
        try:
            
            if not (object.exists(self.get_wisce_tabname())):
                expand(self.get_system())
                expand(self.get_codec())
                expand(self.get_dsps_tree())

                if (waitForObjectItem(self.get_dsps_tree(), dsp_core)):
                    test.log("{} found in left pane WISCE system Tree".format(dsp_core))
                    mouseClick(waitForObjectItem(self.get_dsps_tree(),dsp_core))
                else:
                    test.fail("{} not found in left pane WISCE system Tree".format(dsp_core))
        except:
            test.log(" Failed to open the DSP core {} tab in DSPs tree".format(dsp_core))

    def wisce_profile_load(self, profile_file):
        '''
         Load  the profile or routing file from WISCE
        :profile_file :  File name including path
        :return:
        '''
        try:

            mouseClick(waitForObject(self.get_wisce_menu()))
            mouseClick(waitForObject(self.get_wisce_load()))
            type(waitForObject(self.get_opendialog_edit()), profile_file)
            type(waitForObject(self.get_opendialog_edit()), "<Return>")
            # mouseClick(waitForObject(WISCEOpenDialog().GetOpenButton()))

            # Waiting for loading configuration to complete
            progress_bar = self.get_progress_bar()
            waitFor("object.exists(progress_bar)", 100000)
            waitFor("not object.exists(progress_bar)", 100000)
            
            test.log("profile file loaded")

        except:
            test.fail("Failed to load the profile {}".format(file))

    def flash_firmware(self,firmware_filename, dsp_core):

        try:
            self.set_wiscetab_name(dsp_core)
            self.open_dspcore_in_wisce_leftpane(dsp_core)

            if (object.exists(self.get_firmwarefile_choosebutton())):

                mouseClick(waitForObject(self.get_firmwarefile_choosebutton()))
                type(waitForObject(self.get_firmwarefile_dialog_edit()), firmware_filename)
                # clickButton(waitForObject(WISCEFirmwareFileDialog().GetOpenButton()))
                type(waitForObject(self.get_firmwarefile_dialog_edit()), "<Return>")

                if (object.exists(self.get_firmware_programbutton())):
                    mouseClick(waitForObject(self.get_firmware_programbutton()))
                    # Waiting for the firmware program to complete                    
                    progress_bar = self.get_progress_bar()
                    if waitFor("object.exists(progress_bar)", 200000):
                        test.log("WISCE progress bar appeared while flashing firmware on {0} core in {1}".format(dsp_core, self.codec))

                    if waitFor("not object.exists(progress_bar)", 200000):
                        test.log("WISCE progress bar disappeared")

                else:
                    test.fail("Fimrware program button missed")
        except:

            test.fail(" Failed to load the firmware on {0} in {1}".format(dsp_core, self.codec))


    def start_dsp_core(self,dsp_core):
        try:
            self.set_wiscetab_name(dsp_core)
            self.open_dspcore_in_wisce_leftpane(dsp_core)

            if (object.exists(self.get_dspcore_startbutton())):
                mouseClick(waitForObject(self.get_dspcore_startbutton()))
            else:
                test.log("{0} start button not found in codec {1}".format(dsp_core, self.codec))
        except:
            test.fail("Failed to start the {0} core in {1}".format(dsp_core, self.codec))

    def stop_dsp_core(self, dsp_core):
        try:
            self.set_wiscetab_name(dsp_core)
            self.open_dspcore_in_wisce_leftpane(dsp_core)
            if (object.exists(self.get_dspcore_stopbutton())):
                mouseClick(waitForObject(self.get_dspcore_stopbutton()))
            else:
                test.log("{0} Stop button not found in {1}".format(dsp_core, self.codec))
        except:
            test.fail("Failed to stop the {0} core in {1}".format(dsp_core, self.codec))

    def check_dsp_core_running(self, dsp_core):
        status = False
        try:
            self.set_wiscetab_name(dsp_core)
            self.open_dspcore_in_wisce_leftpane(dsp_core)
            status_text = waitForObject(self.get_dspcore_status()).text
            if (status_text == "Running"):
                status = True
                test.log("{} Core running".format(dsp_core))
            else:
                test.log("{} Core not running".format(dsp_core))

        except:
            test.fail("failed to get the DSP core status".format(dsp_core))
        return status



    def open_tuning_plugin(self, plugin_label):
        if (waitForObjectItem(self.get_codec(), "Tuning")):
            test.log("Tuning tree present in left pane")
            expand(waitForObjectItem(self.get_codec(), "Tuning"))

            if (waitForObjectItem(self.get_tuning_tree(), plugin_label)):
                test.log("plugin link present in left pane")
                mouseClick(waitForObjectItem(self.get_tuning_tree(),plugin_label))
                self.set_wiscetab_name(plugin_label)

                if not (object.exists(self.get_wisce_tabname())):
                    test.log("Failed to open the plugin '{}'".format(plugin_label))
            else:
                test.fail("plugin link missed in left pane")
        else:
            test.fail("Tuning tree missed in left pane")

    def close_wisce_history_Window(self):
        try:
            if object.exists(self.get_wisce_history_closebutton()):
                mouseClick(self.get_wisce_history_closebutton())
                test.log("WISCE History window closed")
        except:
            test.log("Failed to close WISCE tool History Window")


    def close_wisce(self):
        try:
            mouseClick(waitForObject(self.get_wisce_menu()))
            mouseClick(waitForObject(self.get_wisce_exit()))
        except:
            test.log("Failed to closed WISCE Tool")
            
    def refresh_wisce_system(self):
        try:
            mouseClick(waitForObject(self.get_wisce_systemreset_toolbaritem()))            
            # Waiting for the firmware program to complete                    
            progress_bar = self.get_progress_bar()
            if waitFor("object.exists(progress_bar)", 400000):
                test.log("WISCE progress bar appeared after resetting the WISCE")

            if waitFor("not object.exists(progress_bar)", 400000):
                test.log("WISCE progress bar disappeared")

        except:
            test.log("Failed to reset the WISCE system")




class WISCEWait(WISCEWindow):

    def set_waitwindow(self):
        self.window_set()

    def waitfor_wisce_to_complete_loading(self):
        try:
            toolbar_realname = self.get_wisce_toptoolbar()
            wisce_busy_box = self.get_busywindow()

            # wait for progress bar to close
            if waitFor("object.exists(toolbar_realname)", 120000):
                test.log("Wisce tool bar loaded")

            if waitFor("object.exists(wisce_busy_box)", 10000):
                test.log("WISCE progress bar appeared")

            if waitFor("not object.exists(wisce_busy_box)", 30000):
                test.log("WISCE progress bar disappeared")
        except:
            test.fail("Failed to wait for WISCE to Open")

    def waitfor_splashscreentoclose(self):
        try:
            wisce_splashscreen = self.get_plashscreen_window()
            if waitFor("object.exists(wisce_splashscreen)", 240000):
                test.log("Wisce splash screen loaded")

            if waitFor("not object.exists(wisce_splashscreen)", 240000):
                test.log("Wisce splash screen closed")
        except:
            test.fail("Failed to wait for Splash screen loading")


