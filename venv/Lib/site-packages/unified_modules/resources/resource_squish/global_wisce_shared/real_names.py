source(findFile('scripts',"squish_common.py"));
import re

class Realname():
    '''
    This class contains real names of WISCE tool , WISCE open Dialog and WISCE Firmware File Diaglog windows real names

    '''

    def set_inputs(self):
        self.wisceappview = "{class='Wolfson.WISCE.UI.WISCE.WISCEAppView' nativeObject.Name='WISCEAppView' type='Window'}"
        self.panldock = "{class='System.Windows.Forms.Panel' container=" + self.wisceappview + " nativeObject.Name='pnlDock' type='WindowsFormsControl'}"
        self.m_dockPanel = "{class='WeifenLuo.WinFormsUI.Docking.DockPanel' container=" + self.wisceappview + "nativeObject.Name='m_dockPanel' type='WindowsFormsControl'}"
        self.dockWindow = "{class='WeifenLuo.WinFormsUI.Docking.DockWindow' container=" + self.wisceappview + "TabIndex=2 type='WindowsFormsControl'}"
        self.dockpane = "{class='WeifenLuo.WinFormsUI.Docking.DockPane' container=" + self.wisceappview + " TabIndex=2 type='WindowsFormsControl'}"
        self.systemspane = "{container=" + self.wisceappview + " text='Systems' nativeObject.Name='SystemsPane' type='Window'}"

        self.systemstree = "{container=" + self.systemspane + " nativeObject.Name='m_treeView' type='Tree'}"
        self.lochnagar = "{container=" + self.systemstree + " text?='Lochnagar 2.0 *' type='TreeItem'}"
        self.tuningtable = "{nativeObject.Name='registerDataGridView' type='Table'}"
        self.progressbar = "{class='System.Windows.Forms.ProgressBar' nativeObject.Name='pbProcessing' type='ProgressBar'}"
        self.splashscreen = "{class='Wolfson.WISCE.UI.WISCE.SplashScreen' nativeObject.Name='SplashScreen' type='Window'}"
        self.wisceopendialog = "{class='#32770' text='Open' type='Dialog'}"
        self.wisceopendialogedit = "{class='Edit' id='1148' type='Edit'}"
        self.wiscefirmwarefiledialog = "{class='#32770' text='Firmware File' type='Dialog'}"
        self.wiscebusywindow = "{class='Wolfson.WISCE.UI.WISCE.BusyBox' nativeObject.Name='BusyBox' type='Window'}"
        self.wisce_inputerror_window = "{class='#32770'text='Input Error' type='Dialog'}"
        self.wisce_inputerror_okbutton = "{class='Button' container="+ self.wisce_inputerror_window + " text='OK' type='Button'}"

class WISCEDetectSystem(Realname):

    def  system_detect(self):
        self.wiscesystems = {1: {'system': None, 'Codec': None, 'FPGA': None},
                        2: {'system': None, 'Codec': None, 'FPGA': None},
                        3: {'system': None, 'Codec': None, 'FPGA': None},
                        4: {'system': None, 'Codec': None, 'FPGA': None}
                        }


        self.set_inputs()

        '''
        This method returns the WISCE systems structure like below
         1: {'system': 'Lochnagar 2.0 *COM15*', 'Codec': 'CS47L85 Rev C', 'FPGA': 'LN2 FPGA Rev'}
        :return: system dictionary format given below
        '''

        system_count = 1
        setup_board = ["LN2 FPGA", "LN1 FPGA" "WM0050" ]


        systems_objects = []
        

        

        #print "self.systemstree",self.systemstree
        systems_objects = SquishCommon.GetChildrenOfType( str(self.systemstree),"TreeItem")

        for object in systems_objects:
            system_textproperty = object.text
                
            #print "system_textproperty", system_textproperty
            
            #Get Lochnagar or Aardvark text
            system_text = re.match("((Lochnagar)\s(\d.\d)\s(\[\w+\]))| ((Aardvark)\s(\d.\d)\s(\[\w+\]))", system_textproperty)
            if system_text != None:
                system =str(system_text.group())                
                                
                system= system.replace('[', '*')  # Replacing the [ or ] with * for to generate WISCE systems real name for wild card comparison
                system = system.replace(']', '*') 
                
                #print "system",system            

                #Addd system text to dictonary
                self.wiscesystems[system_count]['system'] = system

                system_realname = "{container=" + self.systemstree + " text?='" + system + "' type='TreeItem'}"
                codec_fpga_objects = SquishCommon.GetChildrenOfType(system_realname,"TreeItem")

                for object in codec_fpga_objects:
                    codec_fpga_text = object.text
                    
                    # Get codec or LN2 FPGA text value
                    codec_fpga = re.match("((\w+)\s)+", codec_fpga_text)
                    
                    if codec_fpga != None:
                        codec_fpga = str(codec_fpga.group())
                        codec_fpga = codec_fpga.rstrip()
                        if any(setup in codec_fpga for setup in setup_board):
                            self.wiscesystems[system_count]['FPGA'] = codec_fpga
                        else:
                            self.wiscesystems[system_count]['Codec'] = codec_fpga

            system_count= system_count+1
        print(self.wiscesystems)

class WISCESystems(WISCEDetectSystem):

    def set_systems(self, ws_systemnumber=None, ws_codecname =None, ws_dspcore=None, plugin=None):
        self.system_detect()
        self.system = None
        self.codec = None
        self.dspcore = ws_dspcore


        if ws_systemnumber is None:
            if ws_codecname is None:
                for system in self.wiscesystems:
                    if self.wiscesystems[system]['Codec'] is not None:
                        self.system = self.wiscesystems[system]['system']
                        self.codec = self.wiscesystems[system]['Codec']
            else:
                for system in self.wiscesystems:
                    if self.wiscesystems[system]['Codec'] == str(ws_codecname):
                        self.system = self.wiscesystems[system]['system']
                        self.codec = self.wiscesystems[system]['Codec']

        if ws_systemnumber is not None and isinstance(ws_systemnumber, int):
            if ws_codecname is None:
                self.system = self.wiscesystems[ws_systemnumber]['system']
                self.codec =  self.wiscesystems[ws_systemnumber]['Codec']

        print(self.system)
        print(self.codec)

    def get_system(self):

        return "{container=" + self.systemstree + " text?='" + self.system + "' type='TreeItem'}"

    def get_codec(self):

        return "{container=" + self.get_system() + " text?='" + self.codec + "' type='TreeItem'}"

    def get_dsps_tree(self):

        return "{container=" + self.get_codec() + " text='DSPs' type='TreeItem'}"

    def get_dspcore(self):
        self.dspcore = "'{}'".format(self.dspcore)

        return  "{container=" + self.get_dsps_tree() + " text=" + self.dspcore + " type='TreeItem'}"

    def get_tuning_tree(self):

        return "{container=" + self.get_codec() + " text='Tuning' type='TreeItem'}"

    def get_plugin(self, plugin):

        self.pluginname = "'{}'".format(plugin)

        return "{container=" + self.get_tuning_tree() + " text=" + self.pluginname + " type='TreeItem'}"


class WISCEWindow(Realname):

    def window_set(self):
        self.set_inputs()

    def get_plashscreen_window(self):
        '''

        :return: Real name of SplashScreen window
        '''
        return self.splashscreen

    def get_progress_bar(self):
        '''

        :return: Real name of WSICE progress bar
        '''
        return self.progressbar

    def get_busywindow(self):

        return self.wiscebusywindow


    def get_wisce_menubar(self):

        return "{container=" + self.wisceappview + " class='System.Windows.Forms.MenuStrip' nativeObject.Name='menuStrip' type='Menubar'}"


    def get_wisce_toptoolbar(self):

        return "{container=" + self.wisceappview + " class='System.Windows.Forms.ToolStrip' nativeObject.Name='toolBar' type='Toolbar'}"


    def get_wisce_bottomtoolbar(self):

        return "{container=" + self.wisceappview + " class='System.Windows.Forms.ToolStrip' nativeObject.Name='statusStrip' type='Toolbar'}"


    def get_wisce_systemreset_toolbaritem(self):

        return "{container=" + self.wisceappview + " text='Refresh System' nativeObject.Name='refreshSystemToolBarOption' type='ToolbarItem'}"


    def get_wisce_menu(self):
        '''
        This method returns the real name of WISCE File Menu
        :return: Real name of WISCE 'File' menu
        '''

        return "{container=" +self.get_wisce_menubar() + " nativeObject.Name='FileMenu' type='MenuItem'}"


    def get_wisce_load(self):
        '''
        This method returns the real name for 'Load' option present in WISCE File menu
        :return: Real name of WISCE 'Load' menu
        '''
        return "{container=" + self.get_wisce_menu()+ " text='L&oad...' nativeObject.Name='loadToolStripMenuItem' type='MenuItem'}"


    def get_wisce_savesettings(self):
        '''
        This method used for getting the real name for 'Save settings' option present in WISCE File Menu
        :return: Real name of WISCE 'Save Settings' menu
        '''
        return "{container=" + self.get_wisce_menu()+ " text='&Save Settings' nativeObject.Name='saveSettingsToolStripMenuItem' type='MenuItem'}"


    def get_wisce_savepanelsettings(self):
        '''
        This method used for getting the real name for 'Panel settings' option present in WISCE FIle menu-> 'Save Settings'
        :return: Real name of WISCE 'Panel settings' menu
        '''
        return "{container=" + self.get_wisce_savesettings()+ " text='&Panel settings...' nativeObject.Name='panelSettingsToolStripMenuItem' type='MenuItem'}"


    def get_wisce_exit(self):
        '''
        Thsi method used for getting the real name for 'Exit' option present in WISCE File menu.
        :return: Real name of WISCE 'Exit' menu
        '''
        return "{container=" + self.get_wisce_menu()+ " text='E&xit' nativeObject.Name='exitToolStripMenuItem' type='MenuItem'}"
    
    def get_wisce_historytab(self):
        
        return "{container=" + self.wisceappview+ " class='WeifenLuo.WinFormsUI.Docking.DockWindow' nativeObject.TabIndex='5' enabled='true' visible='true' type='WindowsFormsControl'}"

    def get_wisce_history_closebutton(self):
        '''
        :return: Real name of history window close button
        '''      
    
        return "{container=" + self.get_wisce_historytab()+ " class='WeifenLuo.WinFormsUI.Docking.VS2005DockPaneCaption+InertButton'  tooltip='Close' type='WindowsFormsControl'}"


    def get_wisce_opendialog(self):
        '''
        :return:
        '''
        return self.wisceopendialog


    def get_opendialog_edit(self):

        return self.wisceopendialogedit


    def  get_opendialog_openbutton(self):

        return "{class='Button' text='Open' type='RadioButton'}"

    def get_wisce_firmwarefile_dialog(self):

        return self.wiscefirmwarefiledialog


    def get_firmwarefile_dialog_edit(self):
        return "{container=" + self.wiscefirmwarefiledialog + " class='Edit' id='1148' type='Edit'}"


    def get_firmwarefile_dialog_openbutton(self):
        return "{container=" +self.wiscefirmwarefiledialog + " class='Button' id='1' text='Open' type='RadioButton'}"



class WISCETab(Realname):


    def wisce_tabset(self, tabname):
        self.set_inputs()
        self.tabname = tabname


    def get_wisce_tabname(self):
        '''
        This class method returns the real name of the WISCE tabs like DSP4 and Plugin tabs like
        :param pane_name: Pane Name visible on WISCE tabs like 'SoundClear Duet (CS47L85)'
        :return: WISCE DSP programming and tuning pane real names
        '''

        return "{container=" + self.wisceappview + " text='Tuning' visible='true' nativeObject.Name='TuningPane' nativeObject.TabText?='" + self.tabname + "' type='Window'}"



    def get_firmwarefile_groupbox2(self):
        '''
        This method used for getting the Firmware File GroupBox real name based on the tab  like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
        :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
        :return: real name of get_firmwarefile_groupbox in DSP(dsp number) core tab in WISCE
        '''

        return "{container=" + self.get_wisce_tabname()+ " nativeObject.Name='groupBox2' text='Firmware File' type='GroupBox'}"


    def get_firmwarefile_groupbox1(self):
        '''
        This method used for getting the Core Information GroupBox real name based on the tab  like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
        :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
        :return: real name of get_firmwarefile_groupbox in DSP(dsp number) core tab in WISCE
        '''
        return "{container=" + self.get_wisce_tabname()+ " nativeObject.Name='groupBox1' text='Core Information' type='GroupBox'}"


    def get_firmwarefile_choosebutton(self):
        '''
          This method used for getting the Choose Button real name present in WISCE tabs like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
          :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
          :return: real name of choose button
          '''
        return "{container = " + self.get_firmwarefile_groupbox2() + " text = 'Choose...' nativeObject.Name = 'btnChoose' type = 'Button'}"



    def get_firmware_programbutton(self):
        '''
          This method used for getting the Get program button real name present in WISCE tabs like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
          :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
          :return: real name of program button
          '''
        return "{container=" + self.get_firmwarefile_groupbox2() + " text='Program' nativeObject.Name='btnProgram' type='Button'}"



    def get_dspcore_startbutton(self):
        '''
         This method used for getting dsp core start button real name present in WISCE tabs like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
         :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
         :return: real name of dsp core start button
         '''
        return "{container=" + self.get_firmwarefile_groupbox1() + " nativeObject.Name='btnStart' text='Start' type='Button'}"


    def get_dspcore_stopbutton(self):
        '''
         This method used for getting dsp core stop button real name present in WISCE tabs like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
         :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
         :return: real name of dsp core stop button
         '''
        return "{container=" + self.get_firmwarefile_groupbox1() + " nativeObject.Name='btnStart' text='Stop' type='Button'}"


    def get_dspcore_status(self):
        '''
         This method used for getting dsp core stop button real name present in WISCE tabs like 'DSP1 (CS47L85)' .. 'DSP2 (CS47L85)'
         :param tabname: Tab name appearing in the WISCE when tab opened for dsp core firmware flash
         :return: real name of dsp core Status button
        '''
        return "{container=" + self.get_firmwarefile_groupbox1() + " nativeObject.Name='txtStatus' type='Edit'}"



#exception
class CustomError(Exception):
    pass