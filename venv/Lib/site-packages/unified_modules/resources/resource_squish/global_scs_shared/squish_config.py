import os
import sys
import yaml
import platform

def rawstring(input_string):
    """Returns a raw string representation of text"""
    escape_dict = {'\a': r'\a',
                   '\b': r'\b',
                   '\c': r'\c',
                   '\f': r'\f',
                   '\n': r'\n',
                   '\r': r'\r',
                   '\t': r'\t',
                   '\v': r'\v',
                   '\'': r'\'',
                   '\"': r'\"',
                   '\0': r'\000',
                   '\1': r'\001',
                   '\2': r'\002',
                   '\3': r'\003',
                   '\4': r'\004',
                   '\5': r'\005',
                   '\6': r'\006'}

    new_string = ''
    for char in input_string:
        try:
            new_string += escape_dict[char]
        except KeyError:
            new_string += char
    return new_string


class SquishConfig:

    PATH_TO_TESTDATA_FOLDER = ""
    BSP_PATH = ""
    CODE_COVERAGE = False

    def __init__(self, config_yml="squish_resource_config.yml"):
        config_yml = rawstring(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..",
                                                            "project_shared", config_yml)))
        if not os.path.exists(config_yml):
            raise OSError('File : %s not found ' % config_yml)
        with open(config_yml, "r") as yml_file_handle:
            yml_content = yaml.safe_load(yml_file_handle)
        squish_config = yml_content['config']
        self.PATH_TO_TESTDATA_FOLDER = os.path.join(os.getcwd(), "..", "shared", "testdata")
        self.PATH_TO_REFDATA_FOLDER = os.path.join(os.getcwd(), "..", "shared", "refdata")
        self.BSP_PATH = squish_config['scs_programdata']
        self.JAVA_PATH = squish_config['java_path']
        self.SCS_METADATA = os.path.join(squish_config['scs_logs_path'], "..", "workspace")
        self.SCS_VERSION_SHORT = squish_config['scs_short_version']
        self.SCS_VERSION_WORKSPACE = squish_config['scs_workspace_version']
        self.PATH_TO_BSP_PACKAGE = squish_config['bsp_package_path']
        self.PATH_TO_SCS = squish_config['scs_path']
        self.PATH_TO_TESTS = squish_config['test_inputs_path']
        self.PATH_TO_PROJECT_SHARED =os.path.abspath(os.path.join(os.path.dirname(__file__),
                                                                  "..", "..","project_shared"))

    def getBspPath(self):
        return self.BSP_PATH

    def getSCSIdeName(self):
        """
        Method set tools

        @return SCS_IDE [string] name of IDE depending on the operating system

        Usage:
        SuiteGlobals.getSCSIdeName()
        """
        if "Windows" in platform.system():
            SCS_IDE = "SoundClearStudio.exe"
        elif "Darwin" in platform.system():
            SCS_IDE = "SoundClearStudio"
        elif "Linux" in platform.system():
            SCS_IDE = "SoundClearStudio"
        else:
            sys.exit("OS not found.")
        return SCS_IDE

    def getSCSJavaPath(self):
        """
        Method returns path to java.exe
        """
        return self.JAVA_PATH

    def getPathToSoundClearStudio(self):
        """
        Returns the path to SCS metadata
        """
        return self.SCS_METADATA


SuiteGlobals = SquishConfig(config_yml="squish_resource_config.yml")
