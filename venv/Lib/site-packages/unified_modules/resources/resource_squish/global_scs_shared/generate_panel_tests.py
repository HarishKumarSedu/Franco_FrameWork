"""
SCS Panel file parser and generate squish panel tests, framework tests.

Parses .panel file and extracts container, bitfield names and construct the squish, framework tests.
"""
import json
import os


class PanelInfo:
    """
    Class to group up the methods dealing with .panel files
    """

    def parser_panel_get_container_and_widgets(self, panel_file_handler):
        """
        Parse the .panel file and extracts the bit_field and container names
        :param panel_file_handler [FileHandler] file handler of .panel file
        :return: bit_field_names [Dict] container name(key) and bit_fields(value) in it.
                 actions [Dict] radio button bit field(key) and actions(value) of it.
        """
        required_widgets = ["ButtonWidgetModel",
                            "CheckBoxWidgetModel",
                            "ComboBoxWidgetModel",
                            "TextFieldWidgetModel",
                            "NumericFieldWidgetModel",
                            "RadioButtonWidgetModel",
                            "ToggleButtonWidgetModel",
                            "SliderWidgetModel"]
        panel = json.load(panel_file_handler)
        container_models = panel['Panel']['widgets']
        if 'BlankContainerModel' in container_models:
            blank_container_model = container_models['BlankContainerModel']
        else:
            return None, None
        containers = []
        bit_field_names = {}
        actions = {}
        for b_element in blank_container_model:
            for b_entry in b_element['properties']['entry']:
                if b_entry['key'] == 'name':
                    container_name = b_entry['value']['value'].encode('utf-8')
                    containers.append(container_name)
            bit_field_names[container_name] = []
            widget_models = b_element['widgets']
            for widget_model in widget_models:
                for w_element in widget_models[widget_model]:
                    for w_entry in w_element['properties']['entry']:
                        if w_entry['key'] == 'name' and widget_model in required_widgets:
                            bit_field_name = w_entry['value']['value'].encode('utf-8')
                            bit_field_names[container_name].append(bit_field_name)
                            actions[bit_field_name] = []
                        if 'radio_name_' in w_entry['key'] and widget_model in required_widgets:
                            action = w_entry['value']['value'].encode('utf-8')
                            actions[bit_field_name].append(action)

        return bit_field_names, actions


class GetPanelTestCode:
    """
    Class to group up the methods returning squish test common code content
    """

    def get_main_string(self):
        """
        frame main method of squish test
        :return: main_string [string] squish test main method
        """
        main_string = """\n\ndef main():
    demo = DemoClass()
    demo.run_test()\n"""
        return main_string

    def get_common_code(self):
        """
        frame squish test steps of forming reg_map_name and parse xml populate data
        :return: set_inputs [string]
        """
        set_inputs = """        self.set_inputs()
        bit_field_names = [bit_field.replace(prefix, '') for bit_field in bit_field_group
                           for prefix in MODEL_NAME_PREFIX.__dict__.values() if prefix in bit_field]
        self.parse_xml_populate_data(bit_field_names, self.reg_map_name)
        for bit_field, bit_field_name in zip(bit_field_group, bit_field_names):\n"""
        return set_inputs


class WidgetCondition:
    """
    Class to group up the methods returning squish test widget condition code
    """

    def get_check_box_string(self):
        """
        frame check box widget conditional string
        :return: check_box_string [string] check box widget conditional string
        """
        check_box_string = """            if MODEL_NAME_PREFIX.CheckBox in bit_field:
                self.verify_check_box(bit_field_name,
                                      self.object.get_check_box_widget(container_name=container_name,
                                                                       check_box_name=bit_field))\n"""
        return check_box_string

    def get_combo_box_string(self):
        """
        frame combo box widget conditional string
        :return: combo_box_string [string] combo box widget conditional string
        """
        combo_box_string = """            if MODEL_NAME_PREFIX.ComboBox in bit_field:
                self.verify_combo_box(bit_field_name,
                                      self.object.get_combo_box_widget(container_name=container_name,
                                                                       combo_box_name=bit_field))\n"""
        return combo_box_string

    def get_numeric_field_string(self):
        """
        frame numeric field widget conditional string
        :return: numeric_field_string [string] numeric field widget conditional string
        """
        numeric_field_string = """            if MODEL_NAME_PREFIX.NumericField in bit_field:
                self.verify_text_field(bit_field_name,
                                       self.object.get_text_box(container_name=container_name, name=bit_field))\n"""
        return numeric_field_string

    def get_radio_button_string(self):
        """
        frame radio button widget conditional string
        :return: radio_button_string [string] radio button widget conditional string
        """
        radio_button_string = """            if MODEL_NAME_PREFIX.RadioButton in bit_field:
                self.verify_radio_button(bit_field_name,
                                         self.object.get_radio_button(container_name=container_name,
                                                                      radio_group=bit_field), radio_actions[bit_field])\n"""
        return radio_button_string

    def get_slider_string(self):
        """
        frame slider widget conditional string
        :return: slider_string [string] slider widget conditional string
        """
        slider_string = """            if MODEL_NAME_PREFIX.Slider in bit_field:
                label_name = 'label_value_' + bit_field_name
                self.verify_slider(bit_field_name,
                                   slider_txt_field_real_name=self.object.get_slider_widget(container_name=container_name, slider_name=bit_field),
                                   slider_real_names=[self.object.get_slider_knob_reserved(container_name=container_name, slider_name=bit_field),
                                                      self.object.get_slider_knob(container_name=container_name, slider_name=bit_field)],
                                   label_real_name=self.object.get_label_widget(container_name=container_name, label_name=label_name),
                                   verify_reserve_bits=False)\n"""
        return slider_string


class GenerateSquishTest:
    """
    Class to group up the methods to create squish test
    """

    def create_squish_test(self, bsp, panel_name, class_name, folder_name, container, bit_fields, actions, panel):
        """
        Construct and creates squish test
        :param bsp: [string] device bsp name Eg: cornell, trucks, berry etc.,
        :param panel_name: [string] panel name Eg: "Device Overview", "PDM Output" etc.,
        :param class_name: [string] constructed clase name of squish test Eg: Ts36GuiCornellDeviceOverview.
        :param folder_name: [string] squish test suite folder name for placing squish tests under it.
        :param container: [string] container name
        :param bit_fields: [list] bit filed names under a container
        :param actions: [dict] actions of radio button widget
        :param panel: [string] Panel name
        :return: [string] Squish test file path
        """
        source_string = """source(findFile("scripts", "%s.py"))\n\n\n""" % bsp
        class_string = "class %s(BasePanelVerify):\n" % class_name
        method_name = "    def run(self):\n"
        bit_field_group_string = "        bit_field_group = %s\n" % bit_fields
        container_string = "        container_name = '%s'\n" % container
        panel_test_file_name = '%s/test.py' % folder_name.rstrip()
        code = list()
        code.append(source_string)
        code.append(class_string)
        code.append(method_name)
        code.append(bit_field_group_string)
        code.append(container_string)
        radio_actions = {}
        doc_string_iden = '"""'
        for bit_field in bit_fields:
            if 'radio_group' in bit_field:
                radio_actions[bit_field] = actions[bit_field]
        if radio_actions:
            code.append("        radio_actions = %s\n" % radio_actions)
        panel_code = GetPanelTestCode()
        widget_condition = WidgetCondition()

        code.append(panel_code.get_common_code())
        squish_test_doc_string = """
Test purpose:
To Verify Project_name Panel_name Container_name

Steps:
1. Clean History Window
2. Open Panel_name panel
"""
        combo_box_check, radio_group_check, check_box_check, numeric_field_check, slider_check = False, False, False, False, False
        else_flag = False
        for index, bit_field in enumerate(bit_fields):
            squish_test_doc_string = "".join([squish_test_doc_string, "%d. Verify %s \n" % (index+3, bit_field)])
            if 'combo_box' in bit_field and combo_box_check is False:
                if else_flag:
                    code.append(widget_condition.get_combo_box_string().replace(" if", " elif").replace('object', bsp))
                else:
                    code.append(widget_condition.get_combo_box_string().replace('object', bsp))
                combo_box_check = True
                else_flag = True
            elif 'check_box' in bit_field and check_box_check is False:
                if else_flag:
                    code.append(widget_condition.get_check_box_string().replace(" if", " elif").replace('object', bsp))
                else:
                    code.append(widget_condition.get_check_box_string().replace('object', bsp))
                check_box_check = True
                else_flag = True
            elif 'numeric_field' in bit_field and numeric_field_check is False:
                if else_flag:
                    code.append(widget_condition.get_numeric_field_string().replace(" if", " elif").replace('object',
                                                                                                            bsp))
                else:
                    code.append(widget_condition.get_numeric_field_string().replace('object', bsp))
                numeric_field_check = True
                else_flag = True
            elif 'radio_group' in bit_field and radio_group_check is False:
                if else_flag:
                    code.append(widget_condition.get_radio_button_string().replace(" if", " elif").replace('object',
                                                                                                           bsp))
                else:
                    code.append(widget_condition.get_radio_button_string().replace('object', bsp))
                radio_group_check = True
                else_flag = True
            elif 'slider_' in bit_field and slider_check is False:
                if else_flag:
                    code.append(widget_condition.get_slider_string().replace(" if", " elif").replace('object', bsp))
                else:
                    code.append(widget_condition.get_slider_string().replace('object', bsp))
                slider_check = True
                else_flag = True

        code.append(panel_code.get_main_string().replace('DemoClass', class_name).replace('demo', panel_name))
        code = ''.join(code)
        f = open(panel_test_file_name, 'w')
        squish_test_doc_string = squish_test_doc_string.replace('Project_name', bsp)
        squish_test_doc_string = squish_test_doc_string.replace('Panel_name', panel)
        squish_test_doc_string = squish_test_doc_string.replace('Container_name', container)

        f.write(''.join([doc_string_iden, squish_test_doc_string, doc_string_iden, '\n']))
        f.write(code)
        f.close()
        return os.path.abspath(panel_test_file_name)

    def create_squish_support_files(self, squish_folder_name, squish_test_folders):
        """
        creates squish test suite helper folders, files [refdata, testdata, tools folders .gitkeep, README.txt files]
        :param squish_folder_name: [string] squish test suite folder name for placing squish helper folders
                                            and files under it
        :param squish_test_folders: [list] squish test folder names
        :return: no return
        """
        ref_data = "%s/shared/refdata" % squish_folder_name
        test_data = "%s/shared/testdata" % squish_folder_name
        tools = "%s/shared/tools" % squish_folder_name
        for d in (ref_data, test_data, tools):
            self.create_dir(d)
            open("%s/.gitkeep" % d, 'a').close()
        open("%s/README.txt" % tools, 'a').close()
        suite_conf_string = """AUT=SoundClearStudio
CLASSPATH=
ENVVARS=envvars
HOOK_SUB_PROCESSES=true
IMPLICITAUTSTART=0
LANGUAGE=Python
TEST_CASES=
VERSION=3
WRAPPERS=Java"""
        code = suite_conf_string.replace("TEST_CASES=", "TEST_CASES=%s" % ' '.join(squish_test_folders))
        f = open("%s/suite.conf" % squish_folder_name, 'w')
        f.write(code)
        f.close()

    def create_dir(self, path):
        """
        Create the provided folder path.
        :param path: [String] folder name
        :return: no return
        """
        if not os.path.exists(path):
            os.makedirs(path)


class GenerateFrameworkTest:
    """
    Class to group up the methods to create framework test
    """

    def create_framework_test(self, bsp, panel, suite_dir_name, class_name,
                              folder_name, frame_work_test_name, container):
        """
        Construct and creates framework test
        :param bsp: [string] device bsp name Eg: cornell, trucks, berry etc.,
        :param panel: [string] panel name Eg: "Device Overview", "PDM Output" etc.,
        :param suite_dir_name: [string] Squish test suite directory name
        :param class_name: [string] constructed class name of framework test Eg: Ts36GuiCornellDeviceOverview etc.,
        :param folder_name: [string] project folder name for placing framework tests under it.
        :param frame_work_test_name: framework test name
        :param container: [string] container name
        :return: [string] framework test file path
        """
        doc_string_iden = '"""'
        test_doc_string = """
Test purpose:
To Verify Project_name Panel_name Container_name group controls

@b Description
This module implements <ticket_id> in Python.

Scope:

Test Method:

Test Setup (TS):

Equipment Required: DUT

Test Initialization(TI):
Clean History Window
Open Panel_name panel

Test Completion (TC):
Check register values exporting the history of the affected registers

Iterations (i):

@b Pass/fail @b criteria

@b Usage
"""
        frame_work_string = """import sys
from unified_modules.test_support.testbaseclass import campaigns, dut_types
from unified_modules.test_support.testresults import TestResults
from um_framework.um_baseclass import BSP

from um_framework.um_baseclass import BST_TARGET_DEVICES
from um_framework.base_gui_squish import BaseGuiSquish
from um_framework.um_framework import UmFramework


@campaigns(['gui', 'regression', '_panel_'])
@dut_types(BST_TARGET_DEVICES[BSP.Object])
class ClassName(BaseGuiSquish):
    def __init__(self, result=None, testsystem=None):
        super(ClassName, self).__init__(result, testsystem)
        self.panel_test_case = 'tst_ClassName'
        self.panel_test_suite = "suite_name"
        self.test_case_inputs['panel_name'] = '_Panel_'


if __name__ == "__main__":
    TEST = ClassName(TestResults(), UmFramework())
    RETURN_CODE, _ = TEST.run()
    sys.exit(RETURN_CODE)
"""
        panel_name = panel.replace(' ', '_')
        if '->' in panel_name:
            panel_name = panel_name.split("->")[1]
        test_doc_string = test_doc_string.replace('Project_name', bsp)
        test_doc_string = test_doc_string.replace('Panel_name', panel)
        test_doc_string = test_doc_string.replace('Container_name', container)

        frame_work_string = frame_work_string.replace('ClassName', class_name)
        frame_work_string = frame_work_string.replace('Object', bsp.capitalize())
        frame_work_string = frame_work_string.replace('suite_name', suite_dir_name)
        frame_work_string = frame_work_string.replace('_panel_', panel_name.lower())
        frame_work_string = frame_work_string.replace('_Panel_', panel)
        framework_test_file_name = '/'.join([folder_name, frame_work_test_name])
        f = open(framework_test_file_name, 'w')
        f.write(''.join([doc_string_iden, test_doc_string, doc_string_iden, '\n']))
        f.write(frame_work_string)
        f.close()
        return os.path.abspath(framework_test_file_name)
