# Copyright (c) 2017 Cirrus Logic, Inc and
# Cirrus Logic International Semiconductor Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license.  The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic.  Cirrus Logic assumes no responsibility or
# liability for any errors or inaccuracies that may appear in this document
# or any software that may be provided in association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic.
#
# Warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
#
## @file   real_names.py
## @brief  This script contains all real names needed for all panels in SCS


class Overview:
    """
    Class contains all real names from Overview panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Overview' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.comboBoxWidget = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"
        self.diagramContainer = "{container=" + self.cTabItem + " styletype='diagram-container' visible='true'}"
        self.diagramLinkWidget = "{container=" + self.diagramContainer + " styletype='diagram-link-widget' visible='true'}"
        self.contentsPane = "{container=" + self.cTabItem + " styletype='contents-pane' visible='true'}"

    def getCTabItem(self):
        """
        @return [string] CTabItem real name
        Usage:
        Overview().getCTabItem()
        """
        return self.cTabItem

    def getComboBoxWidget(self):
        """
        Usage:
        Overview().getComboBoxWidget()
        """
        return self.comboBoxWidget

    def getComboBoxWidgetLabel(self, name):
        """
        @param name [string] name of combobox widget label
        @return combobox widget label real name

        Usage:
        Overview().getComboBoxWidgetLabel("Basic Headset (Full Speed)")
        """
        label = "{caption='" + name + "' container=" + self.comboBoxWidget + " styletype='label label-name' visible='true'}"
        return label

    def getOverviewButton(self, name):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        Overview().getOverviewButton("Load")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' buttontext='" + name + "'}"
        return button

    def getWidgetLabel(self, name, format="IDEAN_FONT_STYLE_BODY_2"):
        """
        @param name [string] name of widget
        @param format [string] text format
        @return widget label real name

        Usage:
        Overview().getWidgetLabel("Start")
        Overview().getWidgetLabel("USB Settings")
        Overview().getWidgetLabel("Event handling", "IDEAN_FONT_STYLE_BODY"))
        """
        label = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' value='" + name + "' fontproperty.value='" + format + "'}"
        return label

    def getToggleButtonWidget(self):
        toggleButtonWidget = "{container=" + self.blankContainer + " styletype='toggle-button-widget' visible='true'}"
        return toggleButtonWidget

    def getToggleButton(self, state):
        """
        @param state [string] state of button - can be "ON" or "OFF"

        Usage:
        Overview().getToggleButton("ON)
        """
        toggleButtonWidget = "{container=" + self.blankContainer + " styletype='toggle-button-widget' visible='true'}"
        if state == "ON":
            toggleButton = "{caption='" + state + "' container=" + toggleButtonWidget + " styletype='button button-off-secondary button-small' visible='true'}"
            if not object.exists(toggleButton):
                toggleButton = "{caption='" + state + "' container=" + toggleButtonWidget + " styletype='button button-small button-off-secondary' visible='true'}"
        elif state == "OFF":
            toggleButton = "{caption='" + state + "' container=" + toggleButtonWidget + " styletype='button button-on-default button-small' visible='true'}"
            if not object.exists(toggleButton):
                toggleButton = "{caption='" + state + "' container=" + toggleButtonWidget + " styletype='button button-small button-on-secondary' visible='true'}"
        else:
            test.fail("FAIL", "Wrong second parameter")
        return toggleButton

    def getDiagramLinkWidget(self, folder_panel):
        """
        @param  folder_panel [string] folder/panel string

        Usage:
        Overview().getDiagramLinkWidget("Hardware IO/Pin Map.panel")
        """
        diagramLink = "{container=" + self.blankContainer + " styletype='diagram-link-widget' visible='true' value?='" + folder_panel + "'}"
        return diagramLink

    def getDiagramLinkItem(self, name):
        """
        @param  name [string] name of diagram link item

        Usage:
        Overview().getDiagramLinkItem("diagram_link_1")
        """
        widgetName = "{container=" + self.diagramContainer + " styletype='diagram-link-widget' visible='true' model.name='" + name + "'}"
        realName = "{container=" + widgetName + " styletype='rectangle css-diagrambordercolor-1 css-borderwidth-20' visible='true'}"
        return realName

    def getRoundedButton(self, buttonText):
        """
        @param buttonText [string] text of the Rounded Button
        @return [string] Rounded Button real name

        Usage:
        Overview().getRoundedButton("6")
        """
        roundedButton = "{container=" + self.blankContainer + " styletype='rounded-button-widget' visible='true' model.text='" + buttonText + "'}"
        return roundedButton

    def getContentsPane(self):
        """
        Usage:
        Overview().getContentsPane()
        """
        return self.contentsPane


class TemplateConfiguration:
    """
    Class contains all real names from Template Configuration panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Template Configuration' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.comboBoxWidget = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"

    def getCTabItem(self):
        """
        Usage:
        TemplateConfiguration().getCTabItem()
        """
        return self.cTabItem

    def getComboBoxWidget(self):
        """
        Usage:
        TemplateConfiguration().getComboBoxWidget()
        """
        return self.comboBoxWidget

    def getComboBoxWidgetLabel(self, name):
        """
        @param name [string] name of combobox widget label
        @return combobox widget label real name

        Usage:
        TemplateConfiguration().getComboBoxWidgetLabel("Basic Headset (Full Speed)")
        """
        label = "{caption='" + name + "' container=" + self.comboBoxWidget + " styletype='label label-name' visible='true'}"
        return label

    def getWidgetButton(self, name):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        TemplateConfiguration().getWidgetButton("LOAD")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' buttontext='" + name + "'}"
        return button


class ExtraSettings:
    """
    Class contains all real names from extra settings panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Extra Settings' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true'}"
        self.virtualFlow = "{container=" + self.tableWidget + " id='virtual-flow' styletype='virtual-flow' visible='true'}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        exstraSetingsObj = ExtraSettings()
        exstraSetingsObj.getCTabItem()
        """
        return self.cTabItem

    def getButtonWidget(self, buttonName):
        """
        @param buttonName [string] name of button
        @return real name of button

        Usage:
        exstraSetingsObj = ExtraSettings()
        exstraSetingsObj.getButtonWidget("btnAdd")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' model.name='" + buttonName + "'}"
        return button

    def getTableRow(self, rowText):
        """
        @param rowText [string] name of the file in table

        Usage:
        exstraSetingsObj = ExtraSettings()
        exstraSetingsObj.getTableRow("uta_heap.xml")
        """
        row = "{caption='" + rowText + "' column='Imported Patches' container=" + self.virtualFlow + " styletype='cell indexed-cell table-cell text-field-table-cell table-column' visible='true'}"
        return row


class Patches:
    """
    Class contains all real names from Patches panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Patches' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getBrowseButton(self):
        """
        @return browse button real name

        Usage:
        patchesObj = Patches()
        patchesObj.getBrowseButton()
        """
        button = "{caption='' container=" + self.cTabItem + " styletype='button scs-browse-button' visible='true'}"
        return button

    def getTextBox(self):
        """
        @return text box real name

        Usage:
        patchesObj = Patches()
        patchesObj.getTextBox()
        """
        textBox = "{container=" + self.cTabItem + " styletype='text-field-widget file-chooser-widget' visible='true'}"
        return textBox


class ProgramAndSave:
    """
    Class contains all real names from Program And Save panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Program and Save' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.buttonWidget = "{container=" + self.blankContainer + " styletype='button-widget' visible='true'}"
        self.diagramContainer = "{container=" + self.blankContainer + " styletype='diagram-container' visible='true'}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        ProgramAndSave().getCTabItem()
        """
        return self.cTabItem

    def getButton(self, buttonText):
        """
        @param buttonText [string] text on the button
        @return button real name

        Usage:
        ProgramAndSave().getButton("SAVE")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' buttontext='" + buttonText + "'}"
        return button

    def getRadioButtonWidget(self):
        """
        @return radio button widget real name

        Usage:
        ProgramAndSave().getRadioButtonWidget()
        """
        return self.radioButtonWidget

    def getRadioButton(self, name):
        """
        @return RadioButton real name

        Usage:
        ProgramAndSave().getRadioButton("File for the Configuration Generation Tool")
        """
        radioButton = "{caption='" + name + "' container=" + self.radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getProgramDeviceButton(self, name):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        ProgramAndSave().getProgramDeviceButton("Save")
        """
        button = "{caption='" + name + "' container=" + self.blankContainer + " styletype='button button-default button-small' visible='true'}"
        return button

    def getLabelText(self, name):
        """
        @param name [string] label text

        Usage:
        ProgramAndSave().getLabelText("Preparing configuration data...")
        """
        text = "{caption='" + name + "' container=" + self.blankContainer + " styletype='text' visible='true'}"
        return text

    def getErrorImage(self):
        """
        @return image real name of error sign

        Usage:
        ProgramAndSave().getErrorImage()
        """
        image = "{container=" + self.diagramContainer + " styletype='image-view' visible='true'}"
        return image

    def getComboBox(self, modelName):
        """
        @return image real name of error sign

        Usage:
        programAndSaveObj = ProgramAndSave()
        programAndSaveObj.getComboBox("cmbBoardType")
        programAndSaveObj.getComboBox("cmbExternalFlashCsbPin")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + modelName + "'}"
        return comboBox


class USBSettings:
    """
    Class contains all real names from Global USB Settings
    """
    def __init__(self):
        self.cTabItem = "{caption='Global USB Settings' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        USBSettings().getCTabItem()
        """
        return self.cTabItem

    def getNumericFieldWidget(self, name):
        """
        @param name [string] name of numeric field widget
        Usage:
        USBSettings().getNumericFieldWidget("VID")
        USBSettings().getNumericFieldWidget("PID")
        """
        numericFieldWidget = "{container=" + self.cTabItem + " styletype='numeric-field-widget numeric-field-small' visible='true' model.name='" + "num" + name + "'}"
        return numericFieldWidget

    def getRadioButton(self, option, containerID="blank_container_0"):
        """
        @param containerID [string]     name of container
        @param option [string]          selected option of Radio Button widget;
                                        can be "Full" or "High"
        Usage:
        USBSettings().getRadioButton("Full", "blank_container_0")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerID + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + option + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton


class AudioCODEC:
    """
    Class contains all real names from Audio CODEC panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Audio CODEC' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        AudioCODEC().getCTabItem()
        """
        return self.cTabItem

    def getCheckBoxWidget(self, container, name):
        """
        @return checkBoxWidget real name

        Usage:
        AudioCODEC().getCheckBoxWidget("blank_container_0", "useStreamingPwrMgmt")
        AudioCODEC().getCheckBoxWidget("blank_container_0", "disableDither")
        AudioCODEC().getCheckBoxWidget("blank_container_0", "disableSidetone")

        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + container + "'}"
        checkBox = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + name + "'}"
        return checkBox


class Mixer:
    """
    Class contains all real names from Mixer panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Mixer' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-solid' visible='true'}"
        self.diagramContainer = "{container=" + self.blankContainer + " styletype='diagram-container' visible='true'}"

    def getNumericFieldWidget(self, sliderName):
        """
        @return numericFieldWidget real name

        Usage:
        Mixer().getNumericFieldWidget("sldCh24MixerVolume")
        """
        sliderWidget = "{container=" + self.diagramContainer + " styletype='slider-widget' visible='true' model.name='" + sliderName + "'}"
        numericField = "{container=" + sliderWidget + " styletype='numeric-field-widget slider-numeric-field' visible='true'}"
        return numericField

    def getcTabItem(self):
        """
        @return CTabItem real name

        Usage:
        Mixer().getcTabItem()
        """
        return self.cTabItem


class MikeyPanel:
    """
    Class contains all real names from Mikey panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Mikey' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.comboBoxWidget = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"

    def getCTabItem(self):
        """
        @return [string] CTabItem real name

        Usage:
        MikeyPanel().getCTabItem()
        """
        return self.cTabItem

    def getRadioButton(self, name, container):
        """
        @param name [string] name of radio button
        @param container [string] name of radio buttons container
        @return [string] radio button real name

        Usage:
        MikeyPanel().getRadioButton("S0", "blank_container_0")
        MikeyPanel().getRadioButton("S0 and Tone", "blank_container_0")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + container + "'}"
        radioButtonGroup = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + name + "' container=" + radioButtonGroup + " styletype='radio-button' visible='true'}"
        return radioButton

    def getRadio(self, name, container):
        """
        @param name [string] name of radio button
        @param container [string] name of radio buttons container
        @return [string] radio button dot real name

        Usage:
        MikeyPanel().getRadio("S0", "blank_container_0")
        MikeyPanel().getRadio("S0 and Tone", "blank_container_0")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + container + "'}"
        radioButtonGroup = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + name + "' container=" + radioButtonGroup + " styletype='radio-button' visible='true'}"
        radioButtonDot = "{container=" + radioButton + " styletype='radio' visible='true'}"
        return radioButtonDot

    def getComboBoxWidget(self, container):
        """
        @param container [string] name of combo box container
        @return [string] combo box real name

        Usage:
        MikeyPanel().getComboBoxWidget("blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + container + "'}"
        comboBoxWidget = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true'}"
        return comboBoxWidget

    def getComboBoxWidgetLabel(self, name, container):
        """
        @param name [string] name of combobox widget label
        @param container [string] name of combo box container
        @return [string] combobox widget label real name

        Usage:
        MikeyPanel().getComboBoxWidgetLabel("10", "blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + container + "'}"
        comboBoxWidget = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true'}"
        label = "{caption='" + name + "' container=" + comboBoxWidget + " styletype='label label-name' visible='true'}"
        return label


class AnalogPanel:
    """
    Class contains all real names from Analog panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Analog Buttons' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.contentsPane = "{container=" + self.blankContainer + " styletype='contents-pane' visible='true'}"
        self.checkBox = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true'}"

    def getCTabItem(self):
        """
        @return [string] cTabItem real name

        Usage:
        AnalogPanel().getCTabItem()
        """
        return self.cTabItem

    def getComboBox(self, name):
        """
        @param name [string]  name of the combo box
        @return [string] Combo Box real name

        Usage:
        AnalogPanel().getComboBox("numFunctionsCmb")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' name='" + name + "'}"
        return comboBox

    def getContentsPane(self):
        """
        @return [string] contentsPane real name

        Usage:
        AnalogPanel().getContentsPane()
        """
        return self.contentsPane

    def getNumericField(self, name):
        """
        @param name [string]  name of the numeric field
        @return [string] contentsPane real name

        Usage:
        AnalogPanel().getContentsPane()
        """
        numericField = "{container=" + self.blankContainer + " styletype='numeric-field-widget numeric-field-small' visible='true' model.name='" + name + "'}"
        return numericField

    def getCheckBox(self):
        """
        @return check box real name

        Usage:
        AnalogPanel().getCheckBox()
        """
        return self.checkBox

    def getCheckBoxWidget(self, name):
        """
        @return check box widget real name

        Usage:
        AnalogPanel().getCheckBox()
        """
        checkBoxWidget = "{caption='" + name + "' container=" + self.checkBox + " styletype='check-box' visible='true'}"
        return checkBoxWidget

    def getBox(self, name):
        """
        @return check box real name

        Usage:
        AnalogPanel().getCheckBox()
        """
        ap = AnalogPanel()
        box = "{container=" + ap.getCheckBoxWidget(name) + " styletype='box' visible='true'}"
        return box

    def getLabel(self, name):
        """
        @param name [string] name of label
        @return label real name

        Usage:
        AnalogPanel().getLabel(name)
        """
        label = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' value='" + name + "'}"
        return label

    def getRadioButton(self, radioButtonOption):
        """
        @param radioButtonOption [string] radio button option
        @return radio button real name
        """
        radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + radioButtonOption + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getButton(self, name):
        """
        @param name [string] button name
        @return button real name
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' name='" + name + "'}"
        return button


class PinMap:
    """
    Class contains all real names from Pin Map panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Pin Map' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.runTimePanel = "{container=" + self.cTabItem + " styletype='scs-runtime-panel' visible='true'}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.closeTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getcTabItem(self):
        """
        @return [string] CTabItem real name

        Usage:
        PinMap().getCTabItem()
        """
        return self.cTabItem

    def getRunTimePanel(self):
        """
        @return RunTimePanel real name

        Usage:
        PinMap().getRunTimePanel()
        """
        return self.runTimePanel

    def getRoundedButton(self, name):
        """
        @param name [string] name of the Rounded Button
        @return [string] Rounded Button real name

        Usage:
        PinMap().getRoundedButton("pinD6")
        """
        roundedButton = "{container=" + self.cTabItem + " styletype='rounded-button-widget' visible='true' model.name='" + name + "'}"
        return roundedButton

    def getLabel(self, name):
        """
        @param name [string] name of the label
        @return [string] Label real name

        Usage:
        PinMap().getLabel("BALL 4")
        """
        label = "{container=" + self.cTabItem + " styletype='label-widget' visible='true' value='" + name + "'}"
        return label

    def getCloseTab(self):
        """
        @return CTabItem real name

        Usage:
        DACPanel().getCTabItem()
        """
        return self.closeTab


class Clock:
    """
    Class contains real names of CLock panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Clock' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getcTabItem(self):
        """
        @return [string] CTabItem real name

        Usage:
        Clock().getCTabItem()
        """
        return self.cTabItem


class GPIO:
    """
    Class contains all real names from GPIO panel
    """
    def __init__(self):
        self.cTabItem = "{caption='GPIO' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonwidget = "{container=" + self.blankContainer + "  styletype='radio-button-widget' visible='true'}"
        self.buttonWidget = "{container=" + self.blankContainer + " styletype='button-widget' visible='true'}"

    def getcTabItem(self):
        """
        @return [string] CTabItem real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getCTabItem()
        """
        return self.cTabItem

    def getComboBox(self, name):
        """
        @param name [string]  name of the combo box
        @return [string] Combo Box real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getComboBox(name)
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' name='" + name + "'}"
        return comboBox

    def getComboBoxWidgetLabel(self, comboBoxName, labelName):
        """
        @param comboBoxName [string] name of combo box widget
        @param labelName [string] name of combo boxes value label
        @return [string] combobox widget label real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getComboBoxWidgetLabel("cmbPinBeingConfigured", "A4: GPIO6")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' name='" + comboBoxName + "'}"
        label = "{caption='" + labelName + "' container=" + comboBox + " styletype='label label-name' visible='true'}"
        return label

    def getRadioButton(self, name, modelName="rbFunction"):
        """
        @param name [string] name of radio button
        @param modelName [string] model name of radio button
        @return radio button real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getRadioButton("Unmapped")
        gpioObj.getRadioButton("Unmapped", "rbLevel")
        gpioObj.getRadioButton("Unmapped", "rgResistorControl")
        """
        radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + modelName + "'}"
        radioButton = "{caption='" + name + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getButtonWidget(self, nameButton):
        """
        @param name [string] name of widget button
        @return widget button real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getButtonWidget("btnClearFWMapping")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' name='" + nameButton + "'}"
        return button

    def getCheckBox(self, modelName):
        """
        @param modelName [string] model name of checkbox
        @return checkbox real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getCheckBox("chbEnableInputDriver")
        """
        return "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + modelName + "'}"

    def getContentsPane(self):
        """
        @return [string] contents pane real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getContentsPane()
        """
        return self.contentsPane

    def getLabelWidget(self, label):
        """
        @param label [string] name of label

        Usage:
        gpioObj = GPIO()
        gpioObj.getLabelWidget("Pin is used for Peripheral")
        """
        return "{container=" + self.cTabItem + " styletype='label-widget' visible='true' value?='*" + label + "*'}"

    def getRadioButtonWidget(self, modelName):
        """
        @param modelName [string] model name of radio button
        @return radio button real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getRadioButtonWidget("rbLevel")
        gpioObj.getRadioButtonWidget("rgResistorControl")
        """
        radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + modelName + "'}"
        return radioButtonWidget

    def getSliderWidget(self, modelName):
        """
        @param modelName [string] model name of radio button
        @return slider widget real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getSliderWidget("slider_repeat")
        gpioObj.getSliderWidget("slider_standoff")
        """
        sliderWidget = "{container=" + self.blankContainer + " styletype='slider-widget' visible='true' model.name='" + modelName + "'}"
        return sliderWidget

    def getSliderPane(self, slideModelName):
        """
        @param modelName [string] model name of radio button
        @return numeric filed widget real name

        Usage:
        gpioObj = GPIO()
        gpioObj.getSliderPane("slider_repeat")
        gpioObj.getSliderPane("slider_standoff")
        """
        sliderWidget = "{container=" + self.blankContainer + " styletype='slider-widget' visible='true' model.name='" + slideModelName + "'}"
        numericFieldWidget = "{container=" + sliderWidget + " styletype='numeric-field-widget slider-numeric-field' visible='true'}"
        textField = "{container=" + numericFieldWidget + " styletype='text-input text-field' visible='true'}"
        pane = "{container=" + textField + " type='javafx.scene.layout.Pane' visible='true'}"
        return pane


class PeripheralSelection:
    """
    Class contains all real names from Peripheral Selection panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Peripheral Selection' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.checkBoxContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"

    def getcTabItem(self):
        """
        @return CTabItem real name

        Usage:
        PeripheralSelection().getCTabItem()
        """
        return self.cTabItem

    def getCheckBoxContainer(self):
        """
        @return checkBoxContainer real name

        Usage:
        PeripheralSelection().getCheckBoxContainer()
        """
        return self.checkBoxContainer

    def getCheckBox(self, name):
        """
        @return checkBoxMark real name

        Usage:
        PeripheralSelection().getCheckBox("SPI")
        """
        checkbox = "{caption='" + name + "' container=" + self.checkBoxContainer + " styletype='check-box' visible='true'}"
        return checkbox

    def getCheckBoxWidget(self, name):
        """
        @return checkBox real name

        Usage:
        PeripheralSelection().getCheckBoxWidget("chkSPI")
        """
        checkBoxWidget = "{container=" + self.checkBoxContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + name + "'}"
        return checkBoxWidget


class ADCPanel:
    """
    Class contains all real names from ADC panel
    """
    def __init__(self):
        self.cTabItem = "{caption='ADC' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.radioButton = "{caption='Digital' container=" + self.radioButtonWidget + " styletype='radio-button' visible='true'}"

    def getcTabItem(self):
        """
        @return CTabItem real name

        Usage:
        ADCPanel().getCTabItem()
        """
        return self.cTabItem

    def getRadioButtonWidget(self, radioButtonWidgetName, containerName="blank_container_0"):
        """
        @return radio button widget real name

        Usage:
        ADC().getRadioButtonWidget(radioButtonWidgetName, "blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + radioButtonWidgetName + "'}"
        return radioButtonWidget

    def getRadioButton(self, radioButton, containerName="blank_container_0", radioButtonWidgetName=None):
        """
        Usage:
        ADC().getRadioButton("Analog")
        ADC().getRadioButton("Digital")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        if radioButtonWidgetName != None:
            radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + radioButtonWidgetName + "'}"
        else:
            radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + radioButton + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getDigitalRadioButton(self):
        """
        @return radioButtonWidget real name

        Usage:
        ADCPanel().radioButtonWidget("Analog")
        """
        DigitalRadioButton = "{caption='Digital' container=" + self.radioButton + " styletype='text' visible='true'}"
        return DigitalRadioButton

    def getCheckBoxWidget(self, checkBoxName, containerName="blank_container_0"):
        """
        @return check box widget real name

        Usage:
        ADC().getCheckBoxWidget(checkBoxName, "blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBoxWidget = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + checkBoxName + "'}"
        return checkBoxWidget

    def getCheckBox(self, checkBoxName, containerName="blank_container_0"):
        """
        @param containerName [string] name of the container
        @param checkBoxName [string] name of the check box
        @return check box real name

        Usage:
        ADCP().getCheckBox("chkbHsmicBias" "blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBoxWidget = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + checkBoxName + "'}"
        checkBox = "{container=" + checkBoxWidget + " styletype='check-box' visible='true'}"
        return checkBox

    def getLabelWidget(self, labelName, containerName="blank_container_0"):
        """
        @param containerName [string] name of the container
        @param checkBoxName [string] name of the label
        @return label real name

        Usage:
        ADC().getLabel("lblMicSettingsError", "blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        labelWidget = "{container=" + blankContainer + " styletype='label-widget' visible='true' model.name='" + labelName + "'}"
        return labelWidget


class Topology:
    """
    Class contains all real names from Topology panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Topology' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"

    def getRadioButton(self, name, containerName="blank_container_0"):
        """
        @param name - Name of RadioButton option to be selected
        @param containerName - value of model.name parameter of Container in which the RadioButton is
        @return CTabItem real name

        Usage:
        Topology().getRadioButton("Headset")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + name + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getRadioButtonWidget(self, containerName="blank_container_0"):
        """
        @param name - Name of RadioButton option to be selected
        @param containerName - value of model.name parameter of Container in which the RadioButton is
        @return CTabItem real name

        Usage:
        Topology().getRadioButton("blank_container_1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        return radioButtonWidget

    def getCTabItem(self):
        """
        Usage:
        History().getCTabItem()
        """
        return self.cTabItem

    def getComboBox(self, comboBoxName="cmbWired", containerName="blank_container_0"):
        """
        Usage:
        Topology().getComboBox()
        Topology().getComboBox("cmbAsyncBinterval", "blank_container_3")
        """

        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        comboBox = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + comboBoxName + "'}"
        return comboBox


class JackDetect:
    """
    Class contains all real names from Jack Detect panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Jack Detect' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"

    def getNumericField(self, name):
        """
        @return NumericField real name

        Usage:
        JackDetect().getNumericField("debounceRepeatCount")
        """
        numericField = "{container=" + self.blankContainer + " styletype='numeric-field-widget numeric-field-small' visible='true' model.name='" + name + "'}"
        return numericField

    def getComboBox(self, comboBoxName, containerName="blank_container_0"):
        """
        @param comboBoxName [string] combo box name
        @param  containerName [string] container name
        @return combo box real name
        Usage:
        JackDetect().getComboBox("cmbDetectTime")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        comboBox = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + comboBoxName + "'}"
        return comboBox

    def getCheckBoxWidget(self, CheckBoxName, containerName="blank_container_0"):
        """
        @return checkBoxWidget real name

        Usage:
        JackDetect().getCheckBoxWidget("chkbRingSenseInverted")
        JackDetect().getCheckBoxWidget("chkbLoadDetect")
        JackDetect().getCheckBoxWidget("chkbTipSenseInverted")

        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBox = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + CheckBoxName + "'}"
        return checkBox

    def getRadioButtonWidget(self, radioButtonName, containerName="blank_container_0"):
        """
        @param radioButtonName [string] radio button name
        @param  containerName [string] container name
        @return radio button numeric field real name
        Usage:
        JackDetect().getRadioButtonWidget("radJackDetectMode")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + radioButtonName + "'}"
        return radioButtonWidget

    def getRadioButton(self, radioButtonName, containerName="blank_container_0"):
        """
        Usage:
        JackDetect().getRadioButton("Analog")
        JackDetect().getRadioButton("Digital")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + radioButtonName + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getCTabItem(self):
        """
        Usage:
        JackDetect().getCTabItem()
        """
        return self.cTabItem


class GeneratedHIDReports:
    """
    Class contains all real names from Generated HId Reports panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Generated HID Reports' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.bankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.buttonWidget = "{container=" + self.bankContainer + " styletype='button-widget' visible='true'}"

    def getcTabItem(self):
        """
        @return cTabItem real name

        Usage:
        GeneratedHIDReports().getcTabItem()
        """
        return self.cTabItem

    def getButtonWidget(self):
        """
        @return buttonWidget real name

        Usage:
        GeneratedHIDReports().getButtonWidget()
        """
        return self.buttonWidget

    def getHIDButton(self, name):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        GeneratedHIDReports().getHIDButton("REFRESH TABLES")
        """
        button = "{caption='" + name + "' container=" + self.buttonWidget + " styletype='button button-default button-small' visible='true'}"
        return button

    def getTableRow(self, name):
        """
        @return tableRow real name

        Usage:
        GeneratedHIDReports().getTableRow('analogBtnsTable')
        GeneratedHIDReports().getTableRow('digitalTable')
        """
        tableWidget = "{container=" + self.bankContainer + " styletype='table-widget' visible='true' model.name='" + name + "'} "
        tableView = "{container=" + tableWidget + " styletype='table-view' visible='true'}"
        tableRow = "{container=" + tableView + "  styletype='cell indexed-cell table-row-cell' visible='true'}"
        return tableRow

    def getWidgetLabel(self, value):
        """
        @param value [string] label value
        @return label real name

        Usage:
        GeneratedHIDReports().getWidgetLabel("Error in Button. No pin is mapped to function GPI_0.")
        """
        label = "{container=" + self.bankContainer + " styletype='label-widget' visible='true' value='" + value + "'}"
        return label

    def getErrorLabel(self, error):
        """
        Usage:
        GeneratedHIDReports().getErrorLabel("Error")
        """
        label = "{container=" + self.bankContainer + " styletype='label-widget' visible='true' value?='*" + error + "'}"
        return label


class Security:
    """
    Class contains all real names from Security panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Security' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.textAreaWidget = "{container=" + self.blankContainer + " styletype='text-area-widget' visible='true'}"
        self.textInput = "{container=" + self.textAreaWidget + " styletype='text-input text-area text-area-mono-space' visible='true'}"
        self.checkBox = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true'}"
        self.buttonWidget = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' name='btnLoadPrivateKey'}"
        self.loadPrivateKey = "{caption='LOAD PRIVATE KEY' container=" + self.buttonWidget + " styletype='button button-default button-small' visible='true'}"

    def getcTabItem(self):
        """
        @return CTabItem real name

        Usage:
        Security().getCTabItem()
        """
        return self.cTabItem

    def getRadioButton(self, name):
        """
        @return radioButton real name

        Usage:
        Security().getRadioButton("Protect the device")
        Security().getRadioButton("Keep current setting : Unprotected device")
        """
        radioButton = "{caption='" + name + "' container=" + self.radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getButtonWidget(self, name):
        """
        @return Button real name

        Usage:
        Security().getButtonWidget("btnGeneralInitial")
        Security().getButtonWidget("btnImportInitial")
        """
        ButtonWidget = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' name='" + name + "'}"
        return ButtonWidget

    def getTextInput(self):
        """
        @return TextInput real name

        Usage:
        Security().getTextInput()
        """
        return self.textInput

    def getTextAreaWidget(self):
        """
        @return TextAreaWidget real name

        Usage:
        Security().getTextAreaWidget()
        """
        return self.textAreaWidget

    def getCheckBoxWidget(self):
        """
        @return ChecBoxWidget real name

        Usage:
        Security().getCheckBoxWidget()
        """
        return self.checkBox

    def getLoadPrivateKey(self):
        """
        @return LoadPrivateKey real name

        Usage:
        Security().getLoadPrivateKey()
        """
        return self.loadPrivateKey


class EqualizerSettings:
    """
    Class contains all real names from Equalizer Settings panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Equalizer Settings' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.closeEqualizerSettingsTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getcTabItem(self):
        """
        @return CTabItem real name

        Usage:
        EqualizerSettings().getCTabItem()
        """
        return self.cTabItem

    def getRadioButton(self, name):
        """
        @param name [string]  name of the radio button
        @return radio button real name

        Usage:
        EqualizerSettings().getRadioButton("Tune Graphically")
        """
        radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption?='*" + name + "*' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        return radioButton

    def getRadio(self, name):
        """
        @param name [string]  name of the radio button
        @return radio button circle real name

        Usage:
        EqualizerSettings().getRadio("Tune Graphically")
        """
        radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        radioButton = "{caption='" + name + "' container=" + radioButtonWidget + " styletype='radio-button' visible='true'}"
        radio = "{container=" + radioButton + " styletype='radio' visible='true'}"
        return radio

    def getCloseButton(self):
        """
        @return close button real name

        Usage:
        EqualizerSettings().getCloseButton()
        """
        return self.closeEqualizerSettingsTab

    def getCheckBox(self, name):
        """
        @return close button real name

        Usage:
        EqualizerSettings().getCheckBox("ckEnableEQ")
        """
        checkBox = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + name + "'}"
        return checkBox

    def getButton(self, name):
        """
        Usage:
        EqualizerSettings().getButton("cbImport")
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' model.name='" + name + "'}"
        return button

    def getLabel(self, name):
        """
        Usage:
        EqualizerSettings().getLabel("lblError")
        """
        label = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' model.name='" + name + "'}"
        return label


class EqPlayback:
    """
    Class contains all real names from Playback panel
    """
    def __init__(self):
        self.cTabItem = "{caption='' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.playbackCTabItem = "{caption='Playback' container=" + self.cTabItem + " parent.visible='true' type='org.eclipse.swt.custom.CTabItem'}"
        self.blankContainer = "{container=" + self.playbackCTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.radioButton = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.checkArea = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true'}"
        self.checkField = "{caption='' container=" + self.checkArea + " styletype='check-box' visible='true'}"
        self.checkBox = "{container=" + self.checkField + " styletype='mark' visible='true'}"
        self.comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"
        self.comboBoxMenu = "{container=" + self.comboBox + " type='javafx.scene.layout.StackPane' visible='true'}"
        self.button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true'}"
        self.export = "{caption='Export' container=" + self.button + " styletype='button button-default button-small' visible='true'}"
        self.dial = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.freqKnob = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.gainKnob = "{container=" + self.blankContainer + " occurrence='1' styletype='dial-widget' visible='true'}"
        self.slopeKnob = "{container=" + self.blankContainer + " occurrence='2' styletype='dial-widget' visible='true'}"
        self.freqTextField = "{container=" + self.freqKnob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.gainTextField = "{container=" + self.gainKnob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.slopeTextField = "{container=" + self.slopeKnob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.freq = "{container=" + self.freqTextField + " styletype='text-input text-field' visible='true'}"
        self.gain = "{container=" + self.gainTextField + " styletype='text-input text-field' visible='true'}"
        self.slope = "{container=" + self.slopeTextField + " styletype='text-input text-field' visible='true'}"
        self.chart2D = "{container=" + self.blankContainer + " type='com.cirrus.scs.ide.paneleditor.ui.widget.Chart2DWidget' visible='true'}"
        self.zoomToolBar = "{container=" + self.chart2D + " styletype='tool-bar toolBar' visible='true'}"
        self.xAxis = "{container=" + self.blankContainer + " styletype='axis' visible='true'}"
        self.yAxis = "{container=" + self.blankContainer + " occurrence='1' styletype='axis' visible='true'}"
        self.cTabFolder = "{firstTabCaption='Playback' isvisible='true' type='org.eclipse.swt.custom.CTabFolder' window=" + MainShell().getMainWindow() + "}"
        self.toolBarMinimize = "{container=" + self.cTabFolder + " firstItemText='Minimize' isvisible='true' type='org.eclipse.swt.widgets.ToolBar'}"
        self.minimizeOrMaximize = "{caption='Maximize' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        self.closeTab = "{container=" + self.playbackCTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getPlayBackCTabItem(self):
        """
        @return Playback CTabItem real name

        Usage:
        EqPlayback().getPlayBackCTabItem()
        """
        return self.playbackCTabItem

    def getDialWidgetNumericField(self, name):
        """
        @param name [string] name of dial widget
        @return dial widgets numeric field real name

        Usage:
        EqPlayback().getDialWidgetNumericField("dialGainDb")
        """
        dialWidget = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true' name='" + name + "'}"
        numericField = "{container=" + dialWidget + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        return numericField

    def getLabelWidget(self, value):
        """
        @param value [string] value of label widget
        @return label widgets real name

        Usage:
        EqPlayback().getLabelWidget("Eq band(s) with coeff(s) out of s1.30 range. Please try lower gain or higher Q.")
        """
        labelWidget = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' value='" + value + "'}"
        return labelWidget

    def getComboBox(self, name):
        """
        @param name [string] name of the combo box
        @return combo box real name

        Usage:
        EqPlayback().getComboBox("cboFilterType")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + name + "'}"
        return comboBox

    def getBand(self, band):
        """
        @param band [string] band number
        @return band radio button real name

        Usage:
        EqPlayback().getBand("1")
        EqPlayback().getBand("Band 1")
        """
        band = "{caption?='*" + band + "*' container=" + self.radioButtonWidget + " type='javafx.scene.control.RadioButton' visible='true'}"
        return band

    def getCheckBoxField(self):
        """
        @return Checkbox field real name

        Usage:
        EqPlayback().getCheckBoxField()
        """
        return self.checkField

    def getCheckBox(self):
        """
        @return CheckBox real name

        Usage:
        EqPlayback().getCheckBox()
        """
        return self.checkBox

    def getComboBoxItem(self, name):
        """
        @return Combo Box item real name

        Usage:
        EqPlayback().getComboBoxItem("Peaking")
        """
        comboBoxItem = "{caption='" + name + "' container =" + self.comboBox + " styletype='label label-name' visible='true'}"
        return comboBoxItem

    def getBandItem(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqPlayback().getBandItem("Band 1")
        """
        bands = {'Band 1': 'defaultRadioButton',
                 'Band 2': 'blueRadioButton',
                 'Band 3': 'aquamarineRadioButton',
                 'Band 4': 'greenRadioButton',
                 'Band 5': 'purpleRadioButton',
                 'Band 6': 'pinkRadioButton',
                 'Band 7': 'yellowRadioButton'}
        rBBand = "{caption='" + bandName + "' container=" + self.radioButton + " styletype='radio-button scs-" + bands[bandName] + "' visible='true'}"
        return rBBand

    def getBandRB(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqPlayback().getBandRB("Band 1")
        """
        band = "{container=" + self.getBandItem(bandName) + " styletype='radio' visible='true'}"
        return band

    def getExport(self):
        """
        @return Export real name

        Usage:
        EqPlayback().getExport()
        """
        return self.export

    def getComboBoxMenu(self):
        """
        @return comboBoxMenu real name

        Usage:
        EqPlayback().getComboBoxMenu()
        """
        return self.comboBoxMenu

    def getFilter(self, filterName):
        """
        @param filterName [string] Filter name

        @return Filter real name

        Usage:
        EqPlayback().getFilter("LPF Butter 1st")
        """
        filter = "{caption='" + filterName + "' container={type='javafx.stage.Popup' visible='true'} styletype='label label-name' visible='true'}"
        return filter

    def getScrollBar(self):
        """
        @return Scroll Bar real name

        Usage:
        EqPlayback().getScrollBar("LPF Butter 1st")
        """
        scrollBar = "{container={type='javafx.stage.Popup' visible='true'} styletype='scroll-bar' visible='true'}"
        return scrollBar

    def getFreqNumField(self):
        """
        @return Frequency dial real name

        Usage:
        EqPlayback().getFreqNumField()
        """
        return self.freqTextField

    def getFreqDial(self):
        """
        @return Frequency dial numeric filed real name

        Usage:
        EqPlayback().getFreqDial()
        """
        return self.freq

    def getGainNumField(self):
        """
        @return Gain dial real name

        Usage:
        EqPlayback().getGainNumField()
        """
        return self.gainTextField

    def getGainDial(self):
        """
        @return Gain dial numeric filed real name

        Usage:
        EqPlayback().getGainDial()
        """
        return self.gain

    def getSlopeNumField(self):
        """
        @return Slope dial real name

        Usage:
        EqPlayback().getSlopeNumField()
        """
        return self.slopeTextField

    def getSlopeDial(self):
        """
        @return Slope dial numeric filed real name

        Usage:
        EqPlayback().getSlopeDial()
        """
        return self.slope

    def getZoomButton(self, zoomButton):
        """
        @param zoomButton [string] Name of the zoom button
        @param can be Zoom In X Axis, Zoom Out X Axis, Zoom In Y Axis and Zoom Out Y Axis
        @param can be also Linear and Logarithmic

        @return Zoom button real name

        Usage:
        EqPlayback().getZoomButton("Band 1")
        """
        zooms = {'Zoom In X Axis': 'button scs-zoom-inc-x-axis-button',
                 'Zoom Out X Axis': 'button scs-zoom-dec-x-axis-button',
                 'Zoom In Y Axis': 'button scs-zoom-inc-y-axis-button',
                 'Zoom Out Y Axis': 'button scs-zoom-dec-y-axis-button',
                 'Linear': 'button scs-linear-button',
                 'Logarithmic': 'button scs-logarithmic-button'}
        zoomButtonRN = "{container=" + self.zoomToolBar + " styletype='" + zooms[zoomButton] + "' visible='true'}"
        zoom = "{container=" + zoomButtonRN + " styletype='image-view' visible='true'}"
        return zoom

    def getXAxis(self):
        """
        @return X axis real name

        Usage:
        EqPlayback().getXAxis()
        """
        return self.xAxis

    def getYAxis(self):
        """
        @return Y axis real name

        Usage:
        EqPlayback().getYAxis()
        """
        return self.yAxis

    def getResetZoom(self):
        """

        @return Reset zoom button real name

        Usage:
        EqPlayback().getResetZoom
        """
        resetZoom = "{caption='' container=" + self.zoomToolBar + " styletype='split-menu-button scs-zoom-reset-button' visible='true'}"
        resetzoomRN = "{container=" + resetZoom + " styletype='image-view' visible='true'}"
        return resetzoomRN

    def getMinimizeOrMaximize(self, type):
        """
        Usage:
        EqPlayback().getMinimizeOrMaximize("Minimize")
        EqPlayback().getMinimizeOrMaximize("Maximize")
        EqPlayback().getMinimizeOrMaximize("Restore")
        """
        self.minimizeOrMaximize = "{caption='" + type + "' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        return self.minimizeOrMaximize

    def getCloseTab(self):
        """
        @return CTabItem real name

        Usage:
        EqPlayback().getCTabItem()
        """
        return self.closeTab


class EqRecord:
    """
    Class contains all real names from Record panel
    """
    def __init__(self):
        self.cTabItem = "{caption='' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.recordCTabItem = "{caption='Record' container=" + self.cTabItem + " parent.visible='true' type='org.eclipse.swt.custom.CTabItem'}"
        self.blankContainer = "{container=" + self.recordCTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.radioButton = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.checkArea = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true'}"
        self.checkField = "{caption='' container=" + self.checkArea + " styletype='check-box' visible='true'}"
        self.checkBox = "{container=" + self.checkField + " styletype='mark' visible='true'}"
        self.comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"
        self.comboBoxMenu = "{container=" + self.comboBox + " type='javafx.scene.layout.StackPane' visible='true'}"
        self.button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true'}"
        self.export = "{caption='Export' container=" + self.button + " styletype='button button-default button-small' visible='true'}"
        self.dial = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.freqknob = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.gainknob = "{container=" + self.blankContainer + " occurrence='1' styletype='dial-widget' visible='true'}"
        self.slopeknob = "{container=" + self.blankContainer + " occurrence='2' styletype='dial-widget' visible='true'}"
        self.freqtextfield = "{container=" + self.freqknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.gaintextfield = "{container=" + self.gainknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.slopetextfield = "{container=" + self.slopeknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.freq = "{container=" + self.freqtextfield + " styletype='text-input text-field' visible='true'}"
        self.gain = "{container=" + self.gaintextfield + " styletype='text-input text-field' visible='true'}"
        self.slope = "{container=" + self.slopetextfield + " styletype='text-input text-field' visible='true'}"
        self.chart2D = "{container=" + self.blankContainer + " type='com.cirrus.scs.ide.paneleditor.ui.widget.Chart2DWidget' visible='true'}"
        self.zoomToolBar = "{container=" + self.chart2D + " styletype='tool-bar toolBar' visible='true'}"
        self.xAxis = "{container=" + self.blankContainer + " styletype='axis' visible='true'}"
        self.yAxis = "{container=" + self.blankContainer + " occurrence='1' styletype='axis' visible='true'}"
        self.cTabFolder = "{firstTabCaption='Record' isvisible='true' type='org.eclipse.swt.custom.CTabFolder' window=" + MainShell().getMainWindow() + "}"
        self.toolBarMinimize = "{container=" + self.cTabFolder + " firstItemText='Minimize' isvisible='true' type='org.eclipse.swt.widgets.ToolBar'}"
        self.minimizeOrMaximize = "{caption='Maximize' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        self.closeTab = "{container=" + self.recordCTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getRecordCTabItem(self):
        """
        @return Record CTabItem real name

        Usage:
        EqRecord().getRecordCTabItem()
        """
        return self.recordCTabItem

    def getDialWidgetNumericField(self, name):
        """
        @param name [string] name of dial widget
        @return dial widgets numeric field real name

        Usage:
        EqRecord().getDialWidgetNumericField("dialGainDb")
        """
        dialWidget = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true' name='" + name + "'}"
        numericField = "{container=" + dialWidget + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        return numericField

    def getLabelWidget(self, value):
        """
        @param value [string] value of label widget
        @return label widgets real name

        Usage:
        EqRecord().getDialWidgetNumericField("Frequency (Hz):")
        """
        labelWidget = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' value='" + value + "'}"
        return labelWidget

    def getComboBox(self, name):
        """
        @param name [string] name of the combo box
        @return combo box real name

        Usage:
        EqRecord().getComboBox("cboFilterType")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + name + "'}"
        return comboBox

    def getBand(self, band):
        """
        @param band [string] band number
        @return band radio button real name

        Usage:
        EqRecord().getBand("1")
        EqRecord().getBand("Band 1")
        """
        band = "{caption?='*" + band + "*' container=" + self.radioButtonWidget + " type='javafx.scene.control.RadioButton' visible='true'}"
        return band

    def getCheckBoxField(self):
        """
        @return Checkbox field real name

        Usage:
        EqRecord().getCheckBoxField()
        """
        return self.checkField

    def getComboBoxItem(self, name):
        """
        @return Combo Box item real name

        Usage:
        EqRecord().getComboBoxItem("Peaking")
        """
        comboBoxItem = "{caption='" + name + "' container =" + self.comboBox + " styletype='label label-name' visible='true'}"
        return comboBoxItem

    def getBandItem(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqRecord().getBandItem("Band 1")
        """
        bands = {'Band 1': 'defaultRadioButton',
                 'Band 2': 'blueRadioButton',
                 'Band 3': 'aquamarineRadioButton',
                 'Band 4': 'greenRadioButton',
                 'Band 5': 'purpleRadioButton',
                 'Band 6': 'pinkRadioButton',
                 'Band 7': 'yellowRadioButton'}
        rBBand = "{caption='" + bandName + "' container=" + self.radioButton + " styletype='radio-button scs-" + bands[bandName] + "' visible='true'}"
        return rBBand

    def getBandRB(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqRecord().getBandRB("Band 1")
        """
        band = "{container=" + self.getBandItem(bandName) + " styletype='radio' visible='true'}"
        return band

    def getExport(self):
        """
        @return Export real name

        Usage:
        EqRecord().getExport()
        """
        return self.export

    def getComboBoxMenu(self):
        """
        @return comboBoxMenu real name

        Usage:
        EqRecord().getComboBoxMenu()
        """
        return self.comboBoxMenu

    def getFilter(self, filterName):
        """
        @param filterName [string] Filter name

        @return Filter real name

        Usage:
        EqRecord().getFilter("LPF Butter 1st")
        """
        filter = "{caption='" + filterName + "' container={type='javafx.stage.Popup' visible='true'} styletype='label label-name' visible='true'}"
        return filter

    def getScrollBar(self):
        """
        @return Scroll Bar real name

        Usage:
        EqRecord().getScrollBar("LPF Butter 1st")
        """
        scrollBar = "{container={type='javafx.stage.Popup' visible='true'} styletype='scroll-bar' visible='true'}"
        return scrollBar

    def getFreqNumField(self):
        """
        @return Frequency dial real name

        Usage:
        EqRecord().getFreqNumField()
        """
        return self.freqTextField

    def getFreqDial(self):
        """
        @return Frequency dial numeric filed real name

        Usage:
        EqRecord().getFreqDial()
        """
        return self.freq

    def getGainNumField(self):
        """
        @return Gain dial real name

        Usage:
        EqRecord().getGainNumField()
        """
        return self.gainTextField

    def getGainDial(self):
        """
        @return Gain dial numeric filed real name

        Usage:
        EqRecord().getGainDial()
        """
        return self.gain

    def getSlopeNumField(self):
        """
        @return Slope dial real name

        Usage:
        EqRecord().getSlopeNumField()
        """
        return self.slopeTextField

    def getSlopeDial(self):
        """
        @return Slope dial numeric filed real name

        Usage:
        EqRecord().getSlopeDial()
        """
        return self.slope

    def getZoomButton(self, zoomButton):
        """
        @param zoomButton [string] Name of the zoom button
        @param can be Zoom In X Axis, Zoom Out X Axis, Zoom In Y Axis and Zoom Out Y Axis
        @param can be also Linear and Logarithmic

        @return Zoom button real name

        Usage:
        EqRecord().getZoomButton("Band 1")
        """
        zooms = {'Zoom In X Axis': 'button scs-zoom-inc-x-axis-button',
                 'Zoom Out X Axis': 'button scs-zoom-dec-x-axis-button',
                 'Zoom In Y Axis': 'button scs-zoom-inc-y-axis-button',
                 'Zoom Out Y Axis': 'button scs-zoom-dec-y-axis-button',
                 'Linear': 'button scs-linear-button',
                 'Logarithmic': 'button scs-logarithmic-button'}
        zoomButtonRN = "{container=" + self.zoomToolBar + " styletype='" + zooms[zoomButton] + "' visible='true'}"
        zoom = "{container=" + zoomButtonRN + " styletype='image-view' visible='true'}"
        return zoom

    def getXAxis(self):
        """
        @return X axis real name

        Usage:
        EqRecord().getXAxis()
        """
        return self.xAxis

    def getYAxis(self):
        """
        @return Y axis real name

        Usage:
        EqRecord().getYAxis()
        """
        return self.yAxis

    def getResetZoom(self):
        """

        @return Reset zoom button real name

        Usage:
        EqRecord().getResetZoom
        """
        resetZoom = "{caption='' container=" + self.zoomToolBar + " styletype='split-menu-button scs-zoom-reset-button' visible='true'}"
        resetzoomRN = "{container=" + resetZoom + " styletype='image-view' visible='true'}"
        return resetzoomRN

    def getMinimizeOrMaximize(self, type):
        """
        Usage:
        EqRecord().getMinimizeOrMaximize("Minimize")
        EqRecord().getMinimizeOrMaximize("Maximize")
        EqRecord().getMinimizeOrMaximize("Restore")
        """
        self.minimizeOrMaximize = "{caption='" + type + "' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        return self.minimizeOrMaximize

    def getCloseTab(self):
        """
        @return CTabItem real name

        Usage:
        DACPanel().getCTabItem()
        """
        return self.closeTab


class EqSideTone:
    """
    Class contains all real names from Side Tone panel
    """
    def __init__(self):
        self.cTabItem = "{caption='' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.sideToneCTabItem = "{caption='Side Tone' container=" + self.cTabItem + " parent.visible='true' type='org.eclipse.swt.custom.CTabItem'}"
        self.blankContainer = "{container=" + self.sideToneCTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.radioButtonWidget = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.radioButton = "{container=" + self.blankContainer + " styletype='radio-button-widget' visible='true'}"
        self.checkArea = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true'}"
        self.checkField = "{caption='' container=" + self.checkArea + " styletype='check-box' visible='true'}"
        self.checkBox = "{container=" + self.checkField + " styletype='mark' visible='true'}"
        self.comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"
        self.comboBoxMenu = "{container=" + self.comboBox + " type='javafx.scene.layout.StackPane' visible='true'}"
        self.button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true'}"
        self.export = "{caption='Export' container=" + self.button + " styletype='button button-default button-small' visible='true'}"
        self.dial = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.freqknob = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true'}"
        self.gainknob = "{container=" + self.blankContainer + " occurrence='1' styletype='dial-widget' visible='true'}"
        self.slopeknob = "{container=" + self.blankContainer + " occurrence='2' styletype='dial-widget' visible='true'}"
        self.freqtextfield = "{container=" + self.freqknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.gaintextfield = "{container=" + self.gainknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.slopetextfield = "{container=" + self.slopeknob + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        self.freq = "{container=" + self.freqtextfield + " styletype='text-input text-field' visible='true'}"
        self.gain = "{container=" + self.gaintextfield + " styletype='text-input text-field' visible='true'}"
        self.slope = "{container=" + self.slopetextfield + " styletype='text-input text-field' visible='true'}"
        self.chart2D = "{container=" + self.blankContainer + " type='com.cirrus.scs.ide.paneleditor.ui.widget.Chart2DWidget' visible='true'}"
        self.zoomToolBar = "{container=" + self.chart2D + " styletype='tool-bar toolBar' visible='true'}"
        self.xAxis = "{container=" + self.blankContainer + " styletype='axis' visible='true'}"
        self.yAxis = "{container=" + self.blankContainer + " occurrence='1' styletype='axis' visible='true'}"
        self.cTabFolder = "{firstTabCaption='Side Tone' isvisible='true' type='org.eclipse.swt.custom.CTabFolder' window=" + MainShell().getMainWindow() + "}"
        self.toolBarMinimize = "{container=" + self.cTabFolder + " firstItemText='Minimize' isvisible='true' type='org.eclipse.swt.widgets.ToolBar'}"
        self.minimizeOrMaximize = "{caption='Maximize' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        self.closeTab = "{container=" + self.sideToneCTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getSideToneCTabItem(self):
        """
        @return Side Tone CTabItem real name

        Usage:
        EqSideTone().getSideToneCTabItem()
        """
        return self.sideToneCTabItem

    def getDialWidgetNumericField(self, name):
        """
        @param name [string] name of dial widget
        @return dial widgets numeric field real name

        Usage:
        EqSideTone().getDialWidgetNumericField("dialGainDb")
        """
        dialWidget = "{container=" + self.blankContainer + " styletype='dial-widget' visible='true' name='" + name + "'}"
        numericField = "{container=" + dialWidget + " styletype='numeric-field-widget dial-text-field-small value-font-size-10' visible='true'}"
        return numericField

    def getLabelWidget(self, value):
        """
        @param value [string] value of label widget
        @return label widgets real name

        Usage:
        EqSideTone().getDialWidgetNumericField("Frequency (Hz):")
        """
        labelWidget = "{container=" + self.blankContainer + " styletype='label-widget' visible='true' value='" + value + "'}"
        return labelWidget

    def getComboBox(self, name):
        """
        @param name [string] name of the combo box
        @return combo box real name

        Usage:
        EqSideTone().getComboBox("cboFilterType")
        """
        comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + name + "'}"
        return comboBox

    def getBand(self, band):
        """
        @param band [string] band number
        @return band radio button real name

        Usage:
        EqSideTone().getBand("1")
        EqSideTone().getBand("Band 1")
        """
        band = "{caption?='*" + band + "*' container=" + self.radioButtonWidget + " type='javafx.scene.control.RadioButton' visible='true'}"
        return band

    def getCheckBoxField(self):
        """
        @return Checkbox field real name

        Usage:
        EqSideTone().getCheckBoxField()
        """
        return self.checkField

    def getCheckBox(self):
        """
        @return CheckBox real name

        Usage:
        EqSideTone().getCheckBox()
        """
        return self.checkBox

    def getComboBoxItem(self, name):
        """
        @return Combo Box item real name

        Usage:
        EqSideTone().getComboBoxItem("Peaking")
        """
        comboBoxItem = "{caption='" + name + "' container =" + self.comboBox + " styletype='label label-name' visible='true'}"
        return comboBoxItem

    def getBandItem(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqSideTone().getBandItem("Band 1")
        """
        bands = {'Band 1': 'defaultRadioButton',
                 'Band 2': 'blueRadioButton',
                 'Band 3': 'aquamarineRadioButton'}
        rBBand = "{caption='" + bandName + "' container=" + self.radioButton + " styletype='radio-button scs-" + bands[bandName] + "' visible='true'}"
        return rBBand

    def getBandRB(self, bandName):
        """
        @param bandName [string] Band name of radio button

        @return Band radio button real name

        Usage:
        EqSideTone().getBandRB("Band 1")
        """
        band = "{container=" + self.getBandItem(bandName) + " styletype='radio' visible='true'}"
        return band

    def getExport(self):
        """
        @return Export real name

        Usage:
        EqSideTone().getExport()
        """
        return self.export

    def getComboBoxMenu(self):
        """
        @return comboBoxMenu real name

        Usage:
        EqSideTone().getComboBoxMenu()
        """
        return self.comboBoxMenu

    def getFilter(self, filterName):
        """
        @param filterName [string] Filter name

        @return Filter real name

        Usage:
        EqSideTone().getFilter("LPF Butter 1st")
        """
        filter = "{caption='" + filterName + "' container={type='javafx.stage.Popup' visible='true'} styletype='label label-name' visible='true'}"
        return filter

    def getScrollBar(self):
        """
        @return Scroll Bar real name

        Usage:
        EqSideTone().getScrollBar("LPF Butter 1st")
        """
        scrollBar = "{container={type='javafx.stage.Popup' visible='true'} styletype='scroll-bar' visible='true'}"
        return scrollBar

    def getFreqNumField(self):
        """
        @return Frequency dial real name

        Usage:
        EqSideTone().getFreqNumField()
        """
        return self.freqTextField

    def getFreqDial(self):
        """
        @return Frequency dial numeric filed real name

        Usage:
        EqSideTone().getFreqDial()
        """
        return self.freq

    def getGainNumField(self):
        """
        @return Gain dial real name

        Usage:
        EqSideTone().getGainNumField()
        """
        return self.gainTextField

    def getGainDial(self):
        """
        @return Gain dial numeric filed real name

        Usage:
        EqSideTone().getGainDial()
        """
        return self.gain

    def getSlopeNumField(self):
        """
        @return Slope dial real name

        Usage:
        EqSideTone().getSlopeNumField()
        """
        return self.slopeTextField

    def getSlopeDial(self):
        """
        @return Slope dial numeric filed real name

        Usage:
        EqSideTone().getSlopeDial()
        """
        return self.slope

    def getZoomButton(self, zoomButton):
        """
        @param zoomButton [string] Name of the zoom button
        @param can be Zoom In X Axis, Zoom Out X Axis, Zoom In Y Axis and Zoom Out Y Axis
        @param can be also Linear and Logarithmic

        @return Zoom button real name

        Usage:
        EqSideTone().getZoomButton("Band 1")
        """
        zooms = {'Zoom In X Axis': 'button scs-zoom-inc-x-axis-button',
                 'Zoom Out X Axis': 'button scs-zoom-dec-x-axis-button',
                 'Zoom In Y Axis': 'button scs-zoom-inc-y-axis-button',
                 'Zoom Out Y Axis': 'button scs-zoom-dec-y-axis-button',
                 'Linear': 'button scs-linear-button',
                 'Logarithmic': 'button scs-logarithmic-button'}
        zoomButtonRN = "{container=" + self.zoomToolBar + " styletype='" + zooms[zoomButton] + "' visible='true'}"
        zoom = "{container=" + zoomButtonRN + " styletype='image-view' visible='true'}"
        return zoom

    def getXAxis(self):
        """
        @return X axis real name

        Usage:
        EqSideTone().getXAxis()
        """
        return self.xAxis

    def getYAxis(self):
        """
        @return Y axis real name

        Usage:
        EqSideTone().getYAxis()
        """
        return self.yAxis

    def getResetZoom(self):
        """

        @return Reset zoom button real name

        Usage:
        EqSideTone().getResetZoom
        """
        resetZoom = "{caption='' container=" + self.zoomToolBar + " styletype='split-menu-button scs-zoom-reset-button' visible='true'}"
        resetzoomRN = "{container=" + resetZoom + " styletype='image-view' visible='true'}"
        return resetzoomRN

    def getMinimizeOrMaximize(self, type):
        """
        Usage:
        EqSideTone().getMinimizeOrMaximize("Minimize")
        EqSideTone().getMinimizeOrMaximize("Maximize")
        EqSideTone().getMinimizeOrMaximize("Restore")
        """
        self.minimizeOrMaximize = "{caption='" + type + "' container=" + self.toolBarMinimize + " type='org.eclipse.swt.widgets.ToolItem'}"
        return self.minimizeOrMaximize

    def getCloseTab(self):
        """
        @return CTabItem real name

        Usage:
        DACPanel().getCTabItem()
        """
        return self.closeTab


class FWLocalization:
    """
    Class contains all real names from Firmware settings Localization panel
    """
    def __init__(self):
        self.CTabItem = "{caption='Localization' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.CTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.languageComboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"
        self.tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true'}"
        self.tableView = "{container=" + self.tableWidget + " styletype='table-view' visible='true'}"

    def getLocalizationButton(self, name):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        Localization().getLocalizationButton("ADD")
        """
        button = "{caption='" + name + "' container=" + self.blankContainer + " styletype='button button-default button-small' visible='true'}"
        return button

    def getTableRow(self, row, column):
        """
        @param name [string] name of button
        @return button real name

        Usage:
        Localization().getTableRow(0, "VALUE")
        """
        tableRow = "{caption='' column='" + column + "' container=" + self.tableView + " row='" + str(row) + "' styletype='cell indexed-cell table-cell text-field-table-cell table-column' visible='true'}"
        return tableRow

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        FWLocalization().getCTabItem()
        """
        return self.CTabItem

    def getLanguageComboBox(self):
        """
        @return combo box real name

        Usage:
        FWLocalization().getLanguageComboBox()
        """
        return self.languageComboBox

    def getButton(self, buttonText):
        """
        @param buttonText [string] text on the button
        @return button real name

        Usage:
        FWLocalization().getButton(buttonText)
        """
        button = "{container=" + self.blankContainer + " styletype='button-widget' visible='true' buttontext='" + buttonText + "'}"
        return button

    def getTableWidget(self, name):
        """
        @param name [string] name of the Table Widget
        @return table widget real name

        Usage:
        FWLocalization().getTableWidget("tblDescriptors")
        """
        tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true' model.name='" + name + "'}"
        return tableWidget

    def getTableView(self, name):
        """
        @param name [string] name of the Table Widget
        @return table view real name

        Usage:
        FWLocalization().getTableView("tblDescriptors")
        """
        tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true' model.name='" + name + "'}"
        tableView = "{container=" + tableWidget + " styletype='table-view' visible='true'}"
        return tableView

    def getSheet(self, name):
        """
        @param name [string] name of the Table Widget
        @return sheet real name

        Usage:
        FWLocalization().getSheet("tblDescriptors")
        """
        tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true' model.name='" + name + "'}"
        tableView = "{container=" + tableWidget + " styletype='table-view' visible='true'}"
        sheet = "{container=" + tableView + " styletype='sheet' visible='true'}"
        return sheet

    def getRow(self, name):
        """
        @param name [string] name of the Table Widget
        @return table row real name

        Usage:
        FWLocalization().getRow("tblDescriptors")
        """
        tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true' model.name='" + name + "'}"
        tableView = "{container=" + tableWidget + " styletype='table-view' visible='true'}"
        row = "{container=" + tableView + " styletype='cell indexed-cell table-row-cell' visible='true'}"
        return row


class AFPlayback:
    """
    Class contains all real names from Audio Function Playback panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Playback' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getCheckBox(self, containerName, checkBoxName):
        """
        @param containerName [string] the name of the container of the check box
        @param checkBoxName [string] the model name of the check box

        Usage:
        AFPlayback().getCheckBox("blank_container_0", "chbSmplRateFirstAlt48")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBox = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + checkBoxName + "'}"
        return checkBox

    def getWarningMessage(self, containerName, alternateBlock):
        """
        @param containerName [string] the name of the container of the check box
        @param alternateBlock [string] the name of the Alternate block ("ALTERNATE1", "ALTERNATE2")
        @return real name of Warning Message
        Usage:
        AFPlayback().getWarningMessage("blank_container_0", "ALTERNATE1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        labelWidget = "{container=" + blankContainer + " styletype='label-widget' visible='true' model.name='" + alternateBlock + "'}"
        warningLabel = "{caption='Suggested value is above 44.1 kHz' container=" + labelWidget + " styletype='css-textcolor-6' visible='true'}"
        return warningLabel

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        AFPlayback().getCTabItem()
        """
        return self.cTabItem


class AFRecord:
    """
    Class contains all real names from Audio Function Record panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Record' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getLabel(self, containerName, modelName):
        """
        @param containerName [string] the name of the container of the check box
        @param checkBoxName [string] the label widget model name

        Usage:
        AFRecord().getLabel("blank_container_0", "ALTERNATE 2")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        labelWidget = "{container=" + blankContainer + " styletype='label-widget' visible='true' model.name='" + modelName + "'}"
        return labelWidget

    def getCheckBox(self, containerName, checkBoxName):
        """
        @param containerName [string] the name of the container of the check box
        @param checkBoxName [string] the model name of the check box

        Usage:
        AFRecord().getCheckBox("blank_container_0", "chbSmplRateFirstAlt48")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBox = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + checkBoxName + "'}"
        return checkBox

    def getWarningMessage(self, containerName, alternateBlock):
        """
        @param containerName [string] the name of the container of the check box
        @param alternateBlock [string] the name of the Alternate block ("ALTERNATE1", "ALTERNATE2")
        @return real name of Warning Message
        Usage:
        AFRecord().getWarningMessage("blank_container_0", "ALTERNATE1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        labelWidget = "{container=" + blankContainer + " styletype='label-widget' visible='true' model.name='" + alternateBlock + "'}"
        warningLabel = "{caption='Suggested value is above 44.1 kHz' container=" + labelWidget + " styletype='css-textcolor-6' visible='true'}"
        return warningLabel

    def getCTabItem(self):
        """
        @return CTabItem real name
        Usage:
        AFRecord().getCTabItem()
        """
        return self.cTabItem

    def getErrorMessage(self, containerName, alternateBlockModelName):
        """
        @param containerName [string] the name of the container which contains check box
        @param alternateBlock [string] the name of the Alternate block error model name ("lblSmplRateFirstAltError", "lblSmplRateSecondAltError")
        @return real name of Warning Message
        Usage:
        AFRecord().getErrorMessage("blank_container_0", "lblSmplRateSecondAltError")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        labelWidget = "{container=" + blankContainer + " styletype='label-widget' visible='true' model.name='" + alternateBlockModelName + "'}"
        errorLabel = "{caption='Select valid Sample Rate value' container=" + labelWidget + " styletype='css-textcolor-7' visible='true'}"
        return errorLabel

    def getSliderWidget(self, containerName, modelName):
        """
        @param containerName [string] name of the container which contains slider widget
        @param modelName [string] model name of slider widget
        @return real name of Slider Widget
        Usage:
        AFRecord().getSliderWidget("blank_container_0", "sldrAnalogVolume")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        sliderWidget = "{container=" + blankContainer + " styletype='slider-widget' visible='true' model.name='" + modelName + "'}"
        return sliderWidget

    def getComboBox(self, containerName, modelName):
        """
        @param containerName [string] name of the container which contains combobox
        @param modelName [string] model name of combobox
        @return real name of combobox
        Usage:
        AFRecord().getComboBox("blank_container_2", "cmbBIntervalOne")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        comboBox = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + modelName + "'}"
        return comboBox


class AudioAdapterSettings:
    def __init__(self):
        self.cTabItem = "{caption='Audio Adapter Settings' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        AudioAdapterSettings().getCTabItem()

        """
        return self.cTabItem


class AFSPDIF:
    def __init__(self):
        self.cTabItem = "{caption='SPDIF' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"

    def getComboBox(self):
        return self.comboBox

    def getCheckBox(self, name):
        checkBox = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + name + "'}"
        return checkBox

    def getCTabItem(self):
        """
        @return CTabItem real name
        Usage:
        AFSPDIF().getCTabItem()
        """
        return self.cTabItem


class DAC:
    def __init__(self):
        self.cTabItem = "{caption='DAC' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"

    def getCTabItem(self):
        """
        @return CTabItem real name
        Usage:
        DAC().getCTabItem()
        """
        return self.cTabItem

    def getBlankContainer(self, containerName):
        """
        @param  containerName [string] container name
        @return check box real name
        Usage:
        DAC().getBlankContainer("containerNoiseGate")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        return blankContainer

    def getCheckBox(self, checkBoxName, containerName):
        """
        @param checkBoxName [string] check box name
        @param  containerName [string] container name
        @return check box real name
        Usage:
        DAC().getCheckBox("chbUserProvided", "blank_container_0")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        checkBoxWidget = "{container=" + blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + checkBoxName + "'}"
        checkBox = "{container=" + checkBoxWidget + " styletype='check-box' visible='true'}"
        return checkBox

    def getComboBox(self, comboBoxName, containerName):
        """
        @param comboBoxName [string] combo box name
        @param  containerName [string] container name
        @return combo box real name
        Usage:
        DAC().getComboBox("cmbLoad", "blank_container_0")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        comboBox = "{container=" + blankContainer + " styletype='combo-box-widget' visible='true' model.name='" + comboBoxName + "'}"
        return comboBox

    def getSlider(self, sliderName, containerName):
        """
        @param sliderName [string] slider name
        @param  containerName [string] container name
        @return slider real name
        Usage:
        DAC().getSlidersNumericField("sldrNgTreshold16bit", "containerNoiseGate")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        sliderWidget = "{container=" + blankContainer + " styletype='slider-widget' visible='true' model.name='" + sliderName + "'}"
        return sliderWidget

    def getSlidersNumericField(self, sliderName, containerName):
        """
        @param sliderName [string] slider name
        @param  containerName [string] container name
        @return sliders numeric field real name
        Usage:
        DAC().getSlidersNumericField("sldrNgTreshold16bit", "containerNoiseGate")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        sliderWidget = "{container=" + blankContainer + " styletype='slider-widget' visible='true' model.name='" + sliderName + "'}"
        numericFieldWidget = "{container=" + sliderWidget + " styletype='numeric-field-widget slider-numeric-field' visible='true'}"
        return numericFieldWidget

    def getRadioButtonWidget(self, radioButtonName, containerName):
        """
        @param radioButtonName [string] radio button name
        @param  containerName [string] container name
        @return radio button numeric field real name
        Usage:
        DAC().getRadioButtonWidget("rbgClampingMode", "containerNoiseGate")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true' model.name='" + containerName + "'}"
        radioButtonWidget = "{container=" + blankContainer + " styletype='radio-button-widget' visible='true' model.name='" + radioButtonName + "'}"
        return radioButtonWidget

    def getContentsPane(self):
        """
        Usage:
        AudioAdapterSettings().getContentsPane()
        """
        contentsPane = "{container=" + self.blankContainer + " styletype='contents-pane' visible='true'}"
        return contentsPane

    def getCell(self, tableWidgetName, cellName):
        """
        @param tableWidgetName [string] table Widget Name
        @param cellName [string] cell name

        @return real name of table cell
        Usage:
        AudioAdapterSettings()getCell("tbExtraUsbPids", "Headphone"))
        """
        tableWidget = "{container=" + self.blankContainer + " styletype='table-widget' visible='true' model.name='" + tableWidgetName + "'}"
        tableCell = "{container=" + tableWidget + " styletype='cell indexed-cell table-cell text-field-table-cell table-column' visible='true' caption='" + cellName + "'}"
        return tableCell


class EventHandling:

    def __init__(self):
        self.cTabItem = "{caption='Event Handling' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.closeTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"

    def getCTabItem(self):
        """
        @return CTabItem real name

        Usage:
        DACPanel().getCTabItem()
        """
        return self.cTabItem

    def getCloseTab(self):
        """
        @return CTabItem real name

        Usage:
        DACPanel().getCTabItem()
        """
        return self.closeTab
        self.cTabItem = "{caption='SPDIF' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-transparent' visible='true'}"
        self.comboBox = "{container=" + self.blankContainer + " styletype='combo-box-widget' visible='true'}"

    def getComboBox(self):
        return self.comboBox

    def getCheckBox(self, name):
        checkBox = "{container=" + self.blankContainer + " styletype='check-box-widget checkbox-small' visible='true' model.name='" + name + "'}"
        return checkBox


class MICRouting:
    """
    Class contains all real names from MIC Routing panel
    """
    def __init__(self):
        self.cTabItem = "{caption='MIC Routing' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.panel = "{container=" + self.cTabItem + " styletype='scs-runtime-panel' visible='true'}"
        self.popUp = "{type='javafx.stage.Popup' visible='true'}"

    def getLabelWidgetName(self, name, modelName):
        """
        @param name [string] name of label
        @param modelName [string] model.name property
        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getLabelWidgetName("Reference Input", "label_left_reference")
        micRoutingObj.getLabelWidgetName("Reference Input", "label_right_reference")
        micRoutingObj.getLabelWidgetName("ADC and DMIC Inputs", "label_adc_dmic_inputs")
        """
        labelName = "{value='" + name + "' container=" + self.panel + " styletype='label-widget' visible='true' model.name='" + modelName + "'}"
        return labelName

    def getComboBoxWidget(self, modelName):
        """
        @param modelName [string] model.name property
        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getComboBoxWidget("combo_box_left_reference")
        micRoutingObj.getComboBoxWidget("combo_box_voice_mic_1")
        """
        comboBoxWidget = "{container=" + self.panel + " styletype='combo-box-widget' visible='true' model.name='" + modelName + "'}"
        return comboBoxWidget

    def getComboBoxLabel(self, name, modelName=None):
        """
        @param name [string] name of item from combo box
        @param modelName [string] model.name property
        @return combo box label real name

        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getComboBoxLabel("AIN1")
        """
        if modelName == None:
            label = "{caption='" + name + "' container=" + self.popUp + " styletype='label label-name' visible='true'}"
        else:
            comboBoxWidget = "{container=" + self.panel + " styletype='combo-box-widget' visible='true' model.name='" + modelName + "'}"
            label = "{caption='" + name + "' container=" + comboBoxWidget + " styletype='label label-name' visible='true'}"
        return label

    def getButton(self, buttonName):
        """
        @param modelName [string] model name of container
        @return sliderWidget real name

        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getButton("diagram_link_0")
        """
        button = "{container=" + self.cTabItem + " styletype='diagram-link-widget' visible='true' model.name='" + buttonName + "'}"
        return button

    def getRoundedButton(self, buttonName):
        """
        @param modelName [string] model name of container
        @return sliderWidget real name

        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getRoundedButton("rounded_button_left_reference")
        micRoutingObj.getRoundedButton("rounded_button_right_error")
        micRoutingObj.getRoundedButton("rounded_button_voice_mic_1")
        """
        button = "{container=" + self.cTabItem + " styletype='rounded-button-widget' visible='true' model.name='" + buttonName + "'}"
        return button

    def getDiagramContainer(self, modelName):
        """
        @param modelName [string] model name of container
        @return sliderWidget real name

        Usage:
        micRoutingObj = MICRouting()
        micRoutingObj.getDiagramContainer("diagram_image_left_reference_ain1")
        micRoutingObj.getDiagramContainer("diagram_image_left_error_ain3")
        micRoutingObj.getDiagramContainer("diagram_image_voice_mic_1_dmic_1_l")
        """
        diagramContainer = "{container=" + self.cTabItem + " styletype='diagram-container' visible='true' model.name='" + modelName + "'}"
        return diagramContainer


class AdcConfigure:
    """
    Class contains all real names from ADC configure panel
    """
    def __init__(self):
        self.cTabItem = "{caption='ADC Configure' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.closeTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"
        self.runtimePanel = "{container='" + self.cTabItem + "' styletype='scs-runtime-panel' visible='true'}"

    def getSliderWidget(self, modelName):
        """
        @param modelName [string] model name of container
        @return sliderWidget real name

        Usage:
        AdcConfigure().getSliderWidget("AIN1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-solid' visible='true' model.name='" + modelName + "'}"
        sliderWidget = "{container=" + blankContainer + " styletype='slider-widget' visible='true'}"
        return sliderWidget

    def getNumericFieldFromSliderWidget(self, modelName):
        """
        @param modelName [string] model name of container
        @return numeric field real name

        Usage:
        AdcConfigure().getNumericFieldFromSliderWidget("AIN1")
        """
        blankContainer = "{container=" + self.cTabItem + " styletype='blank-container scs-border-solid' visible='true' model.name='" + modelName + "'}"
        numericField = "{container=" + blankContainer + " styletype='numeric-field-widget slider-numeric-field' visible='true'}"
        return numericField

    def getButton(self, buttonName):
        """
        @param modelName [string] model name of container
        @return button real name

        Usage:
        AdcConfigure().getButton("mic_routing_button")
        """
        button = "{container=" + self.cTabItem + " styletype='button-widget' visible='true' model.name='" + buttonName + "'}"
        return button

    def getComboBox(self, comboBoxName):
        """
        @param comboBoxName[string] name of combo box
        @return combo box real name

        Usage:
        AdcConfigure().getComboBox("adc1_hpf_frequency_cb")
        """
        comboBox = "{container=" + self.cTabItem + " styletype='combo-box-widget' visible='true' model.name='" + comboBoxName + "'}"
        return comboBox


class DMIC:
    """
    Class contains all real names from DMIC panel
    """
    def __init__(self):
        self.cTabItem = "{caption='DMIC' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.closeTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"
        self.runtimePanel = "{container='" + self.cTabItem + "' styletype='scs-runtime-panel' visible='true'}"

    def getDiagramContainer(self, modelName):
        """
        @param modelName[string] name of diagram image model
        @return Diagram Container real name

        Usage:
        DMIC().getDiagramContainer("dmic_voice_mic_2_dmic_1_r")
        """
        realname = "{container=" + self.cTabItem + " styletype='diagram-container' styletype='diagram-container' model.name='diagram_image_" + modelName + "' visible='true'}"
        return realname

    def getButton(self, buttonName):
        """
        @param modelName [string] model name of container
        @return button real name

        Usage:
        DMIC().getButton("mic_routing_button")
        """
        button = "{container=" + self.cTabItem + " styletype='button-widget' visible='true' model.name='" + buttonName + "'}"
        return button

    def getToggleButtonWidget(self, state=None):
        """
        @param state [string] state of button - can be "3 MHZ MODE" or "1.5 MHZ MODE"
        @return toggleButtonWidget real name to togle button if state is None
        @return button real name of button from toggle button if state is not none

        Usage:
        DMIC().getToggleButtonWidget()
        """
        toggleButtonWidget = "{container=" + self.cTabItem + " styletype='toggle-button-widget' visible='true'}"
        button = ""
        if state == None:
            return toggleButtonWidget
        elif state == "1.5 MHZ MODE":
            button = "{caption='1.5 MHZ MODE' container=" + toggleButtonWidget + " styletype='text' visible='true'}"
            return button
        elif state == "3 MHZ MODE":
            button = "{caption='3 MHZ MODE' container=" + toggleButtonWidget + " styletype='text' visible='true'}"
            return button
        else:
            test.fail("FAIL", "There is no button " + state)


class DebugConsole:
    """
    Class contains all real names from debug console panel
    """
    def __init__(self):
        self.cTabItem = "{caption='Debug Console' parent.visible='true' type='org.eclipse.swt.custom.CTabItem' window=" + MainShell().getMainWindow() + "}"
        self.closeTab = "{container=" + self.cTabItem + " type='com.froglogic.squish.swt.CTabCloseBox'}"
        self.runtimePanel = "{container=" + self.cTabItem + " styletype='scs-runtime-panel' visible='true'}"
        self.textAreaWidget = "{container=" + self.cTabItem + " styletype='text-area-widget' visible='true'}"
        self.appSelection = "{container=" + self.cTabItem + " styletype='radio-button-widget' visible='true' model.name='app_select'}"
        self.loadedFrom = "{container=" + self.cTabItem + " styletype='radio-button-widget' visible='true' model.name='loaded_from_selection'}"

    def getTextAreaWidget(self):
        """
        Usage:
        debugConsoleObj = DebugConsole()
        debugConsoleObj.getTextAreaWidget()
        """
        return self.textAreaWidget

    def getButton(self, modelName):
        """
        @param modelName [string] name of the button
        @return real name of button

        Usage:
        debugConsoleObj = DebugConsole()
        debugConsoleObj.getButton("sw_reset_btn")
        """
        button = "{container=" + self.cTabItem + " styletype='button-widget' visible='true' model.name='" + modelName + "'}"
        return button

    def getRadioButtonFromAppSelection(self, radioButtonName):
        """
        @param radioButtonName [string] name of radio button
        @return real name of radio button from app selection

        Usage:
        debugConsoleObj = DebugConsole()
        debugConsoleObj..getRadioButtonFromAppSelection("UTA")
        """
        radioButton = "{caption='" + radioButtonName + "' container=" + self.appSelection + " styletype='radio-button' visible='true'}"
        return radioButton

    def getRadioButtonFromLoadSelection(self, radioButtonName):
        """
        @param radioButtonName [string] name of radio button
        @return real name or radio button from load selection

        Usage:
        debugConsoleObj = DebugConsole()
        debugConsoleObj.getRadioButtonFromLoadSelection("SOTP")
        """
        radioButton = "{caption='" + radioButtonName + "' container=" + self.loadedFrom + " styletype='radio-button' visible='true'}"
        return radioButton
