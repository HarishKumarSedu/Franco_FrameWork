# Copyright (c) 2017 Cirrus Logic, Inc and
# Cirrus Logic International Semiconductor Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license.  The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic.  Cirrus Logic assumes no responsibility or
# liability for any errors or inaccuracies that may appear in this document
# or any software that may be provided in association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic.
#
# Warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
#
## @file   design.py
## @brief  All design functions

# Examples: background, theme, icons...

source(findFile("scripts", "common.py"))


class Design:
    listView = PopupListView().getListView()

    @classmethod
    def readCurrentTheme(cls):
        """
        This method reads and returns name of current theme

        @return [string] return string of current theme

        Usage:
        Design.readCurrentTheme()
        """
        preferencesObj = Preferences()
        Common.openPreferencesWindow("Appearance")
        try:
            comboBox = preferencesObj.getThemeComboBox()
            currentThemeObj = waitForObject(comboBox)
        except:
            test.fail("FAIL", "Can not find object: " + comboBox)
        try:
            currentTheme = str(currentThemeObj.parent.value)
        except:
            test.fail("FAIL", "Can not find object property: " + comboBox)
        InputActions.mouseClickOnButton(preferencesObj.getButton("CANCEL"))
        return currentTheme

    @classmethod
    def changeTheme(cls):
        """
        This method changes theme:
        if theme is Light set Dark or if theme is Dark set Light

        @return no return

        Usage:
        Design.changeTheme()
        """
        preferencesObj = Preferences()
        popupListViewobj = PopupListView()
        Common.openPreferencesWindow("Appearance")
        InputActions.mouseClickOnItem(preferencesObj.getTreeItem("Appearance"))
        currentTheme = str(waitForObject(preferencesObj.getThemeComboBox()).children)
        if "Dark" in currentTheme:
            InputActions.mouseClickOnButton(preferencesObj.getThemeComboBox())
            InputActions.mouseClickOnItem(popupListViewobj.getPopupItem("Light"))
        else:
            InputActions.mouseClickOnButton(preferencesObj.getThemeComboBox())
            InputActions.mouseClickOnItem(popupListViewobj.getPopupItem("Dark"))
        snooze(0.5)
        InputActions.mouseClickOnButton(preferencesObj.getButton("OK"))

    @classmethod
    def setTheme(cls, name):
        """
        This method sets theme.

        @param name [string] name of theme which will be set
        @return no return

        Usage:
        Design.setTheme("Light")
        Design.setTheme("Dark")
        """
        preferencesObj = Preferences()
        popupListViewobj = PopupListView()
        Common.openPreferencesWindow("Appearance")
        InputActions.mouseClickOnButton(preferencesObj.getThemeComboBox())
        InputActions.mouseClickOnItem(popupListViewobj.getPopupItem(name))
        InputActions.mouseClickOnButton(preferencesObj.getButton("OK"))

    @classmethod
    def readWindowBackground(cls, window, theme):
        """
        This method read theme for a specific window or tab

        @param  window [string] window/tab where theme will be checked
        @param theme [string] theme which will be checked
        @return no return
        @return no return

        Usage:
        directoryTable = Directory().getTable()
        Design.readWindowBackground(directoryTable, "Dark")
        """
        blue = waitForObject(window).control.background.blue
        green = waitForObject(window).control.background.green
        red = waitForObject(window).control.background.red

        if theme == "Dark" and (blue or green or red) < 50:
            test.passes("PASS", "Theme in " + window + " is " + theme)
        elif theme == "Light" and (blue or green or red) > 200:
            test.passes("PASS", "Theme in " + window + " is " + theme)
        else:
            test.fail("FAIL", "Theme in " + window + " is not " + theme)

    @classmethod
    def readDialogBackground(cls, dialog, theme):
        """
        This method read theme for a specific dialog

        @param  dialog [string] dialog where theme will be checked
        @param theme [string] theme which will be checked
        @return no return

        Usage:
        addSystemDialog = AddSystemStage().getAddSystem()
        Design.readDialogBackground(addSystemDialog, "Dark")
        """
        blue = waitForObject(dialog).background.blue
        green = waitForObject(dialog).background.green
        red = waitForObject(dialog).background.red

        if theme == "Dark" and (blue or green or red) < 50:
            test.passes("PASS", "Theme in " + dialog + " is " + theme)
        elif theme == "Light" and (blue or green or red) > 200:
            test.passes("PASS", "Theme in " + dialog + " is " + theme)
        else:
            test.fail("FAIL", "Theme in " + dialog + " is not " + theme)
