"""
Methods to execute Jython scripts from SCS.
"""

import os

source(findFile("scripts", "common.py"))
source(findFile("scripts", "input_actions.py"))
source(findFile("scripts", "bsp.py"))
source(findFile("scripts", "base_panel_verify.py"))


class JythonExecute(BasePanelVerify):
    """
    Class contains methods to execute jython scripts
    """
    def set_jython_inputs(self, base_squish=None, skip_reset=None,
                          reg_map_test=False):
        if base_squish:
            self.base_squish = base_squish
            self.test_inputs_dict = self.base_squish.test_inputs_dict
            self.sys_name = self.base_squish.sys_name
            self.reg_map_name = self.base_squish.reg_map_name
            self.test_inputs = self.base_squish.squish_config.squish_config.get(
                'test_inputs_path')
        else:
            self.set_inputs(skip_reset, reg_map_test)
            self.test_inputs = self.squish_config.squish_config.get('test_inputs_path')

    def jython_execute(self, console_content=None, skip_history_check=False, jython_script_name=None):
        # Selecting Jython script and executing it
        if jython_script_name:
            self.jython_script = jython_script_name
        else:
            self.jython_script = self.test_inputs_dict['script_name']
        if not isinstance(self.jython_script, list):
            jython_scripts = [self.jython_script]
        else:
            jython_scripts = self.jython_script
        if not isinstance(console_content, list):
            console_contents = [console_content]
        else:
            console_contents = console_content
        for index, jython_script in enumerate(jython_scripts):
            jython_script_path = os.path.join(self.test_inputs, "..", "jython_scripts", jython_script)
            jython_script_path = os.path.abspath(jython_script_path)
            if not os.path.exists(jython_script_path):
                jython_script_path = os.path.join(self.squish_config.squish_config.get('test_inputs_common_path'),
                                                  "..", "jython_scripts", jython_script)
            jython_script_path = os.path.abspath(jython_script_path)
            self.assert_true(Bsp.execute_script(self.sys_name, jython_script_path),
                             "Check if jython script %s is successfully executed" % jython_script)
            test.log("Executed jython script %s" % jython_script)
            console_output = Common.returnConsoleContent()
            console_output = str(console_output)
            test.log("<-----Jython Script(%s)Console output-------->" % jython_script)
            test.log(console_output)
            if not skip_history_check:
                history_actual_srs = self.test_inputs_dict['history_actual_srs']
                history_golden_srs = self.test_inputs_dict['history_golden_srs']
                test.log("history_golden_srs %s" % history_golden_srs)
                self.close_tab("Console")
                Common.selectAllInHistory(self.sys_name)
                actual_srs_file_path = Common.exportAllHistory(self.sys_name, history_actual_srs)
                actual_srs_file_path = os.path.abspath(actual_srs_file_path)
                history_golden_srs = os.path.join(SuiteGlobals.PATH_TO_TESTDATA_FOLDER, history_golden_srs)
                snooze(2)
                self.compare_history_files(actual_srs_file_path, history_golden_srs)
            if console_content:
                Common.checkConsoleContent(console_contents[index], open_console=True)
                self.close_tab("Console")
            else:
                self.assert_not_contains(console_output, ["StudioLinkException", "Exception", "ERROR"],
                                         "Check that the file execution completed without any errors in console window")
        # Refresh register map
        reg_map = RegisterMap(self.reg_map_name)
        InputActions.mouseClickOnItem(reg_map.refreshPage)
        test.log("Register Map refresh is done")
