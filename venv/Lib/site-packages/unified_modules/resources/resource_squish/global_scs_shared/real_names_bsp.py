"""
This script contains all real names needed for all panels in BSP
"""


class BspRealNames:
    """
    This class contains methods which can be used to get real names of all widgets
    """

    def get_main_window(self, device=None):
        main_window = " isvisible='true' type='org.eclipse.swt.widgets.Shell'}"
        if device is not None:
            main_win = "{caption?='*" + str(device) + "*'" + main_window
        else:
            main_win = "{caption?='*'" + main_window
        return main_win

    def get_blank_container(self, device=None, container_name=None, styletype="solid"):
        blank_container = "{styletype='blank-container scs-border-" + styletype + "' model.name='" \
                          + container_name + "' visible='true' window=" + self.get_main_window(device) + "}"
        return blank_container

    def get_device(self, device_name):
        device = "_cell indexed-cell tree-cell' styletype='text' visible='true'}"
        device = "{caption='" + device_name + "' container=':" + device_name + device
        return device

    def get_radio_button(self, device=None, container_name=None, radio_group=None, container_styletype="solid"):
        radio_button_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                              " styletype='radio-button-widget' model.name='" + radio_group + "' visible='true'}"
        radio_button = "container=" + radio_button_widget + \
                       " styletype='radio-button scs-defaultRadioButton' visible='true'}"
        return radio_button

    def get_radio_btn_widget_no_container(self, device=None):
        radio_btn_widget = "container={styletype='radio-button-widget' visible='true' window=%s} " \
                           "styletype='radio-button scs-defaultRadioButton' visible='true'}" \
                           % (self.get_main_window(device))
        return radio_btn_widget

    def get_slider_widget(self, device=None, container_name=None, slider_name=None, container_styletype="solid"):
        slider_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                        " styletype='numeric-field-widget slider-numeric-field' model.name='" + \
                        slider_name + "' visible='true'}"
        return slider_widget

    def get_numeric_field(self, device=None, container_name=None, slider_name=None, container_styletype="solid"):
        slider_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                    " styletype='numeric-field-widget numeric-field-small' model.name='" + \
                    slider_name + "' visible='true'}"
        return slider_widget

    def get_numeric_field_widget(self, device, container_name, slider_name, container_styletype="solid"):
        numeric_field_widget = "{container=" + \
                               self.get_slider_widget(device, container_name, slider_name, container_styletype) + \
                               " styletype='text-input text-field' visible='true'}"
        return numeric_field_widget

    def get_text_field(self, device, container_name, slider_name, container_styletype="solid"):
        multiplier = "{container=" + self.get_numeric_field_widget(device, container_name, slider_name, container_styletype) \
                     + " type='javafx.scene.layout.Pane' visible='true'}"
        return multiplier

    def get_slider_widget_slider(self, device, container_name, slider_name, container_styletype="solid"):
        if container_name is None:
            slider_widget = "{container=" + self.get_main_window(device) + " styletype='slider-widget' model.name='" \
                            + slider_name + "' visible='true'}"
        else:
            slider_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) \
                            + " styletype='slider-widget' model.name='" + slider_name + "' visible='true'}"

        return slider_widget

    def get_slider_knob(self, device=None, container_name=None, slider_name=None, container_styletype="solid"):
        slider_knob = "{container=" + self.get_slider_widget_slider(device, container_name, slider_name, container_styletype) + \
                      " styletype='indicator indicator-highlight' visible='true'}"
        return slider_knob

    def get_slider_knob_new(self, device, container_name, slider_name, container_styletype="solid", indicator=''):
        slider_knob = "{container=%s styletype='indicator%s' visible='true'}" \
                      % (self.get_slider_widget_slider(device, container_name, slider_name, container_styletype), indicator)
        return slider_knob

    def get_slider_knob_reserved(self, device=None, container_name=None, slider_name=None, container_styletype="solid"):
        slider_knob = "{container=" + self.get_slider_widget_slider(device, container_name, slider_name, container_styletype) + \
                      " styletype='indicator' visible='true'}"
        return slider_knob

    def get_combo_box_widget(self, device=None, container_name=None, combo_box_name=None, container_styletype="solid"):
        combo_box_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                           " styletype='combo-box-widget' model.name='" + combo_box_name + "' visible='true'}"
        return combo_box_widget

    def get_combo_box_transparent_widget(self, device=None, container_name=None, combo_box_name=None):
        combo_box_widget = "{container=" + self.get_blank_container(device, container_name, styletype='transparent') + \
                           " styletype='combo-box-widget' model.name='" + combo_box_name + "' visible='true'}"
        return combo_box_widget

    def get_check_box_widget(self, device=None, container_name=None, check_box_name=None, styletype="solid", check_box_style_type="small"):
        check_box_widget = "{container=" + self.get_blank_container(device, container_name, styletype) + \
                           " styletype='check-box-widget checkbox-" + check_box_style_type + "' model.name='" + check_box_name + \
                           "' visible='true'}"
        return check_box_widget

    def get_check_box_transparent_widget(self, device=None, container_name=None, check_box_name=None, styletype="transparent"):
        check_box_widget = "{container=" + self.get_blank_container(device, container_name, styletype) + \
                           " styletype='check-box-widget checkbox-small' model.name='" + check_box_name + \
                           "' visible='true'}"
        return check_box_widget

    def get_check_box(self, device=None, container_name=None, check_box_name=None, styletype="solid"):
        check_box = "{caption?='*' container=" + \
                    self.get_check_box_widget(device, container_name, check_box_name, styletype) + \
                    " styletype='check-box' visible='true'}"
        return check_box

    def get_box(self, device, container_name, check_box_name, styletype="solid"):
        box = "{container=" + self.get_check_box(device, container_name, check_box_name, styletype) + \
              " styletype='box' visible='true'}"
        return box

    def get_close_button(self, device):
        label = "{caption='X' styletype='label scs-closeLabel' visible='true' window=" \
                + self.get_main_window(device) + "}"
        return label

    def get_text_widget(self, device=None, container_name=None, name=None, container_styletype="solid"):
        slider_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                        " styletype='numeric-field-widget numeric-field-small' model.name='" + \
                        name + "' visible='true'}"
        return slider_widget

    def get_text_field_widget(self, device=None, container_name=None, name=None, container_styletype="solid"):
        text_field_widget = "{container=" + \
                            self.get_text_widget(device, container_name, name, container_styletype) + \
                            " styletype='text-input text-field' visible='true'}"
        return text_field_widget

    def get_text_box(self, device=None, container_name=None, name=None, container_styletype="solid"):
        multiplier = "{container=" + self.get_text_field_widget(device, container_name, name, container_styletype)\
                     + " type='javafx.scene.layout.Pane' visible='true'}"
        return multiplier

    def get_label_widget(self, device=None, container_name=None, label_name=None, container_styletype="solid"):
        label_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) +\
                       " styletype='label-widget' model.name='" + label_name + "' visible='true'}"
        return label_widget

    def get_label_widget_no_container(self, device=None, label_name=None):
        label_widget = "{styletype='label-widget' model.name='" + label_name + \
                       "' visible='true' window=" + self.get_main_window(device) + "}"
        return label_widget

    def get_slider_widget_no_container(self, device, slider_name):
        slider_element = "{styletype='slider-widget' model.name='" + slider_name + "' visible='true' window=" + \
                         self.get_main_window(device) + "}"
        slider_widget = "{container=" + slider_element + \
                        " styletype='numeric-field-widget slider-numeric-field' visible='true'}"
        return slider_widget

    def get_scroll_bar(self, device=None):
        scroll_bar = "{styletype='scroll-bar' visible='true' window=" + self.get_main_window(device) + "}"
        return scroll_bar

    def get_scroll_bar_increment_button(self, device=None):
        scroll_bar = "{styletype='scroll-bar' visible='true' window=" + self.get_main_window(device) + "}"
        scroll_bar_increment_btn = "{container=" + scroll_bar + " styletype='increment-button' visible='true'}"
        return scroll_bar_increment_btn

    def get_button_widget(self, device, container_name, button_name, container_styletype="solid"):
        button_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                        " styletype='button-widget' model.name='" + button_name + "' visible='true'}"
        return button_widget

    def get_hex_color_code(self, widget_real_name):
        try:
            obj = waitForObject(widget_real_name)
            if hasattr(obj.model.color,"hexcolorcodedark"):
                return obj.model.color.hexcolorcodedark
            elif hasattr(obj.model.color,"hexcolorcode"):
                return obj.model.color.hexcolorcode
            else:
                raise AttributeError("No such property : {}".format(str(obj.model.color)))
        except LookupError:
            test.log("FAIL", "Scroll bar is not found")
        return scroll_bar

    def get_border(self, widget_real_name):
        try:
            obj = waitForObject(widget_real_name)
            return obj.model.border
        except (LookupError, AttributeError):
            test.log("FAIL", "Unable to find object or attribute doesn't exists for the object")

    def get_border_hex_color_code(self, widget_real_name):
        try:
            obj = waitForObject(widget_real_name)
            return obj.model.bordercolor.hexcolorcode
        except (LookupError, AttributeError):
            test.log("FAIL", "Unable to find object or attribute doesn't exists for the object")

    def change_theme(self):
        Design.changeTheme()

    def read_theme(self):
        return Design.readCurrentTheme()

    def get_background_theme(self, window, theme):
        Design.readWindowBackground(window, theme)

    def get_check_box_widget_no_container(self, device=None, check_box_name=None):
        check_box_widget = "{model.name='%s' styletype='check-box-widget checkbox-small' visible='true' window=%s}"\
                           % (check_box_name, self.get_main_window(device))
        return check_box_widget

    def get_combo_box_widget_no_container(self, device=None, combo_box_name=None):
        combo_box_widget = "{styletype='combo-box-widget' model.name='" + combo_box_name + \
                           "' visible='true' window=" + self.get_main_window(device) + "}"
        return combo_box_widget

    def get_toggle_button_real_names(self, device=None, toggle_states=[], default_toggle_state=True,
                                     container_name=None, container_styletype="solid", toggle_group=None):
        toggle_real_names = list()
        for toggle_btn_index, toggle_state in enumerate(toggle_states):
            style_button_on_default = " styletype='button button-small button-on-default' visible='true'}"
            style_button_off_default = " styletype='button button-off-default button-small' visible='true'}"
            style_button_on_secondary = " styletype='button button-on-secondary button-small' visible='true'}"
            style_button_off_secondary = " styletype='button button-off-secondary button-small' visible='true'}"
            toggle_button_widget = "{container=" + self.get_blank_container(device, container_name, container_styletype) + \
                                  " styletype='toggle-button-widget' model.name='" + toggle_group + "' visible='true'}"
            toggle_button_on_default = "{caption='" + toggle_state + "' container=" + toggle_button_widget + \
                                       style_button_on_default
            toggle_button_off_default = "{caption='" + toggle_state + "' container=" + toggle_button_widget +\
                                        style_button_off_default
            toggle_button_on_secondary = "{caption='" + toggle_state + "' container=" + toggle_button_widget + \
                                         style_button_on_secondary
            toggle_button_off_secondary = "{caption='" + toggle_state + "' container=" + toggle_button_widget + \
                                          style_button_off_secondary
            if default_toggle_state:
                if toggle_btn_index == 0:
                    toggle_real_names.append(toggle_button_on_default)
                    toggle_real_names.append(toggle_button_on_secondary)
                else:
                    toggle_real_names.append(toggle_button_off_default)
                    toggle_real_names.append(toggle_button_off_secondary)
            else:
                if toggle_btn_index == 0:
                    toggle_real_names.append(toggle_button_off_default)
                    toggle_real_names.append(toggle_button_off_secondary)
                else:
                    toggle_real_names.append(toggle_button_on_default)
                    toggle_real_names.append(toggle_button_on_secondary)
        return toggle_real_names

    def get_panel_scroll_bar(self, panle_name=None):
        main_window = " isvisible='true' type='org.eclipse.swt.widgets.Shell'}"
        main_win = "{caption?='" + panle_name + "'" + main_window
        scroll_bar = "{styletype='scroll-bar' visible='true' window=" + main_win + "}"
        return scroll_bar

    def get_panel_scroll_button(self, button_name='increment-button', panel_name=None):
        main_window = " isvisible='true' type='org.eclipse.swt.widgets.Shell'}"
        main_win = "{caption?='" + panel_name + "'" + main_window
        scroll_bar_button = "{container={styletype='scroll-bar' visible='true' window=" + main_win + "} " \
                            "styletype='%s' visible='true'}" % button_name
        return scroll_bar_button

    def get_button_widget_no_container(self, device=None, button_name=None):
        button_widget = "{model.name='%s' styletype='button-widget' visible='true' window=%s}"\
                           % (button_name, self.get_main_window(device))
        return button_widget

    def get_rounded_button_no_container(self, device=None, button_name=None):
        rounded_button_widget = "{model.name='%s' styletype='rounded-button-widget' visible='true' window=%s}" \
                        % (button_name, self.get_main_window(device))
        return rounded_button_widget
