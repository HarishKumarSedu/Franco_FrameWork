# Copyright (c) 2017 Cirrus Logic, Inc and
# Cirrus Logic International Semiconductor Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license.  The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic.  Cirrus Logic assumes no responsibility or
# liability for any errors or inaccuracies that may appear in this document
# or any software that may be provided in association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic.
#
# Warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
#
## @file   projects.py
## @brief  Create project for each type of SCS projects


import os
import sys

source(findFile("scripts", "input_actions.py"))
source(findFile("scripts", "real_names.py"))


class NewProjects:

    @classmethod
    def newDevicePanelProject(cls, projectName, availableSys=None, virtualSys=None, template=None, device=None, location=None, context=False):
        """
        This method is used to create new Device Panel Project from welcome screen or from main menu.

         It has 6 parameters and you need to:

         1. add projectName
         2. define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
         3. set value for template you will use
         4. set value for device that will be used
         5. choose the location where to save the project
         6. context parameter is option to open project wizard from context menu
         #TODO if needed - change the destination folder

        @param projectName [string] name of project
        @param availableSys [string] default None(click on virtual system)
                                                 (click on avalible system)
        @param virtualSys [string] default None(click on avalible system)
                                               (click on virtual system)
        @param template [string] default None(template use default value)
                                             (value for template)
        @param device [string] default None(device will be default from scs)
                                           (value for device that will be used)
        @param location [string] default None(location will be default from scs)
                                             (location where to save the project)
        @param context [bool] default False (open project wizard from welcome screen)
                                      True (this parameter is option to open project wizard from context menu))
        @return [bool] False if can not click on device, template, system that mouse try to click

        Usage:
        NewProjects.newDevicePanelProject("testing", None, "cdb42L42", "Three Columns Template", "cs42l42")
        NewProjects.newDevicePanelProject("Template_project", None, "cdb42L42", template)
        """
        # Start wizard from welcome screen or through main menu
        newDeviceProjectShellObj = NewDeviceProjectShell()
        link = Welcome().getDevicePanelProjectHyperlinkLink()
        items = ""
        listOfItems = []
        timerTime = 60
        timer = 0
        try:
            (findObject(link)) != -1
            InputActions.mouseClickOnLink(link)
            test.log("Wizard from Welcome Screen", "Accessed through hyper link")
        except:
            if not context:
                InputActions.activateMenuItem("File->New->Device Project")
                test.log("Wizard from Main Menu", "Accessed through main menu")

        """ Select Available or Virtual System"""
        if availableSys != None:
            if not (object.exists(newDeviceProjectShellObj.getAvailableSystem(availableSys))):
                InputActions.mouseClickOnItem(newDeviceProjectShellObj.getAvailableSystemsListView())
                length = ReadActions.availableSystemsListLenghtInNewProjectShell()
                counter = 0
                availableSysPosition = 0
                systems = ""
                try:
                    listView = waitForObject(newDeviceProjectShellObj.getAvailableSystemsListView())
                except LookupError:
                    test.fail("FAIL", "Can not find object")
                try:
                    systems = str(listView.items)
                except AtrributeError:
                    test.fail("FAIL", "Can not find object property")
                if systems != "":
                    systems = systems[1:-1]
                    systems = systems.replace(" : false : null : ", "")
                    systems = systems.replace(" : true : null : ", "")
                    listOfSystems = systems.split(", ")
                else:
                    test.fail("FAIL", "System list is empty")
                if availableSys in listOfSystems:
                    availableSysPosition = listOfSystems.index(availableSys)
                else:
                    test.fail("FAIL", "Target system does not exist")
                while (counter != availableSysPosition and availableSysPosition != 0):
                    nativeType("<Down>")
                    counter += 1
                    snooze(0.3)
            else:
                InputActions.mouseClickOnItem(newDeviceProjectShellObj.getAvailableSystem(availableSys))
        elif virtualSys != None:
            if not (object.exists(newDeviceProjectShellObj.getVirtualSystem(virtualSys))):
                InputActions.mouseClickOnItem(newDeviceProjectShellObj.getVirtualSystemsListView())
                length = ReadActions.checkLengthOfDevicesInNewProjectShell()
                counter = 0
                while (not object.exists(newDeviceProjectShellObj.getVirtualSystem(virtualSys))):
                    nativeType("<Down>")
                    snooze(0.3)
                    counter += 1
                    if counter == length:
                        test.log("System " + virtualSys + " could not be found in the list")
                        break

            else:
                InputActions.mouseClickOnItem(newDeviceProjectShellObj.getVirtualSystem(virtualSys))
        else:
            test.fail("FAIL", "You need to select available or virtual system")
            snooze(0.5)
            return False

        """ Go to Next Screen"""
        InputActions.mouseClickOnButton(newDeviceProjectShellObj.getButton("Next"))
        snooze(1)

        """ If these templates are selected expand folder"""
        defaultTemplates = ["One Column Template", "Three Columns Template", "Two Columns Template", "Two Rows With Four Sections Template", "Two Rows With Three Sections Template"]

        if template in defaultTemplates:
            try:
                expand(waitForObject(newDeviceProjectShellObj.getTemplate("Default")))
            except LookupError as lue:
                test.fails("FAIL", str(lue))
            snooze(0.5)

        """ If template is defined select it"""
        if template != None:
            InputActions.mouseClickOnItem(newDeviceProjectShellObj.getTemplate(template))

        """ If device is defined select it"""
        if device != None:
            if not object.exists(newDeviceProjectShellObj.getDevice(device)):
                while timer < timerTime:
                    try:
                        items = str(waitForObject(newDeviceProjectShellObj.getListView()).items)[1:-1]
                        listOfItems = items.split(", ")
                        listOfItems = [x.upper() for x in listOfItems]
                    except Exception as err:
                        test.fail("FAIL", "Error message: " + str(err))
                        break
                    test.log(str(listOfItems))
                    if len(listOfItems) == 0 or listOfItems == ['NULL']:
                        snooze(1)
                        timer += 1
                    else:
                        positionOfDeviceInList = listOfItems.index(device)
                        break
                if positionOfDeviceInList <= 4:
                    InputActions.mouseClickOnItem(newDeviceProjectShellObj.getDevice(device))
                else:
                    InputActions.mouseClickOnItem(newDeviceProjectShellObj.getDevice(listOfItems[0]))
                    for _ in range(positionOfDeviceInList):
                        nativeType("<Down>")
                    InputActions.mouseClickOnItem(newDeviceProjectShellObj.getDevice(device))
            else:
                InputActions.mouseClickOnItem(newDeviceProjectShellObj.getDevice(device))

        """ Enter project name in text box"""
        InputActions.mouseClickOnItem(newDeviceProjectShellObj.getProjectNameTextBox())
        snooze(0.5)
        try:
            type(waitForObject(newDeviceProjectShellObj.getProjectNameTextBox()), projectName)
        except LookupError as lue:
            test.fails("FAIL", str(lue))
        snooze(0.5)

        """ If location is defined, type it in"""
        if location != None:
            InputActions.mouseClickOnItem(newDeviceProjectShellObj.getProjectLocationTextBox())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            try:
                type(waitForObject(newDeviceProjectShellObj.getProjectLocationTextBox()), location)
            except LookupError as lue:
                    test.fails("FAIL", str(lue))

        """" Finish """
        InputActions.mouseClickOnButton(newDeviceProjectShellObj.getButton("Done"))
        test.log("New Device Panel Project is created", projectName + " Successfully created")
        snooze(3)
        return True

    @classmethod
    def newSystemPanelProject(cls, projectName, availableSys=None, virtualSys=None, device=None, location=None, context=False):
        """
        This method is used to create new System Panel Project from welcome screen or from main menu.

         It has 6 parameters and you need to:

         1. add projectName
         2. define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
         3. set value for template you will use
         4. set value for device that will be used
         5. choose the location where to save the project
         6. context parameter is option to open project wizard from context menu
         #TODO if needed - change the destination folder

        @param projectName [string] name of project
        @param availableSys [string] default None(click on virtual system)
                                                 (click on available system)
        @param virtualSys [string] default None(click on available system)
                                               (click on virtual system)
        @param device [string] default None(device will be default from scs)
                                           (value for device that will be used)
        @param location [string] default None(location will be default from scs)
                                             (location where to save the project)
        @param context [bool] default False(open project wizard from welcome screen)
                                      True (this parameter is option to open project wizard from context menu)
        @return [bool] False if can not click on device, template, system that mouse try to click

        Usage:
        NewProjects.newSystemPanelProject("testing", None, "cdb42L42", "Three Columns Template", "cs42l42")
        NewProjects.newSystemPanelProject("project", None, "cdb42L42")
        NewProjects.newSystemPanelProject(project1, None, "cdb42L42")
        """

    # Start wizard from welcome screen or through main menu
        newSystemProjectShellObj = NewSystemProjectShell()
        link = Welcome().getSystemPanelProjectHyperlinkLink()
        try:
            (findObject(link)) != -1
            InputActions.mouseClickOnLink(link)
            test.log("Wizard from Welcome Screen", "Accessed through hyper link")
        except:
            if not context:
                InputActions.activateMenuItem("File->New->System Project")
                test.log("Wizard from Main Menu", "Accessed through main menu")

        """ Select Available or Virtual System"""
        if availableSys != None:
            if not (object.exists(newSystemProjectShellObj.getAvailableSystem(availableSys))):
                InputActions.mouseClickOnItem(newSystemProjectShellObj.getAvailableSystemsListView())
                length = ReadActions.availableSystemsListLenghtInNewProjectShell()
                counter = 0
                while (not object.exists(newSystemProjectShellObj.getAvailableSystem(availableSys))):
                    nativeType("<Down>")
                    snooze(0.3)
                    counter += 1
                    if counter == length:
                        test.log("System " + availableSys + " could not be found in the list")
                        break
            else:
                InputActions.mouseClickOnItem(newSystemProjectShellObj.getAvailableSystem(availableSys))
        elif virtualSys != None:
            if not (object.exists(newSystemProjectShellObj.getVirtualSystem(virtualSys))):
                InputActions.mouseClickOnItem(newSystemProjectShellObj.getVirtualSystemsListView())
                length = ReadActions.checkLengthOfDevicesInNewProjectShell()
                counter = 0
                while (not object.exists(newSystemProjectShellObj.getVirtualSystem(virtualSys))):
                    nativeType("<Down>")
                    snooze(0.3)
                    counter += 1
                    if counter == length:
                        test.log("System " + virtualSys + " could not be found in the list")
                        break
            else:
                InputActions.mouseClickOnItem(newSystemProjectShellObj.getVirtualSystem(virtualSys))
        else:
            test.fail("FAIL", "You need to select available or virtual system")
            return False

        """ Go to Next Screen"""
        InputActions.mouseClickOnButton(newSystemProjectShellObj.getButton("Next"))
        snooze(1)

        """ Enter project name in text box"""
        InputActions.mouseClickOnItem(newSystemProjectShellObj.getProjectNameTextBox())
        snooze(0.5)
        try:
            type(waitForObject(newSystemProjectShellObj.getProjectNameTextBox()), projectName)
        except LookupError as lue:
            test.fails("FAIL", str(lue))
        snooze(0.5)

        """ If device is defined select it"""
        if device != None:
            InputActions.mouseClickOnItem(newSystemProjectShellObj.getDevice(device))

        """ If location is defined, type it in"""
        if location != None:
            InputActions.mouseClickOnItem(newSystemProjectShellObj.getProjectLocationTextBox())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            try:
                type(waitForObject(newSystemProjectShellObj.getProjectLocationTextBox()), location)
            except LookupError as lue:
                test.fails("FAIL", str(lue))

        """" Finish """
        InputActions.mouseClickOnButton(NewSystemProjectShell().getButton("Done"))
        test.log("New System Panel Project is created", projectName + " Successfully created")
        snooze(3)
        return True

    @classmethod
    def newLibraryProject(cls, projectName, location=None, existingName=None, specificName=None):
        """
        This method creates the Library Project.
        @param projectName [string] name of the project
        @param location [string] path where to save the project
        @param existingName [boolean] check if warning pops up for projects with the same name
        @param specificName [boolean] check if warning pops up for projects with specific characters

        Usage example:
        path = "C:\libProjects"
        NewProjects.newLibraryProject("Library_project")
        NewProjects.newLibraryProject("Library_project", path)
        NewProjects.newLibraryProject("Library_project", path, True)
        NewProjects.newLibraryProject("Library project,/", path, None, True)

        NOTE:
        Parameter "existingName" is used only for testing the warning that project already exists with the same name.
        Parameter "specificName" is used only for testing the warning that project contains specific characters.
        If parameters, mentioned above, are not used for testing warnings, test will fail if project with the same name exists or if
        contains specific characters.
        """
        if not object.exists(NewLibraryProjectShell().getMainShell()):
            InputActions().activateMenuItem("File->New->Library Project")

        snooze(0.5)
        InputActions.mouseClickOnItem(NewLibraryProjectShell().getProjectNameTextPane())
        snooze(0.5)
        if "Windows" in SuiteGlobals.testMachine:
            nativeType("<Ctrl+a>")
        elif "Linux" in SuiteGlobals.testMachine:
            sys.exit("Linux")
        elif "Darwin" in SuiteGlobals.testMachine:
            nativeType("<Command+a>")
        else:
            sys.exit("OS not found")
        snooze(0.5)
        nativeType(projectName)
        snooze(0.5)

        if location == None:
            InputActions.mouseClickOnItem(NewLibraryProjectShell().getDirectoryTextPane())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType(SuiteGlobals.getSCSLibraryProjectPath())
            snooze(0.5)
        else:
            InputActions.mouseClickOnItem(NewLibraryProjectShell().getDirectoryTextPane())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType(location)
            snooze(1)

        # check if the warning is displayed properly for projects with the same name
        if existingName:
            if waitForObject(NewLibraryProjectShell().getWarningLabel()).text == 'Error: Project with entered name already exists.':
                test.passes("PASS", "Warning for project with the existing name (" + projectName + ") is displayed.")
            else:
                test.fail("FAIL", "Warning for project with the name '" + projectName + "' is not displayed.")

        # check if the warning is displayed properly for the projects with the specific characters
        if specificName:
            if waitForObject(NewLibraryProjectShell().getWarningLabel()).text == 'Error: Special characters are not allowed.':
                test.passes("PASS", "Warning for project with the name with special characters (" + projectName + ") is displayed.")
            else:
                test.fail("FAIL", "Warning for project with the name with special characters (" + projectName + ") is not displayed.")

        # check if the 'Done' button is disabled
        if findObject(NewLibraryProjectShell().getButton("Done")).disabled:
            if existingName or specificName:
                re = InputActions.mouseClickOnItem(NewLibraryProjectShell().getCloseShell())
                test.log("Library project '" + projectName + "' is not created.")

            if (existingName == None) and (specificName == None):
                if waitForObject(NewLibraryProjectShell().getWarningLabel()).text == 'Error: Project with entered name already exists.':
                    test.fail("FAIL", "Project with the name '" + projectName + "' already exist.")
                    test.log("Library project '" + projectName + "' is not created.")
                    snooze(2)
                    return False
                if waitForObject(NewLibraryProjectShell().getWarningLabel()).text == 'Error: Special characters are not allowed.':
                    test.fail("FAIL", "Project with the name '" + projectName + "' contains specific characters.")
                    test.log("Library project '" + projectName + "' is not created.")
                    snooze(2)
                    return False

        else:
            re = InputActions.mouseClickOnItem(waitForObject(NewLibraryProjectShell().getButton("Done")))
            snooze(2)
            return re

    @classmethod
    def newPluginPanelProject(cls, projectName, pluginLvl, version=None, location=None, supportedSys=None, supportedDev=None, context=False):
        """
        This method creates the Plugin Project.
        @param projectName [string] name of the project
        @param version [string] version of project
        @param location [string] path where to save the project
        @param pluginLvl [string] Choose between system, device and agnostic
        @param supportedSys [string] Choose system
        @param supportedDev [string] Choose device

        Usage example:
        path = "C:\libProjects"
        NewProjects.newPluginPanelProject(projectName1, "System", "1.1", None, ["cdb42L42"])
        NewProjects.newPluginPanelProject(projectName1, "Device", "1.1", None, ["cdb42L42"], ["CS42L42"])
        NewProjects.newPluginPanelProject(projectName1, "Device", "1.1", None, ["cdb42L42", "cdb42L71"], ["CS42L42", "CS42L71"])
        """
        link = Welcome().getPluginProjectHyperlinkLink()
        try:
            (findObject(link)) != -1
            InputActions().mouseClickOnLink(link)
            test.log("Wizard from Welcome Screen", "Accessed through hyper link")
        except:
            if not context:
                InputActions().activateMenuItem("File->New->Plugin Project")
                test.log("Wizard from Main Menu", "Accessed through main menu")

        snooze(0.5)
        mouseClick(waitForObject(NewPluginProjectShell().getProjectNameTextBox(), 5000), 3, 3, 0, Button.Button1)
        snooze(0.5)
        if "Windows" in SuiteGlobals.testMachine:
            nativeType("<Ctrl+a>")
        elif "Linux" in SuiteGlobals.testMachine:
            sys.exit("Linux")
        elif "Darwin" in SuiteGlobals.testMachine:
            nativeType("<Command+a>")
        else:
            sys.exit("OS not found")
        snooze(0.5)
        type(waitForObject(NewPluginProjectShell().getProjectNameTextBox()), projectName)
        snooze(0.5)

        if version == None:
            pass
        else:
            InputActions.mouseClickOnItem(NewPluginProjectShell().getProjectVersionBox())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            type(waitForObject(NewPluginProjectShell().getProjectVersionBox()), version)
            snooze(1)

        if location == None:
            pass
        else:
            InputActions.mouseClickOnItem(NewPluginProjectShell().getProjectDirectoryBox())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            type(waitForObject(NewPluginProjectShell().getProjectDirectoryBox()), location)
            snooze(1)

        if pluginLvl == "System":
            InputActions.mouseClickOnItem(NewPluginProjectShell().getProjectPluginLvl(pluginLvl))
            for i in range(len(supportedSys)):
                InputActions.mouseClickOnItem(NewPluginProjectShell().getSupportedSys(supportedSys[i]))

        if pluginLvl == "Device":
            InputActions.mouseClickOnItem(NewPluginProjectShell().getProjectPluginLvl(pluginLvl))
            for i in range(len(supportedSys)):
                InputActions.mouseClickOnItem(NewPluginProjectShell().getSupportedSys(supportedSys[i]))
                InputActions.mouseClickOnItem(NewPluginProjectShell().getSupportedDev(supportedDev[i]))

        if pluginLvl == "Agnostic":
            InputActions.mouseClickOnItem(NewPluginProjectShell().getProjectPluginLvl(pluginLvl))

        """" Finish """
        InputActions().mouseClickOnButton(NewPluginProjectShell().getButton("Done"))
        test.log("New Device Panel Project is created", projectName + " Successfully created")
        snooze(3)

    @classmethod
    def openAnotherProject(cls, projectName, availableSys=None, virtualSys=None, device=None, location=None):
        """
        This method is used to create new System Panel Project from welcome screen by clicking on OpenAnotherProject button
        It has 6 parameters and you need to:

         1. add projectName
         2. define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
         3. set value for template you will use
         4. set value for device that will be used
         5. choose the location where to save the project

        @param projectName [string] name of project
        @param availableSys [string] default None(click on virtual system)
                                                 (click on available system)
        @param virtualSys [string] default None(click on available system)
                                               (click on virtual system)
        @param device [string] default None(device will be default from scs)
                                           (value for device that will be used)
        @param location [string] default None(location will be default from scs)
                                             (location where to save the project)
        @return [bool] False if can not click on device, template, system that mouse try to click

        Usage:
        NewProjects.openAnotherProject("testing", None, "cdb42L42", "Three Columns Template", "cs42l42")
        NewProjects.openAnotherProject("project", None, "cdb42L42")
        NewProjects.openAnotherProject(project1, None, "cdb42L42")
        """

        try:
            mouseClick(waitForObject(Welcome().getButtonFromWelcomeScrean("OPEN ANOTHER PROJECT")), 5, 5, 0, Button.Button1)
        except LookupError:
            test.fail("FAIL", "Couldn't find 'Open Another Project' button")

        """ Select Available or Virtual System"""
        if availableSys != None:
            try:
                mouseClick(waitForObject(NewSystemProjectShell().getAvailableSystem(availableSys), 5000), 12, 10, 0, Button.Button1)
                test.log("Available system selected", availableSys)
            except LookupError:
                test.fail("FAIL", "Unable to click on Available System '" + availableSys + "'")
                return False
        elif virtualSys != None:
            if not (object.exists(NewSystemProjectShell().getVirtualSystem(virtualSys))):
                mouseClick(waitForObject(NewSystemProjectShell().getVirtualSystemsListView(), 5000), 10, 10, 0, Button.Button1)
                length = ReadActions.checkLengthOfDevicesInNewProjectShell()
                counter = 0
                while (not object.exists(NewSystemProjectShell().getVirtualSystem(virtualSys))):
                    nativeType("<Down>")
                    snooze(0.3)
                    counter += 1
                    if counter == length:
                        test.log("System " + virtualSys + " could not be found in the list")
                        break
            else:
                try:
                    mouseClick(waitForObject(NewSystemProjectShell().getVirtualSystem(virtualSys), 5000), 1, 1, 0, Button.Button1)
                    test.log("Virtual system selected", virtualSys)
                except LookupError:
                    test.fail("FAIL", "Unable to click on Virtual System '" + virtualSys + "'")
                    return False
        else:
            test.fail("FAIL", "You need to select available or virtual system")
            return False

        """ Go to Next Screen"""
        InputActions().mouseClickOnButton(NewSystemProjectShell().getButton("Next"))
        snooze(1)

        """ If device is defined select it"""
        if device != None:
            try:
                mouseClick(waitForObject(NewSystemProjectShell().getDevice(device), 5000), 12, 10, 0, Button.Button1)
                test.log("device selected", device)
            except LookupError:
                test.fail("FAIL", "Unable to click on Device '" + device + "'")
                return False

        """ Enter project name in text box"""
        mouseClick(waitForObject(NewSystemProjectShell().getProjectNameTextBox(), 5000), 3, 3, 0, Button.Button1)
        type(waitForObject(NewSystemProjectShell().getProjectNameTextBox()), projectName)

        """ If location is defined, type it in"""
        if location != None:
            mouseClick(waitForObject(NewSystemProjectShell().getProjectLocationTextBox(), 5000), 3, 3, 0, Button.Button1)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            type(waitForObject(NewSystemProjectShell().getProjectLocationTextBox()), location)

        """" Finish """
        InputActions().mouseClickOnButton(NewSystemProjectShell().getButton("Done"))
        test.log("New System Panel Project is created", projectName + " Successfully created")
        snooze(3)


class ProjectOperation:

    @classmethod
    def deleteProject(cls, name, check=True):
        """
        This method is for deleting existing project

        @param name [string] name of project we want to delete
        @param check [bool] default True(delete project content will be checked)
                                    False(delete project content will not be checked)
        @return status [bool] if project is deleted status will be True

        Usage:
        ProjectOperation.deleteProject("Template_project")
        """
        status = False
        temp = "{caption='" + name + "' container=" + Directory().systemDirectoryTree + " styletype='text' visible='true'}"
        if not ReadActions.checkWindow("Navigator"):
            InputActions.activateMenuItem("Window->Show View->Navigator")

        if not object.exists(Directory().getMyProjectsCell()):
            test.log("There are no created projects.")
            return status

        try:
            projectList = waitForObject(Directory().getMyProjectsCell())
        except LookupError:
            test.fail("FAIL", "Couldn't find 'My Projects' cell.")
        if name not in str(projectList.item.resource.projects):
            test.log("Project '" + name + "' is not created.", projectList.item.resource.projects)
            return status

        if not ReadActions.checkDirectoryTree(name):
            ProjectOperation.expandDirectoryTree("My Projects")

        try:
            mouseClick(waitForObject(temp, 5000), 3, 3, 0, Button.Button1)
            InputActions().activateMenuItem("Edit->Delete")
            if check == True:
                mouseClick(waitForObject(ConfirmationShell().getCheckbox(), 5000), 3, 3, 0, Button.Button1)
            mouseClick(waitForObject(ConfirmationShell().getButton("YES"), 5000), 3, 3, 0, Button.Button1)
            status = True
        except LookupError:
            test.fail("FAIL", "Couldn't find project '" + name + "'.")
            return status

        if status:
            test.passes("PASS", "Project '" + name + "' is successfully deleted.")
            return status

    @classmethod
    def expandDirectoryTree(cls, location):
        """
        This method expand the Directory Tree to desired location. If the final location is
        given (such as files, panels or register maps) it will be opened in new window.

        @param location [strong] location of desired content(conteins ->)
        @return no return

        Usage:
        ProjectOperation.expandDirectoryTree("My Projects->project1")
        ProjectOperation.expandDirectoryTree("My Projects->project1->Blank.panel") --> will opend Blank.panel in new window
        """
        temp = location.split("->")
        for item in temp:
            try:
                snooze(0.5)
                doubleClick(waitForObject(Directory().getProjectName(item)), 5, 5, 0, Button.Button1)
            except LookupError:
                test.fail("FAIL", "Couldn't click on " + item)
        snooze(0.5)

    @classmethod
    def contextMenuSystemDirectory(cls, item, option, *params):
        """
        This method uses context menu options in System Directory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.) name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param *params [pointer to first element on list]: takes the elements from tuple in order to call appropriate method from context menu
        @return [bool]: True if test pass, False otherwise

        Usage:
        Usage of every method for context menu is shown inside the specific method from the list.
        """

        """ Check for item coordinates """
        try:
            mouseClick(waitForObject(item), 5, 5, 0, Button.Button3)
        except LookupError:
            test.fail("FAIL", "Couldn't click on '" + item + "' to open context menu.")

        func, args = {
          'Add New->Panel': (ProjectOperation.addNewPanel, (option, params)),
          'Add New->Referenced library panel': (ProjectOperation.addNewReferencedPanel, (option, params)),
          'Add New->Python script': (ProjectOperation.addNewPythonScript, (option, params)),
          'Add New->Folder': (ProjectOperation.addNewFolder, (option, params)),
          'Add Existing->File': (ProjectOperation.addExistingFile, (option, params)),
          'Add Existing->Folder': (ProjectOperation.addExistingFolder, (option, params)),
          'Rename': (ProjectOperation.renameDirectoryContent, (option, params)),
          'Save registers state': (ProjectOperation.saveRegistersState, (option, params)),
          'Restore registers state': (ProjectOperation.restoreRegistersState, (option, params)),
          'Save control state': (ProjectOperation.saveControlState, (item, option, params)),
          'Load control state': (ProjectOperation.loadControlState, (item, option, params)),
          'Open in same tab': (ProjectOperation.openRuntimeInSameTab, (item, option)),
          'Open in new tab': (ProjectOperation.openRuntimeInNewTab, (item, option)),
          'Paste': (ProjectOperation.pasteFileFolder, (item, option, params)),
          'Add Virtual System': (ProjectOperation.addVirtualSystem, (option, params)),
          'Build': (ProjectOperation.contextMenuBuildProject, (item, option, params)),
          'Export->To Library Project': (ProjectOperation.exportToLibraryProject, (option, params)),
          'Change address': (ProjectOperation.changeAddress, (option, params)),
        }.get(option, (ProjectOperation.chooseContextMenuItem, (item, option, params)))
        result = func(*args)

        if result:
            test.passes("PASS", "'" + option + "' is successfully executed.")
            snooze(1)
            return True
        else:
            test.fail("FAIL", "'" + option + "' is not executed.")
            snooze(1)
            return False

    @classmethod
    def addNewPanel(cls, option, param):
        """
        This method add new panel. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] = name [string]: name of new panel
        @param param[1] = template [string]: name of template, if omitted will be Blank template
        @return [bool]: True if panel is added, or False if it is not

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Panel", "device_panel", "Blank")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Panel", "device_panel")

        NOTE:
        param[1] (template) is an optional parameter and if omitted value will be "Blank".
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
            mouseClick(waitForObject(AddPanelShell().getTestFieldName(), 5000), 5, 5, 0, Button.Button1)
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            type(waitForObject(AddPanelShell().getTestFieldName(), 5000), param[0])
            if len(param) == 2:
                rn = "{caption?='" + "*" + param[1] + "*" + "' styletype='text' visible='true'}"
                Common().selectFromComboBoxList(AddPanelShell().getcomboBoxTemp(), rn)
            mouseClick(waitForObject(AddPanelShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
            return True
        except LookupError:
            test.fail("FAIL", "Unable to add new panel.")

    @classmethod
    def addNewReferencedPanel(cls, option, param):
        """
        This method imports the referenced panel inside the project. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param[0] = libName [string]: name of library from which panel is taken as reference
        @param[1] = panelName [string]: name of panel which is used as reference
        @param[2] = refName [string]: name of panel which will be imported inside the project
        @param[3] = sameNamePanel [bool]: if True expected warning for the panel with the same name, False otherwise
        @return [bool]: True if panel is imported, or False if it is not

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        libraryProject = "library_project"
        libraryPanel = "library_panel"
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Referenced library panel", libraryProject, libraryPanel, "referenced_panel")
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
            mouseClick(waitForObject(AddReferencedPanelShell().getLibraryComboBox()), 157, 10, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObjectItem(AddReferencedPanelShell().getLibraryFromComboBox(), param[0]), 65, 12, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObject(AddReferencedPanelShell().getLibraryPanel(param[1] + ".panel")), 49, 5, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObject(AddReferencedPanelShell().getTextField()), 54, 7, 0, Button.Button1)
            snooze(0.3)
            type(waitForObject(AddReferencedPanelShell().getTextField()), param[2])

            if len(param) == 4:
                if ((param[3] == True) and
                    object.exists(AddReferencedPanelShell().getSameNameWarning()) and
                    findObject(AddReferencedPanelShell().getButton("Import")).disabled):
                    test.passes("PASS", "Warning for the panel with the same name is displayed and Import button is disabled.")
                    InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
                    return True
                elif ((param[3] == True) and
                      not object.exists(AddReferencedPanelShell().getSameNameWarning()) and
                      not findObject(AddReferencedPanelShell().getButton("Import")).disabled):
                    test.fail("FAIL", "Warning for the panel with the same name is not displayed and Import button is not disabled.")
                    InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
                    return True
                elif ((param[3] == True) and
                      not object.exists(AddReferencedPanelShell().getSameNameWarning()) and
                      findObject(AddReferencedPanelShell().getButton("Import")).disabled):
                    test.fail("FAIL", "Warning for the panel with the same name is not displayed and Import button is disabled.")
                    InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
                    return True
                elif ((param[3] == True) and
                      object.exists(AddReferencedPanelShell().getSameNameWarning()) and
                      not findObject(AddReferencedPanelShell().getButton("Import")).disabled):
                    test.fail("FAIL", "Warning for the panel with the same name is displayed and Import button is not disabled.")
                    InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
                    return True

            snooze(0.3)
            mouseClick(waitForObject(AddReferencedPanelShell().getButton("Import")), 40, 18, 0, Button.Button1)
            return True
        except:
            test.fail("FAIL", "Unable to add referenced panel.")
            return False

    @classmethod
    def exportToLibraryProject(cls, option, param):
        """
        This method imports the referenced panel inside the project. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] = libName [string]: name of library to export panel to
        @param param[1] = locationName [string]: name of location of panel in library (may be inside folder ,...)
        @param param[2] = refName [string]: name of panel which will be exported to library
        @param param[3] = sameNamePanel [bool]: if True expected warning for the panel with the same name, False otherwise
        @return [bool]: True if panel is imported, or False if it is not

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        libraryProject = "library_project"
        locationName = "Folder1"
        ProjectOperation.contextMenuSystemDirectory(realNamePanel, "Export->To Library Project", libraryProject, locationName, "exported_panel")
        """
        temp = re.split("->", option)
        try:

            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
            mouseClick(waitForObject(ExportPanelToLibraryProjectShell().getLibraryComboBox()), 157, 10, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObjectItem(ExportPanelToLibraryProjectShell().getLibraryFromComboBox(), param[0]), 65, 12, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObject(ExportPanelToLibraryProjectShell().getTreeVievelEment(param[1])), 49, 5, 0, Button.Button1)
            snooze(0.3)
            mouseClick(waitForObject(ExportPanelToLibraryProjectShell().getTextField()), 54, 7, 0, Button.Button1)
            snooze(0.3)
            type(waitForObject(ExportPanelToLibraryProjectShell().getTextField()), param[2])
            snooze(0.3)

            if len(param) == 4:
                if ((param[3] == True) and
                    object.exists(ExportPanelToLibraryProjectShell().getSameNameWarning()) and
                    findObject(ExportPanelToLibraryProjectShell().getButton("Export")).disabled):
                    test.passes("PASS", "Panel already exist message is shown")
                    InputActions.mouseClickOnItem(ExportPanelToLibraryProjectShell().getCloseDialog())
                    return True

            mouseClick(waitForObject(ExportPanelToLibraryProjectShell().getButton("Export")), 40, 18, 0, Button.Button1)
            return True
        except:
            test.fail("FAIL", "Unable to export to Library Project")
            return False

    @classmethod
    def checkLibraryExists(cls, devProject, libProject):
        """
        checkLibraryExists checks if Library can be found in Add New -> Referenced library panel dialog

        @param devProject Device project name
        @param libProject Library project name

        Usage:
        ProjectOperation.checkLibraryPanelExists("DevProject", "LibProject")
        """
        retVal = False
        realNameDeviceProject = Directory().getProjectName(devProject)
        # Right click on DeviceProject in Navigation part
        # Choose Add New -> Referenced library panel
        test.log("Right click on device project - new - referenced library panel")
        try:
            mouseClick(waitForObject(realNameDeviceProject), 5, 5, 0, Button.Button3)
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't click on " + devProject + " to open context menu.")
            return False
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), "Add New"))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu("Add New"), "Referenced library panel"))
            snooze(0.5)
            mouseClick(waitForObject(AddReferencedPanelShell().getLibraryComboBox()), 157, 10, 0, Button.Button1)
            snooze(0.3)
        except:
            test.fail("FAIL", "Unable to add referenced panel.")
            return False
        snooze(1)

        # Verify that LibraryProject is not shown in combo box
        test.log("Check if " + libProject + " is available in combo box")
        try:
            waitForObjectItem(AddReferencedPanelShell().getLibraryFromComboBox(), libProject, 1)
            test.log("Found " + libProject + "  in library list")
            retVal = True
        except LookupError:
            retVal = False
            test.log("Not found " + libProject + " in library list")

        test.log("Close New referenced library panel dialog")
        InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
        return retVal

    @classmethod
    def checkLibraryPanelExists(cls, devProject, libProject, libPanelDict):
        """
        checkLibraryPanelExists checks if Panel in Library can be found in Add New -> Referenced library panel dialog

        @param devProject Device project name
        @param libProject Library project name
        @return libPanelDict Dictionary containing Panel name and Panel existence in Library

        Usage:
        ProjectOperation.checkLibraryPanelExists("DevProject", "LibProject", {'Panel1': True})
        ProjectOperation.checkLibraryPanelExists("DevProject", "LibProject", {'Panel1': True, 'Panle2': False})
        """
        retVal = True
        realNameDeviceProject = Directory().getProjectName(devProject)
        # Right click on DeviceProject in Navigation part
        # Choose Add New -> Referenced library panel
        test.log("Right click on device project - new - referenced library panel")
        try:
            mouseClick(waitForObject(realNameDeviceProject), 5, 5, 0, Button.Button3)
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't click on " + devProject + " to open context menu.")
            return False
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), "Add New"))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu("Add New"), "Referenced library panel"))
            snooze(0.5)
            mouseClick(waitForObject(AddReferencedPanelShell().getLibraryComboBox()), 157, 10, 0, Button.Button1)
            snooze(0.3)
        except:
            test.fail("FAIL", "Unable to add referenced panel.")
            return False
        snooze(1)

        # From combo box select FirstLibraryProject
        test.log("From combo box select " + libProject)
        try:
            mouseClick(waitForObjectItem(AddReferencedPanelShell().getLibraryFromComboBox(), libProject))
            snooze(0.3)
        except:
            test.fail("FAIL", "Unable to select" + libProject)

        # Verify that LibraryPanel(s) is(are) shown in list view or not but according with libPanelDict
        for keyvalue in list(libPanelDict.items()):
            libPanel, panelShouldExists = keyvalue[0], keyvalue[1]
            test.log("Verify that " + libPanel + " is shown in list view or not")
            panelFound = False
            try:
                if object.exists(AddReferencedPanelShell().getLibraryPanel(libPanel + ".panel")):
                    panelFound = True
                    test.log("Found " + libPanel + " in library panel list")
                else:
                    test.log("Not Found " + libPanel + " in library panel list")
                if (panelFound != panelShouldExists):
                    retVal = False
            except LookupError:
                test.fail("FAIL", "Couldn't find " + libPanel + "  in library panel list")
                return False

        test.log("Close New referenced library panel dialog")
        InputActions.mouseClickOnItem(AddReferencedPanelShell().getCloseDialog())
        return retVal

    @classmethod
    def addNewPythonScript(cls, option, param):
        """
        This method is for adding new python script. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] = name [string]: name of python script
        @return [bool]: True if panel is added, or False if it is not

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Python script", "py_script")

        NOTE:
        This method has no optional parameters.
        """
        temp = re.split("->", option)
        if param[0] != None:
            try:
                activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
                snooze(0.5)
                activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
                snooze(0.5)
                mouseClick(waitForObject(AddFileShell().getTextField(), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
                if "Windows" in SuiteGlobals.testMachine:
                    nativeType("<Ctrl+a>")
                elif "Linux" in SuiteGlobals.testMachine:
                    sys.exit("Linux")
                elif "Darwin" in SuiteGlobals.testMachine:
                    nativeType("<Command+a>")
                else:
                    sys.exit("OS not found")
                snooze(0.5)
                nativeType("<Delete>")
                snooze(0.5)
                type(waitForObject(AddFileShell().getTextField(), 5000), param[0])
                snooze(0.5)
                mouseClick(waitForObject(AddFileShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
                return True
            except LookupError:
                test.fail("FAIL", "Unable to add new file.")
        else:
            test.fail("FAIL", "You have to type in desirable name of the python script file.")
            return False

    @classmethod
    def addNewFolder(cls, option, param):
        """
        This method is for creating new folder. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name of new folder
        @param param[1] addAndClose [bool]: True to add new folder, False just to open Add Folder dialog
        @return [bool]: True if folder is added, or False if it is not

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Folder", "folder_1")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add New->Folder", "folder_1", True)

        NOTE:
        param[1] (addAndClose) is an optional parameter and if omitted value will be True.
        """
        temp = re.split("->", option)
        activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
        snooze(0.5)
        activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
        if len(param) == 2:
            if param[1] == False:
                test.log("Opening Add Folder dialog without adding a new folder...")
                return True

        if param[0] != None:
            try:
                snooze(0.5)
                mouseClick(waitForObject(AddFolderShell().getTextField(), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
                if "Windows" in SuiteGlobals.testMachine:
                    nativeType("<Ctrl+a>")
                elif "Linux" in SuiteGlobals.testMachine:
                    sys.exit("Linux")
                elif "Darwin" in SuiteGlobals.testMachine:
                    nativeType("<Command+a>")
                else:
                    sys.exit("OS not found")
                snooze(0.5)
                nativeType("<Delete>")
                snooze(0.5)
                type(waitForObject(AddFolderShell().getTextField(), 5000), param[0])
                snooze(0.5)
                mouseClick(waitForObject(AddFolderShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
                if object.exists(AddFolderShell().getRealNameOfErrorMesage()):
                    test.log("Unable to add new folder, because folder with name '" + param[0] + "' already exists")
                    nativeType("<Escape>")

                return True
            except LookupError:
                test.fail("FAIL", "Unable to add new folder.")
        else:
            test.fail("FAIL", "You have to type in desirable name of folder.")
            return False

    @classmethod
    def addExistingFile(cls, option, param):
        """
        This method is for adding existing file. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] (path) [string]: path to the file location
        @param param[0] (dot) [string]: name of radio button ("Copy into the project" or "Link to existing")
        @return [bool]: True if file is added, False otherwise

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        filePath = "C:\files"
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add Existing->File", "folder_1", filePath, "Copy into the project")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add Existing->File", "folder_1", filePath)

        NOTE:
        param[1] (dot) is an optional parameter and if omitted value will be "Link to existing".
        """
        temp = re.split("->", option)
        activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
        snooze(0.5)
        activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
        snooze(0.5)
        if param[0] != None:
            try:
                mouseClick(waitForObject(AddExistingFileShell().getTextField(), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
                if "Windows" in SuiteGlobals.testMachine:
                    nativeType("<Ctrl+a>")
                elif "Linux" in SuiteGlobals.testMachine:
                    sys.exit("Linux")
                elif "Darwin" in SuiteGlobals.testMachine:
                    nativeType("<Command+a>")
                else:
                    sys.exit("OS not found")
                snooze(0.5)
                nativeType("<Delete>")
                snooze(0.5)
                type(waitForObject(AddExistingFileShell().getTextField(), 5000), param[0])
                snooze(0.5)
            except LookupError:
                test.fail("FAIL", "Unable to add new file.")

            if len(param) == 2:
                mouseClick(waitForObject(AddExistingFileShell().getRadioButton(param[1]), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
            try:
                mouseClick(waitForObject(AddExistingFileShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
                return True
            except LookupError:
                test.fail("FAIL", "Unable to click on 'OK' button.")
        else:
            test.fail("FAIL", "You have to type in desirable path of file.")
            return False

    @classmethod
    def addExistingFolder(cls, option, param):
        """
        This method add existing folder. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] path [string]: path to the folder location
        @param param[1] dot [string]: name of radio button ("Copy into the project" or "Link to existing")
        @return [bool]: True if folder is added, False otherwise

        Usage:
        realNameProject = Directory().getProjectName("device_project")
        folderPath = "C:\files"
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add Existing->Folder", "folder_1", folderPath, "Copy into the project")
        ProjectOperation.contextMenuSystemDirectory(realNameProject, "Add Existing->Folder", "folder_1", folderPath)

        NOTE:
        param[1] (dot) is an optional parameter and if omitted value will be "Link to existing".
        """
        temp = re.split("->", option)
        activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
        snooze(0.5)
        activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
        snooze(0.5)
        if param[0] != None:
            try:
                mouseClick(waitForObject(AddExistingFolderShell().getTextField(), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
                if "Windows" in SuiteGlobals.testMachine:
                    nativeType("<Ctrl+a>")
                elif "Linux" in SuiteGlobals.testMachine:
                    sys.exit("Linux")
                elif "Darwin" in SuiteGlobals.testMachine:
                    nativeType("<Command+a>")
                else:
                    sys.exit("OS not found")
                snooze(0.5)
                nativeType("<Delete>")
                snooze(0.5)
                type(waitForObject(AddExistingFolderShell().getTextField(), 5000), param[0])
                snooze(0.5)
            except LookupError:
                test.fail("FAIL", "Unable to add new folder.")

            if len(param) == 2:
                mouseClick(waitForObject(AddExistingFolderShell().getRadioButton(param[1]), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
            try:
                mouseClick(waitForObject(AddExistingFolderShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
                return True
            except LookupError:
                test.fail("FAIL", "Unable to click on 'OK' button.")
        else:
            test.fail("FAIL", "You have to type in desirable path of folder.")
            return False

    @classmethod
    def renameDirectoryContent(cls, option, param):
        """
        This method is for renaming directory content. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] (name) [string]: new name of directory content
        @param param[1] (renameAndClose) [bool]: True to rename , False just to open Rename dialog
        @return [bool]: True if directory is renamed, False otherwise

        Usage:
        fileRealName = Directory().getProjectName("file_1")
        ProjectOperation.contextMenuSystemDirectory(fileRealName, "Rename", "file_2")
        ProjectOperation.contextMenuSystemDirectory(fileRealName, "Rename", "file_2", False)

        NOTE:
        param[1] (renameAndClose) is an optional parameter and if omitted value will be True.
        """
        if param[0] != None:
            try:
                activateItem(waitForObjectItem(Directory().getContextMenu(), option))
                snooze(0.5)
                mouseClick(waitForObject(RenameShell().getTextField(), 5000), 5, 5, 0, Button.Button1)
                snooze(0.5)
                if "Windows" in SuiteGlobals.testMachine:
                    nativeType("<Ctrl+a>")
                elif "Linux" in SuiteGlobals.testMachine:
                    sys.exit("Linux")
                elif "Darwin" in SuiteGlobals.testMachine:
                    nativeType("<Command+a>")
                else:
                    sys.exit("OS not found")
                snooze(0.5)
                nativeType("<Delete>")
                snooze(0.5)
                type(waitForObject(RenameShell().getTextField(), 5000), param[0])
                snooze(0.5)
                if len(param) == 2:
                    if param[1] == False:
                        test.log("Opening Rename dialog without renaming a directory content...")
                        return True

                mouseClick(waitForObject(RenameShell().getOkButton("OK"), 5000), 5, 5, 0, Button.Button1)
                if object.exists(RenameShell().getRealNameOfErrorMesage()):
                    test.log("Unable to change name of file, because file with name '" + param[0] + "' already exists")
                    nativeType("<Escape>")
                return True
            except LookupError:
                test.fail("FAIL", "Unable to rename file.")
        else:
            test.fail("FAIL", "You have to type in desirable name of file.")
            return False

    @classmethod
    def changeAddress(cls, option, param):
        """
        This method is used for saving a state of registers. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name of file where registers state will be saved
        @return [bool]: True if register is saved

        Usage:
        deviceRealName = Directory().getProjectName("cs42l42")
        ProjectOperation.contextMenuSystemDirectory(device_real_name, "Change address")

        NOTE:
        This method has no optional parameters.
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't save registers state.")

    @classmethod
    def saveRegistersState(cls, option, param):
        """
        This method is used for saving a state of registers. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name of file where registers state will be saved
        @return [bool]: True if register is saved

        Usage:
        deviceRealName = Directory().getProjectName("cs42l42")
        ProjectOperation.contextMenuSystemDirectory(deviceRealName, "Save registers state", "cs42l42_state")

        NOTE:
        This method has no optional parameters.
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            InputActions.mouseClickOnButton(SaveRegisersStateShell().getSaveButton())
            filePath = os.getcwd()
            filePath = os.path.dirname(filePath) + os.sep + "shared" + os.sep + "testdata"
            snooze(0.5)
            chooseFile(waitForObject(":SWT"), filePath + os.sep + param[0] + "_registers.srs")
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't save registers state.")

    @classmethod
    def restoreRegistersState(cls, option, param):
        """
        This method is used for restoring a state of registers. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name of file where the registers state is saved
        @return [bool]: True if register is saved

        Usage:
        deviceRealName = Directory().getProjectName("cs42l42")
        ProjectOperation.contextMenuSystemDirectory(deviceRealName, "Restore registers state", "cs42l42_state")

        NOTE:
        This method has no optional parameters.
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            filePath = os.getcwd()
            filePath = os.path.dirname(filePath) + os.sep + "shared" + os.sep + "testdata"
            snooze(0.5)
            chooseFile(waitForObject(":SWT"), filePath + os.sep + param[0] + "_registers.srs")
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't restore registers state.")

    @classmethod
    def saveControlState(cls, item, option, fileName=None):
        """
        This method is for saving control state. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.) real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @return [bool]: True if control state is saved

        Usage:
        deviceRealName = Directory().getProjectName("cs42l42")
        ProjectOperation.contextMenuSystemDirectory(deviceRealName, "Save control state")

        NOTE:
        This method has no optional parameters.
        """
        try:
            itemObj = waitForObject(item)
        except:
            test.fail("FAIL", "Couldn't find the object '" + item + "'.")
            return False

        if fileName == None:
            try:
                fileName = itemObj.text
            except:
                test.fail("FAIL", "Couldn't find the object property 'text'.")
                return False
        else:
            fileName = fileName[0]

        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            filePath = os.getcwd()
            filePath = os.path.dirname(filePath) + os.sep + "shared" + os.sep + "testdata"
            snooze(0.5)
            chooseFile(waitForObject(":SWT"), filePath + os.sep + fileName + ".zip")
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't save control state for '" + item + "'.")
            return False

    @classmethod
    def loadControlState(cls, item, option, params):
        """
        This method is for loading control state. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.) real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param params[0]: name of Saved control state without the extension
        @return [bool]: True if control state is loaded
        Usage:
        deviceRealName = Directory().getProjectName("cs42l42")
        ProjectOperation.contextMenuSystemDirectory(deviceRealName, "Load control state")

        NOTE:
        This method has no optional parameters.
        """
        try:
            itemObj = waitForObject(item)
        except:
            test.fail("FAIL", "Couldn't find the object '" + item + "'.")
            return False

        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            filePath = os.getcwd()
            filePath = os.path.dirname(filePath) + os.sep + "shared" + os.sep + "testdata"
            snooze(0.5)
            chooseFile(waitForObject(":SWT"), filePath + os.sep + params[0] + ".zip")
            snooze(1.5)
            if object.exists(ConfirmShell().getWarningMsg("Some panels/controls are not updated.")):
                InputActions.mouseClickOnItem(ConfirmShell().getConfirmShellButton("OK"))
            return True
        except Exception as err:
            test.fail("FAIL", "Error message: " + str(err))
            return False

    @classmethod
    def openRuntimeInSameTab(cls, item, option):
        """
        This method open runtime in same tab. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @return [bool]: True if test pass

        Usage:
        panelRealName = Directory().getProjectName("panel")
        ProjectOperation.contextMenuSystemDirectory(panelRealName, "Open in same tab")

        NOTE:
        This method has no optional parameters.
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't open panel runtime '" + item + "' in the same tab.")

    @classmethod
    def openRuntimeInNewTab(cls, item, option):
        """
        This method opens runtime in new tab. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @return [bool]: True if test pass

        Usage:
        panelRealName = Directory().getProjectName("panel")
        ProjectOperation.contextMenuSystemDirectory(panelRealName, "Open in new tab")

        NOTE:
        This method has no optional parameters.
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't open panel runtime '" + item + "' in the new tab.")

    @classmethod
    def pasteFileFolder(cls, item, option, param):
        """
        This method paste a content (file/folder) on specific location inside navigator. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name file/folder which needs to be pasted if name of file/folder must not be overwritten
        @param param[1] radioButton [string]: name of radio button ("Overwrite existing file" or "Rename copied file")
        @return [bool]: True if test pass

        Usage:
        panelRealName = Directory().getProjectName("panel.panel")
        ProjectOperation.contextMenuSystemDirectory(panelRealName, "Paste")
        ProjectOperation.contextMenuSystemDirectory(panelRealName, "Paste", None, "Overwrite existing file")
        ProjectOperation.contextMenuSystemDirectory(panelRealName, "Paste", "panel_copy", "Rename copied file")

        NOTE:
        This method has two optional parameters:
        param[0] name if omitted the file/folder will be copied or overwritten or will have default name (panel - Copy_1.panel)
        param[1] radioButton if omitted value will be "Overwrite existing file"
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            snooze(1)
        except LookupError:
            test.fail("FAIL", "Couldn't paste '" + item + "'.")

        if len(param) == 0:
            name = None
            radioButton = None

        if len(param) == 1:
            name = param[0]
            radioButton = None

        if len(param) == 2:
            name = param[0]
            radioButton = param[1]

        if object.exists(NameAlreadyExistShell("File name already exists").getMainShell()) and radioButton == "Rename copied file":
            InputActions.mouseClickOnItem(NameAlreadyExistShell("File name already exists").getRadioButton(radioButton))
            snooze(0.5)
            InputActions.mouseClickOnItem(NameAlreadyExistShell("File name already exists").getTextField())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            nativeType(name)
            snooze(0.5)
            InputActions.mouseClickOnItem(NameAlreadyExistShell("File name already exists").getButton("OK"))
            return True

        elif object.exists(NameAlreadyExistShell("File name already exists").getMainShell()):
            InputActions.mouseClickOnItem(NameAlreadyExistShell("File name already exists").getButton("OK"))
            return True

        elif object.exists(NameAlreadyExistShell("Folder name already exists").getMainShell()) and radioButton == "Rename copied folder":
            InputActions.mouseClickOnItem(NameAlreadyExistShell("Folder name already exists").getRadioButton(radioButton))
            snooze(0.5)
            InputActions.mouseClickOnItem(NameAlreadyExistShell("Folder name already exists").getTextField())
            snooze(0.5)
            if "Windows" in SuiteGlobals.testMachine:
                nativeType("<Ctrl+a>")
            elif "Linux" in SuiteGlobals.testMachine:
                sys.exit("Linux")
            elif "Darwin" in SuiteGlobals.testMachine:
                nativeType("<Command+a>")
            else:
                sys.exit("OS not found")
            snooze(0.5)
            nativeType("<Delete>")
            snooze(0.5)
            nativeType(name)
            snooze(0.5)
            InputActions.mouseClickOnItem(NameAlreadyExistShell("Folder name already exists").getButton("OK"))
            return True

        elif object.exists(NameAlreadyExistShell("Folder name already exists").getMainShell()):
            InputActions.mouseClickOnItem(NameAlreadyExistShell("Folder name already exists").getButton("OK"))
            return True

        else:
            return True

    @classmethod
    def addVirtualSystem(cls, option, param):
        """
        This method is for adding virtual system from context menu. This method is used from contextMenuSystemDirectory.

        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] name [string]: name of virtual system
        @param param[1] system [string]: system type (e.g. cs42l42)
        @return: [bool]: True if test pass

        Usage:
        systemRealName = Directory().getProjectName("Discovered systems")
        ProjectOperation.contextMenuSystemDirectory(systemRealName, "Add Virtual System", "system_1")
        ProjectOperation.contextMenuSystemDirectory(systemRealName, "Add Virtual System", "system_1", "CS42L42 Customer Demonstration Board")

        NOTE:
        param[1] system if omitted system type will be blank
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            snooze(1)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        if len(param) == 1:
            system = None

        Common.addSimulatedSystem(param[0], system, True)
        return True

    @classmethod
    def contextMenuBuildProject(cls, item, option, param):
        """
        This method is used for building the project from context menu. This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] close_dialog [boolean]: True to close warning shell, False to leave it opened
        @return: [bool]: True if test pass

        Usage:
        project = Directory().getProjectName("project1")
        ProjectOperation.contextMenuSystemDirectory(project, "Build")
        ProjectOperation.contextMenuSystemDirectory(project, "Build", True)
        ProjectOperation.contextMenuSystemDirectory(project, "Build", False)
        """
        if object.exists(Directory().getContextMenu()):
            pass
        else:
            try:
                mouseClick(waitForObject(item), 100, 5, 0, Button.Button3)
            except LookupError:
                test.fail("FAIL", "Couldn't open context menu!")

        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't " + option + " '" + item + "'.")

        if len(param) == 0:
            close_dialog = True
        else:
            close_dialog = param[0]

        if close_dialog:
            if object.exists(WarningShell().getButton("YES")):
                try:
                    mouseClick(waitForObject(WarningShell().getButton("YES"), 5000), 3, 3, 0, Button.Button1)
                    test.passes("PASS", "Project '" + item + "' is successfully built.")
                    return True
                except LookupError:
                    test.fail("FAIL", "Couldn't find project '" + item + "'.")
                    return False
            else:
                snooze(1)
                return True

    @classmethod
    def chooseContextMenuItem(cls, item, option, param):
        """
        This method is used for picking context manu item("Select All", "Delete", "Clean", "Open", "Close", "Cut", "Copy", "Disconnect", "Convert to Virtual").
        This method is used from contextMenuSystemDirectory.

        @param item [string]: real name of System Directory content (such as files, panels, folders, systems, etc.)
        @param option [string]: name of option from context menu (cut, copy, paste, Add Panel, Add Folder, etc.)
        @param param[0] CheckBox [bool]: if True will check the check-box
        @return [bool]: True if test pass

        Usage:
        project = Directory().getProjectName("project1")
        ProjectOperation.contextMenuSystemDirectory(project, "Delete")
        """
        contextMenuList = ["Select All", "Delete", "Clean", "Open", "Close", "Cut", "Copy", "Disconnect", "Convert to Virtual"]
        if option in contextMenuList:
            try:
                snooze(1)
                activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            except LookupError:
                test.fail("FAIL", "Couldn't " + option + " '" + item + "'.")

            if len(param) == 0:
                CheckBox = None
            else:
                CheckBox = param[0]

            snooze(0.5)
            if object.exists(ConfirmationShell().getMainShell()):
                try:
                    if CheckBox != None:
                        snooze(0.5)
                        mouseClick(waitForObject(ConfirmationShell().getCheckbox(), 5000), 3, 3, 0, Button.Button1)
                    snooze(0.5)
                    mouseClick(waitForObject(ConfirmationShell().getButton("YES"), 5000), 3, 3, 0, Button.Button1)
                    test.passes("PASS", "Project '" + item + "' is successfully deleted.")
                    snooze(1)
                    return True
                except LookupError:
                    test.fail("FAIL", "Couldn't find project '" + item + "'.")
            else:
                snooze(1)
                return True
        else:
            test.fail("FAIL", "There are no such option in context menu.")
            snooze(1)
            return False

    @classmethod
    def expandAndCollapseAll(cls, option):
        """
        This method is used for expanding and colapsing.

        @param option [string] decides if method expand or collapse all project tree (expand/collapse)
        @return no return

        Usage:
        ProjectOperation.expandAndCollapseAll("expand")
        ProjectOperation.expandAndCollapseAll("collapse")
        """
        if option == "expand":
            try:
                snooze(0.5)
                mouseClick(waitForObject(Directory().getExpandAllButton(), 5000), 5, 5, 0, Button.Button1)
            except LookupError:
                test.fail("FAIL", "Unable to click on 'ExpandAll' button.")
        elif option == "collapse":
            try:
                snooze(0.5)
                mouseClick(waitForObject(Directory().getCollapseAllButton(), 5000), 5, 5, 0, Button.Button1)
            except LookupError:
                test.fail("FAIL", "Unable to click on 'CollapseAll' button.")

    @classmethod
    def linkProjectWithSystem(cls, project, system, systemType=None):
        """
        This method links project with appropriate system.

        @param project [string] project name
        @param system [string] system name
        @return no return

        Usage:
        ProjectOperation.linkProjectWithSystem("test_project", "System1")
        """

        """ Objects """
        linkProjObj = LinkProject()
        popUpListObj = PopupListView()
        directoryObj = Directory()
        addSysObj = AddSystemStage()

        snooze(1)
        if not ReadActions.checkWindow("Navigator"):
            InputActions.activateMenuItem("Window->Show View->Navigator")
        snooze(1)

        if not ReadActions.checkDirectoryTree(project):
            ProjectOperation.expandDirectoryTree("My Projects")

        InputActions.mouseClickOnItem(directoryObj.getLinkButton(project))

        if object.exists(addSysObj.getAddSystem()):
            Common.addSimulatedSystem(system, systemType, True)
        else:
            InputActions.mouseClickOnItem(linkProjObj.getComboBox())
            InputActions.mouseClickOnItem(popUpListObj.getPopupItem(system))
            InputActions.mouseClickOnItem(linkProjObj.getOkButton("OK"))
        snooze(0.5)

    @classmethod
    def deleteAllProjects(cls):
        """
        This method deletes all created and imported projects from disk.

        @return status [bool] True if all projects are deleted, False otherwise

        Usage:
        ProjectOperation.deleteAllProjects()
        """
        status = False
        if not ReadActions.checkWindow("Navigator"):
            InputActions.activateMenuItem("Window->Show View->Navigator")
        ProjectOperation.expandAndCollapseAll("collapse")

        if not object.exists(Directory().getMyProjectsCell()):
            test.log("There are no created projects.")
            return status

        try:
            projectList = str(waitForObject(Directory().getMyProjectsCell()).item.resource.projects)
        except LookupError:
            test.fail("FAIL", "Couldn't find 'My Projects' cell.")
        projectList = projectList.replace("[", "")
        projectList = projectList.replace("]", "")
        projectList = projectList.replace("P/", "")
        projects = re.split(",", projectList)

        if not ReadActions.checkDirectoryTree(projects[0]):
            ProjectOperation.expandDirectoryTree("My Projects")

        for project in projects:
            temp = "{caption='" + project + "' container=" + Directory().systemDirectoryTree + " styletype='cell indexed-cell tree-cell' visible='true'}"
            tempText = "{caption='" + project + "' container=" + temp + " styletype='text' visible='true'}"
            InputActions.mouseClickOnItem(tempText)
            snooze(0.5)
            ProjectOperation.contextMenuSystemDirectory(tempText, "Delete", True)
            if object.exists(temp):
                test.fail("FAIL", "Project " + project + " is not deleted")
                return status
            else:
                test.log("Project " + project + " is deleted")
 
        status = True

        if status:
            test.log("All projects are deleted.")
            return status

    @classmethod
    def openProjectFromFileMenu(cls, name, path=None, context=False):
        """
        This method opens project from test data folder

        @param name [string] name of project
        @param path [string] path of location from where to import project
        @param context [string] option for Open Project(s) dialog from context menu
        @return no return

        Usage:
        ProjectOperation.openProjectFromFileMenu("build_project")
        """
        if os.path.exists(SuiteGlobals.PATH_TO_TESTDATA_FOLDER + os.sep + name):
            shutil.rmtree(SuiteGlobals.PATH_TO_TESTDATA_FOLDER + os.sep + name)
        shutil.copytree(SuiteGlobals.PATH_TO_REFDATA_FOLDER + os.sep + name, SuiteGlobals.PATH_TO_TESTDATA_FOLDER + os.sep + name)
        if not context:
            InputActions.activateMenuItem("File->Open project(s)")
        snooze(0.5)
        InputActions.mouseClickOnItem(OpenProject().getProjectPathButton())
        if path == None:
            chooseDirectory(waitForObject(":SWT"), SuiteGlobals.PATH_TO_TESTDATA_FOLDER)
        else:
            chooseDirectory(waitForObject(":SWT"), path)
        InputActions.mouseClickOnItem(OpenProject().getOpenProjectCheckBox(name))
        InputActions.mouseClickOnItem(OpenProject().getOpenButton())
        snooze(0.5)

    @classmethod
    def openLibraryProjectFromFileMenu(cls, name, path=None):
        """
        This method opens library project from test data folder

        @param name [string] name of library project
        @param path [string] path of location from where to import project, if left None it will look in testdata folder
        @return no return

        Usage:
        ProjectOperation.openLibraryProjectFromFileMenu("build_project")
        """
        if not object.exists(OpenLibraryProject().getMainShell()):
            InputActions.activateMenuItem("File->Open project(s)->Library Project(s)")
        snooze(0.5)
        InputActions.mouseClickOnItem(OpenLibraryProject().getLibraryProjectPathButton())

        if path != None:
            chooseDirectory(waitForObject(":SWT"), path)
        InputActions.mouseClickOnItem(OpenLibraryProject().getOpenLibraryProjectCheckBox(name))
        InputActions.mouseClickOnItem(OpenLibraryProject().getButton("Open"))
        snooze(0.5)

    @classmethod
    def openPluginProjectFromFileMenu(cls, name, path=None):
        """
        This method opens plugin project from test data folder

        @param name [string] name of plugin project
        @param path [string] path of location from where to import project, if left None it will look in testdata folder
        @return no return

        Usage:
        ProjectOperation.openPluginProjectFromFileMenu("build_project")
        """
        if not object.exists(OpenLibraryProject().getMainShell()):
            InputActions.activateMenuItem("File->Open project(s)->Plugin Project(s)")
        snooze(0.5)
        InputActions.mouseClickOnItem(OpenPluginProject().getLibraryProjectPathButton())

        if path != None:
            chooseDirectory(waitForObject(":SWT"), path)
        InputActions.mouseClickOnItem(OpenPluginProject().getOpenPluginProjectCheckBox(name))
        InputActions.mouseClickOnItem(OpenPluginProject().getButton("Open"))
        snooze(0.5)

    @classmethod
    def contextMenuProjects(cls, item, option, x=None, y=None, name=None, availableSys=None, virtualSys=None, template=None, device=None, location=None, pluginLvl=None, version=None, pluginLocation=None, supportedSys=None, supportedDev=None):
        """
        This method uses context menu from system directory which can only create new System, Device or Library project and Open already created projects.

        @param item [string] real name of System Directory content
        @param option [string] chooses context menu option (Add New->Device Project, Add New->System Project and Open Project(s))
        @param x [int] x coordinate of System Directory content (if omitted, default value is 100)
        @param y [int] y coordinate of System Directory content (if omitted, default value is 500)
        @param name [string] name of System/Device project or already created project
        @param availableSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param virtualSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param template [string] chooses template from System/Device project wizard
        @param device [string] chooses device from System/Device project wizard
        @param location [string] chooses location where to save the System/Device project
        @return [bool] True(if option is executed)
                       False(if option is not executed)

        Usage:
        projectPath = "C:\projects"
        ProjectOperation.contextMenuProjects(projectRealName, "Add New->Library Project", "Library_Project")
        ProjectOperation.contextMenuProjects(projectRealName, "Add New->Library Project", "Library_Project", None, None, None, None, projectPath)
        """
        defaultCoordinates = True
        if isinstance(x, str) or isinstance(y, str) or x == None or y == None:
            location = template
            device = virtualSys
            template = availableSys
            virtualSys = name
            availableSys = y
            name = x
        else:
            defaultCoordinates = False

        try:
            if defaultCoordinates:
                mouseClick(waitForObject(item), 100, 500, 0, Button.Button3)
            else:
                mouseClick(waitForObject(item), x, y, 0, Button.Button3)
        except LookupError:
            test.fail("FAIL", "Couldn't click on '" + Directory().getSystemDirectoryTree() + "' to open context menu.")

        func, args = {
          'Add New->Device Project': (ProjectOperation.contextMenuDeviceProject, (option, name, availableSys, virtualSys, template, device, location)),
          'Add New->System Project': (ProjectOperation.contextMenuSystemProject, (option, name, availableSys, virtualSys, device, location)),
          'Add New->Library Project': (ProjectOperation.contextMenuLibraryProject, (option, name, location)),
          'Add New->Plugin Project': (ProjectOperation.contextMenuPluginProject, (option, name, pluginLvl, version, pluginLocation, supportedSys, supportedDev)),
          'Open Project(s)->System/Device Project(s)': (ProjectOperation.contextMenuOpenProject, (option, name,)),
          'Open Project(s)->Library Project(s)': (ProjectOperation.contextMenuOpenLibraryProject, (option, name, location)),
          'Open Project(s)->Plugin Project(s)': (ProjectOperation.contextMenuOpenPluginProject, (option, name, location)),
        }.get(option, (ProjectOperation.contextMenuTextLog, (option,)))
        result = func(*args)
        snooze(0.5)

        if result:
            test.passes("PASS", "'" + option + "' is successfully executed.")
            return True
        else:
            test.fail("FAIL", "'" + option + "' is not executed.")
            return False

    @classmethod
    def contextMenuDeviceProject(cls, option, name, availableSys=None, virtualSys=None, template=None, device=None, location=None, context=True):
        """
        This method is used for creating device project from context menu. This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->Device Project, Add New->System Project and Open Project(s))
        @param name [string] name of device project
        @param availableSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param virtualSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param template []
        @param device [string] chooses device from System/Device project wizard
        @param location [string] chooses location where to save the System/Device project
        @param context [string] default None(context will be default from scs)
        @return [bool] True if project is created

        Usage:
        ProjectOperation.contextMenuDeviceProject(option, name, availableSys, virtualSys, template, device, location)
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        NewProjects.newDevicePanelProject(name, availableSys, virtualSys, template, device, location, context)
        return True

    @classmethod
    def contextMenuSystemProject(cls, option, name, availableSys=None, virtualSys=None, device=None, location=None, context=True):
        """
        This method is used for creating system project from context menu.This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->System Project, Add New->System Project and Open Project(s))
        @param name [string] name of system project
        @param availableSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param virtualSys [string] define available or virtual system (availableSys or virtualSys), set value for one and set None for the other
        @param device [string] chooses device from System/Device project wizard
        @param location [string] chooses location where to save the System project
        @param context [string] default None(context will be default from scs)
        @return [bool] true if project is created

        Usage:
        ProjectOperation.contextMenuSystemProject(option, name, availableSys, virtualSys, template, device, location)
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        NewProjects.newSystemPanelProject(name, availableSys, virtualSys, device, location, context)
        return True

    @classmethod
    def contextMenuLibraryProject(cls, option, name, location):
        """
        This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->Library Project)
        @param name [string] name of project
        @param location [string] chooses location where to save the Library project
        @return [bool] true of project is created
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        NewProjects.newLibraryProject(name, location)
        return True

    @classmethod
    def contextMenuPluginProject(cls, option, name, pluginLvl, version=None, location=None, supportedSys=None, supportedDev=None):
        """
        This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->Plugin Project)
        @param projectName [string] name of project
        @param pluginLvl [string] name of the plugin level. Can be System, Device, Agnostic
        @param version [string] the version number
        @param location [string] chooses location where to save the Plugin project
        @param supportedSys [string] name of the system which is supported
        @param supportedDev [string] name of the devices that are supported
        @return [bool] true of project is created
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        NewProjects.newPluginPanelProject(name, pluginLvl, version, location, supportedSys, supportedDev, True)
        return True

    @classmethod
    def contextMenuOpenProject(cls, option, name, path=None, context=True):
        """
        This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->Device Project, Add New->System Project and Open Project(s))
        @param name [string] name of project
        @param path [string] path of location from where to import project
        @param context [string] default None(context will be default from scs)
        @return [bool] True if project is created

        Usage:
        ProjectOperation.contextMenuOpenProject, (option, name,)
        """
        try:
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(), option))
            snooze(1)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        ProjectOperation.openProjectFromFileMenu(name, path, context)
        return True

    @classmethod
    def contextMenuOpenLibraryProject(cls, option, name, path=None):
        """
        This method is used in contextMenuProjects method.
        It opens already created library with the name and path give.

        @param name [string] name of the library project
        @param path [string] path where the library project is located, if left none it will take default location
        @return: [bool] True if project is opened
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        ProjectOperation.openLibraryProjectFromFileMenu(name, path)
        return True

    @classmethod
    def contextMenuOpenPluginProject(cls, option, name, path=None):
        """
        This method is used in contextMenuProjects method.
        It opens already created plugin with the name and path given.

        @param name [string] name of the plugin project
        @param path [string] path where the plugin project is located, if left none it will take default location
        @return: [bool] True if project is opened
        """
        temp = re.split("->", option)
        try:
            activateItem(waitForObjectItem(Directory().getContextMenu(), temp[0]))
            snooze(0.5)
            activateItem(waitForObjectItem(Directory().getContextMenu(temp[0]), temp[1]))
            snooze(0.5)
        except LookupError:
            test.fail("FAIL", "Couldn't select '" + option + "'.")

        ProjectOperation.openPluginProjectFromFileMenu(name, path)
        return True

    @classmethod
    def contextMenuTextLog(cls, option):
        """
        This method is used in contextMenuProjects method

        @param option [string] chooses context menu option (Add New->Device Project, Add New->System Project and Open Project(s))
        @return [bool] False

        Usage:
        ProjectOperation.contextMenuTextLog(option)
        """
        test.log("There are no such option '" + option + "'.")
        return False

    @classmethod
    def listNavigatorProjects(cls, projectType):
        """
        This method list all specific projects from Navigator.

        @param projectType [string] type of project which will be listed (e.g. Library, Device or System project)
        @return listOfProjects [list] Returns the list of created projects

        Usage:
        ProjectOperation.listNavigatorProjects("Library")
        ProjectOperation.listNavigatorProjects("Device")
        ProjectOperation.listNavigatorProjects("System")
        """
        listOfProjects = []
        if not ReadActions.checkWindow("Navigator"):
            InputActions.activateMenuItem("Window->Show View->Navigator")
        ProjectOperation.expandAndCollapseAll("collapse")

        if not object.exists(Directory().getMyProjectsCell()):
            test.log("There are no created projects.")
            return listOfProjects

        try:
            projectList = str(waitForObject(Directory().getMyProjectsCell()).item.resource.projects)
        except LookupError:
            test.fail("FAIL", "Couldn't find 'My Projects' cell.")
        projectList = projectList.replace("[", "")
        projectList = projectList.replace("]", "")
        projectList = projectList.replace("P/", "")
        projects = re.split(",", projectList)

        if not ReadActions.checkDirectoryTree(projects[0]):
            ProjectOperation.expandDirectoryTree("My Projects")

        for project in projects:
            temp = "{caption='" + project + "' container=" + Directory().systemDirectoryTree + " styletype='text' visible='true'}"
            try:
                mouseClick(findObject(temp), 5, 5, 0, Button.Button1)
                snooze(0.2)
            except LookupError:
                test.fail("FAIL", "Couldn't find project '" + project + "'.")
                return status
            if object.exists(Properties(projectType + " Properties").getcTabItem()):
                listOfProjects.append(project)

        return listOfProjects

    @classmethod
    def listProjectDirectories(cls, projectPath):
        """
        This method list all folders inside the project.

        @param projectPath [string] system path to the project
        @return folderList [list] Returns the list of folders inside the project

        Usage:
        projectName = "Project"
        projectPath = SuiteGlobals.PATH_TO_TESTDATA_FOLDER + os.sep + projectName
        ProjectOperation.listProjectDirectories(projectPath)
        """
        testMachine = platform.system()
        folderList = []
        listOfElements = [x[0] for x in os.walk(projectPath)]
        for folder in listOfElements:
            if "Windows" in testMachine:
                temp = re.split(os.sep + os.sep, folder)
            else:
                temp = re.split(os.sep, folder)
            folderList.append(temp[len(temp) - 1])
        del folderList[0]
        return folderList
