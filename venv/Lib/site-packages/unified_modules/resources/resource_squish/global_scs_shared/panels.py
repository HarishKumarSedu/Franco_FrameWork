# Copyright (c) 2017 Cirrus Logic, Inc and
# Cirrus Logic International Semiconductor Ltd.  All rights reserved.
#
# This software as well as any related documentation is furnished under
# license and may only be used or copied in accordance with the terms of the
# license.  The information in this file is furnished for informational use
# only, is subject to change without notice, and should not be construed as
# a commitment by Cirrus Logic.  Cirrus Logic assumes no responsibility or
# liability for any errors or inaccuracies that may appear in this document
# or any software that may be provided in association with this document.
#
# Except as permitted by such license, no part of this document may be
# reproduced, stored in a retrieval system, or transmitted in any form or by
# any means without the express written consent of Cirrus Logic.
#
# Warning
#   This software is specifically written for Cirrus Logic devices.
#   It may not be used with other devices.
#
## @file   panels.py
## @brief  Contains methods for operating with panels


import os
import sys
import re
import platform


source(findFile("scripts", "common.py"))
if "Windows" in platform.system():
    import pyautogui


class PanelOperation:

    @classmethod
    def dragAndDropWidget(self, source_object, sx, sy, target_object, tx, ty, rootType="root scs-part"):
        """
        It begins by initiating a drag on the source_object widget starting at position sx and sy
        (in the source_object widget's coordinates), and then it does the drop on the target_object
        widget at position tx and ty (in the target_object widget's coordinates).
        If sx, sy and tx, ty are omitted, then the respectively center of the object is taken.

        @param source_object [string] name of object we want drag and drop
        @param sx [int] position on x axis of widget we want to click
        @param sy [int] position on y axis of widget we want to click
        @param target_object [string] name of panel or name of panel and tooltip
        @param tx [int] position on x axis of panel we want to drop
        @param ty [int] position on y axis of panel we want to drop
        @param rootType [string] type of root
        @return no return

        Usage:
        panel = "Blank.panel"
        panel2 = "Event Handling.bdf"
        PanelOperation.dragAndDropWidget("Button", 10, 10, panel, 100, 100)
        PanelOperation.dragAndDropWidget("GPI Event", 10, 10, panel2, 100, 100, "root")
        PanelOperation.dragAndDropWidget("ISRC", 10, 10, "DMC.bdf->cdb42L42_0", 50, 100, "root")
        """

        flag = 0
        paletteObj = Palette()
        if "->" in target_object:
            temp = re.split("->", target_object)
            panelName = temp[0]
            panelTooltip = temp[1]
            panelEditorObj = PanelEditor(panelName, panelTooltip)
        else:
            panelName = target_object
            panelEditorObj = PanelEditor(panelName)

        """ Take widget from palette or search through field filter if isn't visible """
        if object.exists(paletteObj.getWidgetFromPalette(source_object)):
            try:
                widget = waitForObject(paletteObj.getWidgetFromPalette(source_object))
            except LookupError:
                test.fail("FAIL", "Can no find object " + paletteObj.getWidgetFromPalette(source_object))
        else:
            PaletteOperation().fieldFilter(source_object)
            try:
                widget = waitForObject(paletteObj.getWidgetFromPalette(source_object))
            except LookupError:
                test.fail("FAIL", "Can no find object " + paletteObj.getWidgetFromPalette(source_object))
            flag += 1
        snooze(0.3)

        if rootType == "root scs-part":
            try:
                panel = waitForObject(panelEditorObj.getRoot())
            except LookupError:
                test.fail("FAIL", "Can no find object " + panelEditorObj.getRoot())
        elif rootType == "root":
            try:
                panel = waitForObject(panelEditorObj.getRootWithoutSCSPart())
            except LookupError:
                test.fail("FAIL", "Can no find object " + panelEditorObj.getRootWithoutSCSPart())
        else:
            panel = ""
            test.fail("FAIL", "Wrong root " + root)
        snooze(0.3)

        dragAndDrop(widget, sx, sy, panel, tx, ty, DnD.DropCopy)

        """ Delete text in Palette filter field """
        machine = platform.system()
        if flag == 1:
            try:
                """Clicking twice because it doesn't work on Mac if you click once"""
                mouseClick(waitForObject(paletteObj.getTextFieldFilter()), 5, 5, 0, Button.Button1)
                mouseClick(waitForObject(paletteObj.getTextFieldFilter()), 5, 5, 0, Button.Button1)
            except LookupError:
                test.fail("FAIL", "Can no find object " + paletteObj.getTextFieldFilter())
            if "Darwin" in machine:
                nativeType("<Command+a>")
                nativeType("<Delete>")
            else:
                nativeType("<Ctrl+a>")
                nativeType("<Delete>")
        snooze(0.5)

    @classmethod
    def mouseDragWidget(cls, widget, x, y, dx, dy):
        """
        This function performs a mouse drag operation. It initiates a mouse drag of the specified
        objectOrName widget starting at position x and y (in the objectOrName widget's coordinates),
        using the specified button and with the modifierState modifier state.
        The objectOrName widget is dragged by dx pixels horizontally and by dy pixels vertically.

        @param widget [string] name of object we want to drag
        @param x [int] position on x axis of widget we want to click
        @param y [int] position on y axis of widget we want to click
        @param dx [int] number of pixels x we want widget to move widget
        @param dy [int] number of pixels y we want widget to move widget
        @return no return

        Usage:
        PanelOperation.mouseDragWidget(PanelEditor(panel).getContainer(container), 10, 10, 0, -300)
        PanelOperation.mouseDragWidget(PanelEditor(panel).getWidget(widget), 10, 10, 0, -300)
        """
        try:
            mouseDrag(waitForObject(widget), x, y, dx, dy, Modifier.None, Button.Button1)
        except LookupError:
            test.fail("FAIL", "Unable to move '" + widget + "'")

    @classmethod
    def changeWidgetValue(cls, widget, value):
        """
        This method changes value of widget using widget text box

        @param widget [string] widget real name
        @param value [string] value witch will be written in text box

        Usage:
        PanelOperation.changeWidgetValue(PanelRuntime("Blank").getSliderWidzetTextBox(), "0x00")
        """
        try:
            doubleClick(waitForObject(widget), 10, 10, 0, Button.Button1)
            type(waitForObject(widget), value)
            type(waitForObject(widget), "<Return>")
        except LookupError:
            test.fail("FAIL", "Unable to click on text filed '" + widget + "'")

    @classmethod
    def chooseContextMenuItem(cls, selected_object, option, x=5, y=5):
        """
        This method chose context manu item

        @param selected_object [string] object on witch we gona click right click
        @param option [string] option must be one of these "Cut", "Copy", "Paste", "Delete"
        @return no return

        Usage:
        PanelOperation.chooseContextMenuItem(PanelEditor(panel).getWidget(widget1, check_box3_ID), "Delete")
        """
        contextMenuList = ["Cut", "Copy", "Paste", "Delete"]
        if option in contextMenuList:
            try:
                mouseClick(waitForObject(selected_object), x, y, 0, Button.Button3)
                snooze(0.5)
                count = contextMenuList.index(option)

                if count == 0:
                    nativeType("<Return>")
                    snooze(1.5)
                else:
                    for i in range(0, count):
                        nativeType("<Down>")
                        if i == (count - 1):
                            nativeType("<Return>")
                            snooze(2)
                            break

            except LookupError:
                test.fail("FAIL", "Couldn't " + option + " selected object.")

    @classmethod
    def connectTwoBlocks(cls, panel, first, second):
        """
        This method makes connection between two blocks

        @param panel [string] panel name
        @param first [string] name of the first block
        @param second [string] name of the second block
        @return no return

        Usage:
        PanelOperation.connectTwoBlocks("Event Handling.bdf", "GPI", "Report to USB")
        """
        panelEditorObj = PanelEditor(panel)
        try:
            startDrag(panelEditorObj.getVBoxPort(first, "right"))
            dropOn(panelEditorObj.getVBoxPort(second, "left"), DnD.DropMove)
        except:
            test.fail("FAIL", "Can not make connection between two blocks")

    @classmethod
    def connectTwoBlocksUsingIDs(cls, panel, borderPaneOut, borderPaneIn, sideOut, sideIn, portNumberOut, portNumberIn):
        """
        This method makes connection between two blocks

        @param panel [string] panel name
        @param borderPaneOut [string] real name of output border pane
        @param borderPaneIn [string] real name of input border pane
        @param sideOut [string] side of output port
        @param sideIn [string] side of input port
        @param portNumberOut [int] ordinal number of output port from one side of block - for example: if there is 4 ports portNumber can be 1, 2, 3 or 4
        @param portNumberIn [int] ordinal number of input port from one side of block - for example: if there is 4 ports portNumber can be 1, 2, 3 or 4
        @return no return

        Usage:
        Note: borderPaneIn and borderPaneOut are real names
        PanelOperation.connectTwoBlocksUsingIDs("DMC.bdf", borderPaneOut, borderPaneIn, "right", "left", 1, 1)
        PanelOperation.connectTwoBlocksUsingIDs("DMC.bdf", borderPaneOut, borderPaneIn, "right", "left", 1, 2)
        PanelOperation.connectTwoBlocksUsingIDs("DMC.bdf", borderPaneOut, borderPaneIn, "right", "left", 3, 3)
        """
        panelEditorObj = PanelEditor(panel)
        try:
            start = panelEditorObj.getPort(borderPaneOut, sideOut, portNumberOut)
            end = panelEditorObj.getPort(borderPaneIn, sideIn, portNumberIn)
            startDrag(start)
            dropOn(end, DnD.DropMove)
        except:
            test.fail("FAIL", "Can not make connection between two blocks")

    @classmethod
    def loadConfiguration(cls, system, device, panel, configuration="Basic Headset (Full Speed)"):
        """
        This method loads configuration template

        @param system [string] system name
        @param device [string] device name
        @param panel [string] panel name
        @param configuration [string] name of the configuration template
        @return no return

        Usage:
        PanelOperation.loadConfiguration("System_1", "CS46L41", "Overview")
        PanelOperation.loadConfiguration("System_1", "CS46L41", "Overview", "Basic Headset (Full Speed)")
        """
        system = "*" + system + "*"
        templateConfigurationObj = TemplateConfiguration()
        popupObj = PopupListView()
        confirmShellObj = ConfirmShell()
        Common.showDiscoveredSystem()
        snooze(2)
        ProjectOperation().expandAndCollapseAll("collapse")
        ProjectOperation().expandDirectoryTree("Discovered systems" + "->" + system + "->" + device + "->" + panel)
        snooze(2)
        if object.exists(confirmShellObj.getConfirmShellButton("YES")):
            InputActions.mouseClickOnButton(confirmShellObj.getConfirmShellButton("YES"))
        snooze(1)
        if configuration == "Basic Headset (Full Speed)":
            if not object.exists(templateConfigurationObj.getComboBoxWidgetLabel("Basic Headset (Full Speed)")):
                InputActions.mouseClickOnItem(templateConfigurationObj.getComboBoxWidget())
                InputActions.mouseClickOnItem(popupObj.getPopupItem(configuration))
            else:
                test.log("Configuration is " + configuration)
        else:
            InputActions.mouseClickOnItem(templateConfigurationObj.getComboBoxWidget())
            InputActions.mouseClickOnItem(popupObj.getPopupItem(configuration))
        InputActions.mouseClickOnButton(templateConfigurationObj.getWidgetButton("LOAD"))
        snooze(2)
        if object.exists(confirmShellObj.getConfirmShellButton("YES")):
            InputActions.mouseClickOnButton(confirmShellObj.getConfirmShellButton("YES"))
        ReadActions.checkExpendedDirectoryTree(system + "->" + device + "->" + "Global USB Settings")

    @classmethod
    def readConfiguration(cls, system, device, panel, configurations):
        """
        This method checks if configuration templates exists

        @param system [string] system name
        @param device [string] device name
        @param panel [string] panel name
        @param configurations [array] list of names of the configuration templates
        @return no return

        Usage:
        PanelOperation.readConfiguration("System_1", "CS46L41", "Overview", ["Basic Audio Adapter (Full Speed)", "Basic Headset (Full Speed)", "Basic Headset (High Speed)"])
        """
        system = "*" + system + "*"
        overiviewObj = Overview()
        templateConfigurationObj = TemplateConfiguration()
        popupObj = PopupListView()
        confirmShellObj = ConfirmShell()
        Common.showDiscoveredSystem()
        snooze(2)
        ProjectOperation().expandAndCollapseAll("collapse")
        ProjectOperation().expandDirectoryTree("Discovered systems" + "->" + system + "->" + device + "->" + panel)
        snooze(2)
        if object.exists(confirmShellObj.getConfirmShellButton("YES")):
            InputActions.mouseClickOnButton(confirmShellObj.getConfirmShellButton("YES"))
        snooze(1)
        InputActions.mouseClickOnItem(overiviewObj.getWidgetLabel("Start"))
        InputActions.mouseClickOnItem(overiviewObj.getWidgetLabel("Template Configuration", "IDEAN_FONT_STYLE_BODY"))
        snooze(1)
        InputActions.mouseClickOnItem(templateConfigurationObj.getComboBoxWidget())
        snooze(2)
        for configuration in configurations:
            if object.exists(popupObj.getPopupItem(configuration)):
                test.passes("PASS", configuration + " exists")
            else:
                test.fail("FAIL", configuration + " does not exist.")

    @classmethod
    def changeNumericFieldWidgetTextUSBSettings(cls, name, text):
        """
        This method change text in numeric field widget
        @param param [string] name of numeric field widget
        @param text [string] text which will be written into numeric field
        @return no return

        Usage:
        PanelOperation.changeNumericFieldWidgetTextUSBSettings("VID", "0x111")
        PanelOperation.changeNumericFieldWidgetTextUSBSettings("PID", "0x123")
        """
        overiviewObj = Overview()
        USBSettingsObj = USBSettings()
        InputActions.mouseClickOnItem(overiviewObj.getWidgetLabel("USB Settings"))
        InputActions.mouseClickOnItem(overiviewObj.getWidgetLabel("Global USB Settings", "IDEAN_FONT_STYLE_BODY"))
        snooze(1)
        InputActions.mouseDoubleClickOnItem(USBSettingsObj.getNumericFieldWidget(name))
        snooze(1)
        nativeType(text)
        snooze(1)

    @classmethod
    def installDeviceSofware(cls):
        """
        This method install device software

        Usage:
        PanelOperation.installDeviceSofware()
        """
        if SuiteGlobals.testMachine == "Windows":
            install = False
            cmd = 'WMIC PROCESS get Caption'
            try:
                proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
            except LookupError:
                test.fail("FAIL", "Unable to open processes from terminal")
            snooze(1)
            for line in proc.stdout:
                if "dfu-driver-installer.exe" in line:
                    install = True
            if install == True:
                pyautogui.press('left')
                snooze(1)
                pyautogui.press('enter')
                snooze(2)
                install = False

    @classmethod
    def checkNumberOfButtonsAnalogPanel(cls, container, expectedNumber):
        """
        This method checks if the expected number of buttons is shown on Analog panel

        @param container [string] real name of the container of the buttons
        @param expectedNumber [int] number of buttons that are expected to be shown
        @return [boolean] True or False depending on if the test passed or failed

        Usage:
        PanelOperation.checkNumberOfButtonsAnalogPanel()
        """
        visibleButtonsCounter = 0
        try:
            containerObj = waitForObject(container)
            children = object.children(containerObj)
            for child in children:
                if str(child.styleclass) == "rounded-button-widget" and child.visible == True:
                    visibleButtonsCounter += 1
        except LookupError:
            test.fail("FAIL", "Did not find " + str(container) + ".")
            return False

        if visibleButtonsCounter == expectedNumber:
            test.passes("PASS", str(expectedNumber) + " buttons are shown.")
            return True
        else:
            test.fail("FAIL", str(visibleButtonsCounter) + " buttons shown, expected " + str(expectedNumber) + " buttons.")
            return False

    @classmethod
    def checkNumericFieldValue(cls, numericField, exceptedValue):
        """
        This method checks if the numeric field has expected value

        @param numericField [string] real name of the numeric field
        @param exceptedValue [float] expected value of numeric field
        @return no return

        Usage:
        PanelOperation.checkNumericFieldValue()
        """
        if object.exists(numericField):
            try:
                if waitForObject(numericField).value == exceptedValue:
                    test.passes("PASS", "Impedance numeric field has expected value of " + str(exceptedValue) + ".")
                else:
                    test.fail("FAIL", "Impedance numeric field does not have expected value of " + str(exceptedValue) + ".")
            except LookupError as lue:
                test.fail("FAIL", str(lue))
        else:
            test.fail("FAIL", "Impedance numeric" + numericField + " field does not exist.")

    @classmethod
    def checkAnalogButtonsImpedanceRange(cls, impedanceRangeMin, impedanceRangeMax, expectedMin, expectedMax):
        """
        This method checks if analog buttons impedance range is correct

        @param impedanceRangeMin [string] name of the minimum value numeric field
        @param impedanceRangeMax [string] name of the maximum value numeric field
        @param expectedMin [float] expected minimum value
        @param expectedMax [float] expected maximum value
        @return no return

        Usage:
        PanelOperation.checkNumericFieldValue()
        """
        analogPanelObj = AnalogPanel()
        minNumericField = analogPanelObj.getNumericField(impedanceRangeMin)
        maxNumericField = analogPanelObj.getNumericField(impedanceRangeMax)
        PanelOperation.checkNumericFieldValue(minNumericField, expectedMin)
        PanelOperation.checkNumericFieldValue(maxNumericField, expectedMax)

    @classmethod
    def changeFWLocalizationDescriptorValue(cls, descriptorName, value):
        """
        This method changes chosen Descriptor value on Localziation panel

        @param descriptorName [string] name of Descriptor
        @param value [string] value that is trying to be written to Value field
        @return [boolean] True or False depending on if the value is written or not

        Usage:
        PanelOperation.changeFWLocalizationDescriptorValue("IProduct", "0x01")
        """
        localizationObj = FWLocalization()
        tableRow = None
        try:
            sheetObj = waitForObject(localizationObj.getSheet("tblDescriptors"))
            rows = object.children(sheetObj)
            for row in rows:
                columns = object.children(row)
                for column in columns:
                    if str(column.text) == descriptorName:
                        tableRow = row

            children = object.children(tableRow)
            for child in children:
                #test.log(str(child))
                if str(child.text) != descriptorName:
                    mouseClick(child, 5, 5, 0, Button.Button1)
                    tableColumn = child
            columnChildren = object.children(tableColumn)
            for cChild in columnChildren:
                #test.log(str(cChild))
                if str(cChild.accessiblerole) == "TEXT":
                    mouseClick(cChild, 5, 5, 0, Button.Button1)
            nativeType(value)
            nativeType("<Return>")
            return True
            snooze(1)

        except LookupError:
            test.fail("FAIL", "Didn't find Localization sheet.")
            return False

    @classmethod
    def changeDialNumericFieldValue(cls, dialNumericField, value):
        """
        This method changes dial numeric field value

        @param dialNumericField [string] dial numeric field real name
        @param value [double] value that is trying to be written to dial numeric field
        @return no return

        Usage:
        PanelOperation.changeDialNumericFieldValue(EqRecord().getDialWidgetNumericField("dialFreq"), 1500)
        """
        Common.openSimpleContextMenuAndChoose(dialNumericField, "Select All")
        nativeType("<Delete>")
        nativeType(str(value))
        nativeType("<Return>")

    @classmethod
    def closeEqPanels(cls, panel=None):
        """
        This method closes Eq panels
        @param panel [string] if None closes else closes corresponding panel
        @return no return

        Usage:
        PanelOperation.closeEqPanels()
        PanelOperation.closeEqPanels("playback")
        PanelOperation.closeEqPanels("record")
        PanelOperation.closeEqPanels("sidetone")
        """
        playbackObj = EqPlayback()
        recordObj = EqRecord()
        sideToneObj = EqSideTone()
        if panel == None:
            if object.exists(playbackObj.getPlayBackCTabItem()):
                InputActions.mouseClickOnItem(playbackObj.getPlayBackCTabItem(), "middle")
            if object.exists(recordObj.getRecordCTabItem()):
                InputActions.mouseClickOnItem(recordObj.getRecordCTabItem(), "middle")
            if object.exists(sideToneObj.getSideToneCTabItem()):
                InputActions.mouseClickOnItem(sideToneObj.getSideToneCTabItem(), "middle")
        elif panel == "playback":
            if object.exists(playbackObj.getPlayBackCTabItem()):
                InputActions.mouseClickOnItem(playbackObj.getPlayBackCTabItem(), "middle")
        elif panel == "record":
            if object.exists(recordObj.getRecordCTabItem()):
                InputActions.mouseClickOnItem(recordObj.getRecordCTabItem(), "middle")
        elif panel == "sidetone":
            if object.exists(sideToneObj.getSideToneCTabItem()):
                InputActions.mouseClickOnItem(sideToneObj.getSideToneCTabItem(), "middle")

    @classmethod
    def removeConfigurableLanguages(cls):
        """
        This method removes added configurable languages on Localization panel
        @return no return

        Usage:
        PanelOperation.removeConfigurableLanguages()
        """
        overviewObj = Overview()
        localizationObj = FWLocalization()
        InputActions.mouseClickOnItem(overviewObj.getWidgetLabel("Program"))
        InputActions.mouseDoubleClickOnItem(localizationObj.getCTabItem())
        numberOfLanguages = 0
        try:
            numberOfLanguages = waitForObject(localizationObj.getTableView("tblConfigurableLanguages")).items.length
            while numberOfLanguages > 0:
                InputActions.mouseClickOnItem(localizationObj.getRow("tblConfigurableLanguages"))
                InputActions.mouseClickOnItem(localizationObj.getButton("REMOVE"))
                numberOfLanguages -= 1
        except LookupError:
            test.fail("FAIL", "No Localization table view.")
        InputActions.mouseDoubleClickOnItem(localizationObj.getCTabItem())

    @classmethod
    def changePanelsWidth(cls, panelCTabRealName, width):
        """
        This method changes panels width by dragging its end so all panels objects can be used
        @return no return

        Usage:
        PanelOperation.changePanelsWidth(500)
        PanelOperation.changePanelsWidth(-500)
        """
        try:
            mouseDrag(waitForObject(panelCTabRealName).parent, -1, 100, -width, 0, Modifier.None, Button.Button1)
        except LookupError as lue:
            test.fail("FAIL", "Error: " + str(lue))

    @classmethod
    def configurationForProgramAndSave(cls):
        """
        This method adds the language to the localization panel if langunage is not added,
        fills the iManifacturer and iProduct fields and checks sample rate check box
        @return no return

        Usage:
        PanelOperation.configurationForProgramAndSave()
        """
        overviewObj = Overview()
        localizationObj = FWLocalization()
        afplaybackObj = AFPlayback()
        afrecordobj = AFRecord()
        usbSettingsObj = USBSettings()
        peripheralSelectionObj = PeripheralSelection()
        pinMapObj = PinMap()

        if SuiteGlobals.GRAY_DEUCE == False:
            grayDevice = "CS46L41"
        else:
            grayDevice = "CS46L06"

        # Click on 2 - USB Settings
        InputActions.mouseClickOnItem(overviewObj.getWidgetLabel("Product/USB Settings"))
        # Click on 'Configure the USB descriptor strings for all supported languages'
        snooze(3)
        InputActions.mouseClickOnItem(overviewObj.getDiagramLinkWidget("Localization.panel"))
        try:
            if waitForObject(localizationObj.getTableView("tblConfigurableLanguages")).items.length == 0:
                InputActions.mouseClickOnItem(localizationObj.getLocalizationButton("ADD"))
        except LookupError:
            test.fail("FAIL", "Didn't find table view object.")
        snooze(2)
        # Choose English language from 'Language' combo box if not chosen and fill the IManufaturer field with "Cirrus Logic" and IProduct field with "Headphones" if not filled
        PanelOperation.changeFWLocalizationDescriptorValue("iManufacturer", "Cirrus Logic, Inc")
        snooze(2)
        PanelOperation.changeFWLocalizationDescriptorValue("iProduct", grayDevice)
        snooze(2)
        InputActions.mouseClickOnItem(overviewObj.getDiagramLinkWidget("Global USB Settings.panel"))
        snooze(2)
        PanelOperation.changeDialNumericFieldValue(usbSettingsObj.getNumericFieldWidget("VID"), "0x428")
        snooze(2)
        InputActions.mouseClickOnItem(overviewObj.getWidgetLabel("Audio Function"))
        snooze(2)
        InputActions.mouseClickOnItem(overviewObj.getDiagramLinkWidget("Audio Function/Playback.panel"))
        snooze(2)
        try:
            if str(waitForObject(afplaybackObj.getCheckBox("blank_container_0", "chbSmplRateFirstAlt48")).value) == "false":
                InputActions.mouseClickOnItem(afplaybackObj.getCheckBox("blank_container_0", "chbSmplRateFirstAlt48"))
        except LookupError:
            test.fail("FAIL", "Didn't find table view object.")
        snooze(2)
        InputActions.mouseClickOnItem(overviewObj.getDiagramLinkWidget("Audio Function/Record.panel"))
        snooze(2)
        try:
            if str(waitForObject(afrecordobj.getCheckBox("blank_container_2", "chbSmplRateFirstAlt48")).value) == "false":
                InputActions.mouseClickOnItem(afrecordobj.getCheckBox("blank_container_2", "chbSmplRateFirstAlt48"))
        except LookupError:
            test.fail("FAIL", "Didn't find table view object.")
        InputActions.mouseClickOnItem(overviewObj.getWidgetLabel("Hardware I/O"))
        snooze(2)
        InputActions.mouseClickOnItem(overviewObj.getDiagramLinkWidget("Hardware IO/Peripheral Selection.panel"))
        snooze(2)
        try:
            if str(waitForObject(peripheralSelectionObj.getCheckBoxWidget("chkSPI")).value) == "false":
                InputActions.mouseClickOnItem(peripheralSelectionObj.getCheckBoxWidget("chkSPI"))
        except LookupError:
            test.fail("FAIL", "Didn't find table view object.")
        snooze(2)
        if object.exists(pinMapObj.getcTabItem()):
            InputActions.mouseClickOnItem(pinMapObj.getcTabItem(), "middle")

    @classmethod
    def changeAllAnalogButtonsVolatages(cls, listOfValues):
        """
        This method changes all voltage values on Analog buttons panel
        @param list of values
        @return no return

        Usage:
        PanelOperation.changeAllAnalogButtonsVolatages(listOfValues)
        """
        analogPanelObj = AnalogPanel()
        listOfNumerFields = ["vmin1", "vmax1", "vmin2", "vmax2", "vmin3", "vmax3", "vmin4", "vmax4"]
        if object.exists(analogPanelObj.getLabel("Voltage Min [mV]:")) and object.exists(analogPanelObj.getLabel("Voltage Max [mV]:")):
            InputActions.mouseClickOnItem(analogPanelObj.getRadioButton("Voltage"))

            if len(listOfValues) == 8:
                for i in range(len(listOfNumerFields)):
                    PanelOperation.changeDialNumericFieldValue(analogPanelObj.getNumericField(listOfNumerFields[i]), listOfValues[i])
                    try:
                        if waitForObject(analogPanelObj.getNumericField(listOfNumerFields[i])).value == listOfValues[i]:
                            test.passes("PASS", "Value of " + listOfNumerFields[i] + " numeric field changed.")
                        else:
                            test.fail("FAIL", "Value of " + listOfNumerFields[i] + " numeric field did not change.")
                    except LookupError as lue:
                        test.fails("FAIL", str(lue))
            else:
                test.fail("FAIL", "Incorrect number of values, 8 needed.")
        else:
            test.fail("FAIL", "Not in internal mode, no voltages present.")

    @classmethod
    def checkAnalogButtonsSetToDefault(cls):
        """
        This method checks if voltage values on Analog buttons panel are set to defaults
        @return no return

        Usage:
        PanelOperation.checkAnalogButtonsSetToDefault()
        """
        analogPanelObj = AnalogPanel()
        listOfNumerFields = ["vmin1", "vmax1", "vmin2", "vmax2", "vmin3", "vmax3", "vmin4", "vmax4"]
        listOfDefaultValues = [0.0, 67.84140969162996, 104.76190476190476, 166.38655462184875, 191.701244813278, 256.22489959839356, 309.375, 519.4444444444445]
        if object.exists(analogPanelObj.getLabel("Voltage Min [mV]:")) and object.exists(analogPanelObj.getLabel("Voltage Max [mV]:")):
            InputActions.mouseClickOnItem(analogPanelObj.getRadioButton("Voltage"))
            for i in range(len(listOfNumerFields)):
                try:
                    if waitForObject(analogPanelObj.getNumericField(listOfNumerFields[i])).value == listOfDefaultValues[i]:
                        test.passes("PASS", "Value of " + listOfNumerFields[i] + " numeric field is set to default.")
                    else:
                        test.fail("FAIL", "Value of " + listOfNumerFields[i] + " numeric field is not set to default.")
                except LookupError as lue:
                    test.fails("FAIL", str(lue))
        else:
            test.fail("FAIL", "Not in internal mode, no voltages present.")

    @classmethod
    def saveGrayFiles(cls, button, filePath):
        """
        This method saves Gray xml dfu files to provided location
        @radioButton name of the radio button
        @location location to save file
        @return no return

        Usage:
        PanelOperation.saveGrayFiles(button, filePath)
        """
        programAndSaveObj = ProgramAndSave()
        informationShellObj = InformationShell()
        InputActions.mouseClickOnItem(programAndSaveObj.getCTabItem())
        InputActions.mouseClickOnItem(programAndSaveObj.getRadioButton(button))
        InputActions.mouseClickOnItem(programAndSaveObj.getButton("SAVE"))
        snooze(3)
        try:
            chooseFile(waitForObject(":SWT"), filePath)
            snooze(3)
        except Exception as e:
            test.fail("FAIL", str(e))
        if object.exists(informationShellObj.getInformationShellButton("OK")):
            InputActions.mouseClickOnItem(informationShellObj.getInformationShellButton("OK"))

        if os.path.isfile(filePath):
            test.passes("PASS", "File saved.")
        else:
            test.fail("FAIL", "File didn't save.")

    @classmethod
    def checkSPDIFSettingsInXML(cls, xmlFilePath, configName, expectedConfigValue):
        """
        This method checks SPIDIF settings in generated XML file
        @xmlFilePath path to xml file
        @configName configuration name
        @expectedConfigValue expected value of configuration
        @return no return

        Usage:
        PanelOperation.checkSPDIFSettingsInXML(xmlFilePath, "categoryCode", "GENERAL")
        """
        audioConfiguration = None
        spdifConfiguration = None
        tree = ET.parse(xmlFilePath)
        root = tree.getroot()
        for child in root:
            if str(child.tag) == "audioConfiguration":
                audioConfiguration = child

        for audioConfig in audioConfiguration:
            if str(audioConfig.tag) == "spdifConfiguration":
                spdifConfiguration = audioConfig

        for spdifCong in spdifConfiguration:

            if str(spdifCong.tag) == configName:
                if str(spdifCong.text) == expectedConfigValue:
                    test.passes("PASS", str(spdifCong.tag) + " has a correct value.")
                else:
                    test.fail("FAIL", str(spdifCong.tag) + " does not have a correct value.")

    @classmethod
    def saveDFUImage(cls, option, fileName):
        """
        This method is for saving DFU Image.

        @param option [string]: name of Radio Button option of 'Choose where the configuration will be stored:'
        @param fileName [string]: name of saved file
        @return [bool]: True if control state is saved

        Usage:
        optionRealName = ProgramAndSave().getRadioButton("DFU Image for Simulated OTP on External Flash")
        nameOfFile = "DFU_Image"
        PanelOperation.saveDFUImage(optionRealName, nameOfFile)

        NOTE:
        This method has no optional parameters.
        """
        try:
            programAndSaveObj = ProgramAndSave()
            snooze(0.5)
            InputActions.mouseClickOnItem(programAndSaveObj.getRadioButton(option))
            InputActions.mouseClickOnItem(programAndSaveObj.getButton("SAVE"))
            snooze(2)
            filePath = os.getcwd()
            filePath = os.path.dirname(filePath) + os.sep + "shared" + os.sep + "testdata"
            snooze(0.5)
            chooseFile(waitForObject(":SWT"), filePath + os.sep + fileName + ".dfu")
            return True
        except LookupError:
            test.fail("FAIL", "Couldn't save DFU Image for '" + option + "'.")
            return False

    @classmethod
    def selectMultipleWidgets(cls, panel, widgetList):
        """
        This method is used for selecting multiple widgets from Panel Editor area.

        @param widgetList [list]: each element of the list is a list that contains: widgets name and ControlID
        @param panel [string]: the name of the panel on which the widgets are to be selected
        @return no return

        Usage:
        panel = "Blank.panel"
        widgetList = [["Button", "button_0"], ["Rounded Button", "rounded_button_0"]]
        PanelOperation.selectMultipleWidgets(panel, widgetList)
        """
        panelEditorObj = PanelEditor(panel)
        InputActions.mouseClickOnItem(panelEditorObj.getRoot())
        keyPress("<Shift>")
        for i in range(len(widgetList)):
            InputActions.mouseClickOnItem(panelEditorObj.getWidget(widgetList[i][0], widgetList[i][1]))
            snooze(0.5)
        keyRelease("<Shift>")

    @classmethod
    def calculateWigdetsOrder(cls, panel, widgetList):
        """
        This method is used for calculating the "order" between two Palette items (widgets, container)
        The "order" is determined by two values:
        The first value represents the difference between Position X value of the Palette item
        The second value represents the difference between Position Y value of the Pelette item

        @param panel [string]: the name of the panel on which the widgets are
        @param widgetList [list]: each element of the list is a list that contains: widgets name and ControlID
        @return widgetsOrder [list]: contains the values that determine the widgets order

        Usage:
        panel = "Blank.panel"
        widgetList = [["Button", "button_0"], ["Rounded Button", "rounded_button_0"]]
        PanelOperation.calculateWigdetsOrder(panel, widgetList)
        """
        panelEditorObj = PanelEditor(panel)
        widgetsPositionValue = []
        widgetsOrder = []
        snooze_time = 0.5
        row = 0
        # click on empty Panel Editor Area
        InputActions.mouseClickOnItem(panelEditorObj.getRoot())
        for i in range(len(widgetList)):
            test.log("Select widget and read its Position X and Position Y values")
            # need to double click on widget because I need to open the properties tab
            InputActions.mouseDoubleClickOnItem(panelEditorObj.getWidget(widgetList[i][0], widgetList[i][1]))

            # need to click twice because the row will not be selected on MAC if clicked only once, the nativeType command will not work
            InputActions.mouseClickOnItem(WidgetProperties(widgetList[i][0]).getTableViewCellByPosition(0, 0))
            InputActions.mouseClickOnItem(WidgetProperties(widgetList[i][0]).getTableViewCellByPosition(0, 0))
            positionX = WidgetProperties(widgetList[i][0]).getTextField("Position X")
            positionY = WidgetProperties(widgetList[i][0]).getTextField("Position Y")
            while True:
                try:
                    if object.exists(positionX) and object.exists(positionY):

                        # the Position X and Position Y values are visible inside the Properties tab
                        try:
                            positionXValue = waitForObject(WidgetProperties(widgetList[i][0]).getTextField("Position X")).characters
                        except LookupError as lue:
                            test.fail("FAIL", "Can not find " + str(lue))

                        test.log(str(widgetList[i][0]) + " Position X value: " + str(positionXValue))
                        try:
                            positionYValue = waitForObject(WidgetProperties(widgetList[i][0]).getTextField("Position Y")).characters
                        except LookupError as lue:
                            test.fail("FAIL", "Can not find " + str(lue))

                        test.log(str(widgetList[i][0]) + " Position Y value: " + str(positionYValue))

                        test.log("Store these values in a list called widgetsPositionValue")
                        # so each element of the widgetsPositionValue is a list containing Position X and Position Y values for a widget
                        widgetsPositionValue.append([float(str(positionXValue)), float(str(positionYValue))])
                        break
                    else:
                        # the Position X and Position Y values are not visible
                        nativeType("<Down>")
                        snooze(0.1)
                    row += 1
                    snooze(snooze_time)
                except LookupError as lue:
                    test.fail("FAIL", "Can not find " + str(lue))

            # close the Properties tab because when selecting the next widget,
            # the tab displays the row number which was displayed for previous widget
            InputActions.closeTabOnMouseClick(widgetList[i][0] + " Properties")
            snooze(snooze_time)

        test.log("Since the Properties tab was closed, open it")
        InputActions.mouseClickOnItem(panelEditorObj.getRoot())
        InputActions.activateMenuItem("Window->Show View->Properties")
        snooze(snooze_time)

        test.log("Iterate through widgetsPositionValue and populate the widgetsOrder list")
        for i in range(len(widgetsPositionValue)):
            test.log(str(widgetsPositionValue[i]))
            widgetsOrder.append(widgetsPositionValue[0][i] - widgetsPositionValue[1][i])
        return widgetsOrder

    @classmethod
    def chooseWidgetContainerContextMenuOption(cls, panel, item, option):
        """
        Used for choosing a context menu option ("Cut", "Copy", "Paste", "Delete", "Autosize container") for a widget or a container from Panel Editor area

        @param panel [string]: name of the panel
        @param item [list]: contains a widget/container name and its ControlID
        @param option [string]: name of option from context menu (Cut, Copy, Paste etc.)

        Usage:
        panel = "Blank.panel"
        item = panelEditorObj.getContainer("Blank Container", "blank_container_0")
        PanelOperation.chooseWidgetContainerContextMenuOption(panel, item, "Delete")
        """
        contextMenuList = ["Cut", "Copy", "Paste", "Delete", "Autosize container"]
        panelEditorObj = PanelEditor(panel)
        if option in contextMenuList:
            try:
                snooze(0.5)
                InputActions.mouseClickOnItem(item, "right")
                snooze(0.5)
                activateItem(waitForObjectItem(panelEditorObj.getContextMenu(), option))
            except LookupError:
                test.fail("FAIL", "Couldn't " + option + " '" + item[0] + "'.")
        else:
            test.fail("FAIL", "There is no such option in the context menu.")
            snooze(1)

    @classmethod
    def dragAndDropPanelAreaItem(cls, source_object, sx, sy, target_object, tx, ty):
        """
        It begins by initiating a drag on the source_object widget starting at position sx and sy
        (in the source_object widget's coordinates), and then it does the drop on the target_object
        widget at position tx and ty (in the target_object widget's coordinates).
        If sx, sy and tx, ty are omitted, then the respectively center of the object is taken.

        @param source_object [string] name of object we want drag and drop
        @param sx [int] position on x axis of object (widget, container) we want to drop
        @param sy [int] position on y axis of object (widget, container) we want to drop
        @param target_object [string] name of object (container, panel) that we want to drop onto
        @param tx [int] position on x axis of the object (container, panel) we want to drop  onto
        @param ty [int] position on y axis of the object (container, panel) we want to drop onto
        @return no return

        Usage:
        source_object = panelEditorObj.getWidget("Button", "button_0")
        target_object = panelEditorObj.getContainer("Blank Container", "blank_container_0")
        PanelOperation.dragAndDropPanelAreaItem(source_object, 5, 5, target_object, 50, 50)
        """
        try:
            movingObject = waitForObject(source_object)
        except LookupError:
            test.fail("FAIL", "Can no find object: " + source_object)
        try:
            destination = waitForObject(target_object)
        except LookupError:
            test.fail("FAIL", "Can no find object: " + target_object)

        InputActions.mouseClickOnItem(source_object)
        snooze(1)
        dragAndDrop(movingObject, sx, sy, destination, tx, ty, DnD.DropMove)
        snooze(0.3)

    @classmethod
    def checkIfRoundedButtonIsEnabled(cls, roundedButtonRealName, state=True):
        """
        This method checks if rounded button is enabled

        @param roundedButtonRealName [string] rounded button real name
        @param state [bool] state equals True for positive or False for negative scenario

        Usage:
        PanelOperation.checkIfRoundedButonIsEnabled(roundedbutton)
        PanelOperation.checkIfRoundedButonIsEnabled(roundedbutton, False)
        """

        try:
            roundedObj = waitForObject(roundedButtonRealName)
            if state:
                if roundedObj.model.enabled == False:
                    test.fail("FAIL", "Rounded button" + roundedButtonRealName + "is disabled.")
                else:
                    test.passes("PASS", "Rounded button" + roundedButtonRealName + " is enabled.")
            else:
                if roundedObj.model.enabled == False:
                    test.passes("PASS", "Rounded button" + roundedButtonRealName + "is disabled.")
                else:
                    test.fail("FAIL", "Rounded button" + roundedButtonRealName + " is enabled.")
        except Exception as e:
            test.fail("FAIL", str(e))
    @classmethod
    def checkIfRoundedButtonIsHighlighted(cls, roundedButtonRealName, state=True):
        """
        This method checks if rounded button is highlighted

        @param roundedButtonRealName [string] rounded button real name
        @param state [bool] state equals True for positive or False for negative scenario

        Usage:
        PanelOperation.checkIfRoundedButtonIsHighlighted(roundedbutton)
        PanelOperation.checkIfRoundedButtonIsHighlighted(roundedbutton, False)
        """

        try:
            roundedObj = waitForObject(roundedButtonRealName)
            if state:
                if roundedObj.model.color.type == 'Blue':
                    test.passes("PASS", roundedButtonRealName + " is highlighted.")
                else:
                    test.fail("FAIL", roundedButtonRealName + " is not highlighted.")
            else:
                if roundedObj.model.color.type == 'Blue':
                    test.fail("FAIL", roundedButtonRealName + " is highlighted.")
                else:
                    test.passes("PASS", roundedButtonRealName + " is not highlighted.")
        except Exception as e:
            test.fail("FAIL", str(e))

    @classmethod
    def checkCheckBoxIfNotChecked(cls, checkBoxRealName, state=True):
        """
        This method checks check box if not checked

        @param checkBoxRealName [string] check box real name
        @param state [bool] True for checking and False for unchecking
        Usage:
        PanelOperation.checkCheckBoxIfNotChecked(AFSPDIF().getCheckBox("chbKeepAlive"))
        """
        try:
            selected = waitForObject(checkBoxRealName).selected
            if state:
                if not selected:
                    InputActions.mouseClickOnItem(checkBoxRealName)
                else:
                    test.log("Check box already checked.")
            else:
                if selected:
                    InputActions.mouseClickOnItem(checkBoxRealName)
                else:
                    test.log("Check box already unchecked.")

        except Exception as e:
            test.fail("FAIL", str(e))

    @classmethod
    def checkColorOfRoundedButton(cls, roundedButton, color, state=True):
        """
        This method checks color of rounded button

        @param roundedButton [string] rounded button model name
        @param color [bool] color of rounded button

        Usage:
        PanelOperation.checkColorOfRoundedButton("pinB5", "Blue: #5aaafa")
        """

        try:
            if str(waitForObject(roundedButton).colorproperty.value) == color:
                test.passes("PASS", roundedButton + " is " + color)
            else:
                test.fail("FAIL", roundedButton + " is not " + color)
                snooze(1)
        except LookupError:
            test.fail("FAIL", roundedButton + " is not found")

class PaletteOperation:

    @classmethod
    def fieldFilter(cls, widget):

        """
        Using filter field in palette window.

        usage example:

        widget1 = "Diagram Image"
        PaletteOperation.fieldFilter(widget1)

        """
        machine = platform.system()
        paletteObj = Palette()
        try:
            try:
                """Clicking twice because it doesn't work on Mac if you click once"""
                mouseClick(waitForObject(paletteObj.getTextFieldFilter()), 5, 5, 0, Button.Button1)
                mouseClick(waitForObject(paletteObj.getTextFieldFilter()), 5, 5, 0, Button.Button1)
            except LookupError:
                test.fail("FAIL", "Can no find object " + paletteObj.getTextFieldFilter())
            if "Darwin" in machine:
                nativeType("<Command+a>")
            else:
                nativeType("<Ctrl+a>")
            nativeType("<Delete>")
            mouseClick(waitForObject(paletteObj.getTextFieldFilter()), 5, 5, 0, Button.Button1)
            type(waitForObject(paletteObj.getTextFieldFilter()), widget)

        except LookupError:
            test.fail("FAIL", "Unable to click or type('" + widget + "')on filter field in palette window")
