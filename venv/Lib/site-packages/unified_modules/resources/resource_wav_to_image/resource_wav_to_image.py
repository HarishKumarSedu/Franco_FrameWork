#!/usr/bin/env python
"""
@brief
Resource library for converting wav files to image
@Description:
This resource can be used to converts stereo wave files to mono and then to image using pydub library

"""
from unified_modules.test_support.testresults import TestResults

import matplotlib.pyplot as plt
import numpy as np
import wave
import sys
import os
import glob
import matplotlib
matplotlib.use("AGG")
from pydub import AudioSegment

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ResourceWavToImgError(Exception):
    pass


class ResourceWavToImg(object):

    def __init__(self):
        self.log = logging.getLogger(ResourceWavToImg.__name__)
        self.results = TestResults()

    def convert_wave_to_img(self, input_wavefile, scale=False, scale_factor=5):
        if str(input_wavefile) == '':
            return False
        sound = AudioSegment.from_wav(input_wavefile)
        # convert Stereo to mono
        sound = sound.set_channels(1)
        mono_filename = str(input_wavefile)[:-4] + "_mono.wav"
        sound.export(mono_filename, format="wav")

        spf = wave.open(mono_filename, "r")

        # Extract Raw Audio from Wav File

        signal = spf.readframes(-1)
        signal = np.frombuffer(signal, np.int16)
        fs = spf.getframerate()

        # If Stereo
        if spf.getnchannels() == 2:
            print("Supports only mono files")
            sys.exit(0)

        Time = np.linspace(0, len(signal) / fs, num=len(signal))
        head, tail = os.path.split(input_wavefile)
        fig = plt.figure(0)
        plt.title(str(tail)[:-4])

        if (scale):
            xmin, xmax = plt.xlim()
            ymin, ymax = plt.ylim()

            plt.xlim(xmin * scale_factor, xmax * scale_factor)
            # plt.ylim(ymin * scale_factor, ymax * scale_factor)

        plt.plot(Time, signal)
        plt.savefig(input_wavefile[:-4] + '.png', dpi=fig.dpi)
        plt.clf()

        return True

if __name__ == '__main__':
    if "--unittest" in sys.argv:

        class ResourceWavToImgTest(ResourceWavToImg):
            def __init__(self):
                super(ResourceWavToImgTest, self).__init__()

            def test_wavetoimg_conversion(self):
                convert_wave_to_img(self)

        res_wavetoimg_test = ResourceWavToImgTest()
        res_wavetoimg_test.test_wavetoimg_conversion()

    else:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support


        class ResourceWavToImgCli(ResourceWavToImg, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                ResourceWavToImgCli.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, ResourceWavToImgCli)


        RUN = ResourceWavToImgCli()
