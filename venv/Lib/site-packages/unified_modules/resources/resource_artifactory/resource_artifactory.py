import os
import sys
import re
import glob
import shutil
import platform
import zipfile
import json
import fnmatch
from artifactory import ArtifactoryPath, _ArtifactoryFlavour

try:
    import unified_modules.test_support.testlogger as logging
except ImportError:
    import logging


class ArtifactoryError(Exception):
    """Exception class for Resource Artifactory"""
    pass


class Artifactory(object):

    def __init__(self):
        """
        @param tag - Name of the resource. This is also the logger prefix.
        @param verbose - display all the logs
        @param configs - configuration details dictionary to configure this resource library.
                         Example: usb port, path to an exe file.
        """
        self.log = logging.getLogger(Artifactory.__name__)
        self.username = None
        self.password = None
        self.auth_token = None
        self.curl_path = None
        self.download_artifactory_path = None
        self.download_dir = None
        self.upload_artifactory_path = None
        self.upload_dir = None
        self.platform = platform.system()
        self.build_url = ""

    def set_config_details(self, config):
        self.username = os.path.expandvars(config['username'])
        self.password = os.path.expandvars(config['password'])
        self.auth_token = (self.username, self.password)
        self.curl_path = os.path.expandvars(config['curl_path'])
        self.download_artifactory_path = os.path.expandvars(config['bsp_path'])
        self.download_dir = os.path.expandvars(config['download_dir'])
        self.upload_artifactory_path = os.path.expandvars(config['upload_artifactory_path'])
        self.upload_dir = os.path.expandvars(config['upload_dir'])

    def construct_curl_cmd(self, url, last_modified=False, folder_name=None):
        """
        Construct curl command for the given url

        @param url: [str] Artifactory url
        @param last_modified: [bool] To get last modified dir url
        @param folder_name: [str] folder name in artifactory path
        @return: [str] curl command string
        """
        if "api/storage" not in url:
            _url_arr = url.split("artifactory")
            _url = _url_arr[0] + "artifactory" + "/api/storage" + _url_arr[1]
        else:
            _url = url
        if folder_name:
            _url = "%s/%s" % (_url, folder_name)
        if last_modified:
            _url = "%s?lastModified" % _url
        if self.platform == "Windows":
            curl_cmd = r"%s -k -u %s:%s %s" % (self.curl_path,
                                               self.username,
                                               self.password,
                                               _url)
        if self.platform == "Darwin":
            curl_cmd = r"curl -u %s:%s %s" % (self.username,
                                              self.password,
                                              _url)
        self.log.info("Curl command: %s" % curl_cmd)
        return curl_cmd

    def exc_curl(self, url, last_modified=False, folder_name=None):
        """
        Execute given artifactory url with curl command

        @param url: [str] Artifactory url
        @param last_modified: [bool] To get last modified dir url
        @param folder_name: [str] folder name in artifactory path
        @return: [json] curl command output
        """
        curl_cmd = self.construct_curl_cmd(url, last_modified=last_modified, folder_name=folder_name)
        curl_op = os.popen(curl_cmd).read()
        self.log.debug("Curl command output: %s" % curl_op)
        return curl_op

    def get_child_json_list(self, url):
        """
        Gets the list of children in JSON format

        @param url: [str] Artifactory url
        @return: [list] list of JSONs
        """
        curl_op = self.exc_curl(url)
        if ('"status" : 404' in curl_op):
            self.log.error("Curl command is not properly executed")
        else:
            curl_op_dict = json.loads(curl_op)
            try:
                child_json_list = curl_op_dict["children"]
            except Exception as e:
                child_json_list = []
                self.log.warning("No children present")
        return child_json_list

    def is_child_exists(self, url, child_name):
        """
        Verifies whether the given child exists in the given Artifactory url.

        @param url: [str] Artifactory url
        @param child_name: [str] file name
        @return: [boolean] True if child exists otherwise None
        """
        child_list = self.get_child_json_list(url)
        for child in child_list:
            if child_name in child["uri"]:
                return True

    def get_last_updated_build_folder(self, artifactory_path=None):
        """
        Gets the last updated build folder
        @return Returns the folder name of the latest modifed if modified otherwise None.
        """
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path

        self.build_folder = None
        out_curl = self.exc_curl(artifactory_path, last_modified=True)
        curl_arr = out_curl.split("\n")
        for elem in curl_arr:
            if elem.startswith('  "uri"'):
                self.build_folder = elem.split(r'/')[-2]
                break
        self.log.info("Build folder : %s" % self.build_folder)
        return self.build_folder

    def get_specific_build_folder(self, artifactory_path=None, build_number="latest"):
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path

        self.build_folder = None

        _url_arr = artifactory_path.split("artifactory")
        _url = _url_arr[0] + "artifactory" + "/api/storage" + _url_arr[1]

        if build_number == 'latest':
            return self.get_last_updated_build_folder(artifactory_path)
        if self.platform == "Windows":
            curl_cmd = r"%s -k -u %s:%s %s" % (self.curl_path,
                                                            self.username,
                                                            self.password,
                                                            _url)
        out_curl = os.popen(curl_cmd).read()
        curl_arr = out_curl.split("\n")
        for elem in curl_arr:
            if '"uri"' in elem and build_number in elem:
                self.build_folder = elem.split(r'/')[-1].split('"')[0]
                break
        self.log.info("Build folder : %s" % self.build_folder)
        return self.build_folder

    def get_artifactory_dir_url(self, artifactory_path=None,
                                last_modified=True, folder_name=None):
        """
        Gets the last modified directory from artifactory.
        @param artifactory_path: [str] artifactory path
        @param last_modified: [bool] To get last modified dir url
        @param folder_name: [str] folder name in artifactory path
        @return: Returns the last modified directory.
        """
        dir_url = None
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path
        out_curl = self.exc_curl(artifactory_path, last_modified=last_modified, folder_name=folder_name)
        if ('"status" : 404' in out_curl):
            self.log.warning("Could not find path: %s" % artifactory_path)
        else:
            out_curl_dict = json.loads(out_curl)
            if last_modified:
                file_url = out_curl_dict["uri"]
                file_url = file_url.replace('/api/storage', '')
                last_updated_file = file_url.split(r'/')[-1]
                dir_url = file_url.replace('/' + last_updated_file, '')
                dir_url = dir_url.replace('"', '')
            else:
                dir_url = out_curl_dict["uri"]
                dir_url = dir_url.replace('/api/storage', '')
        self.log.info("Latest artifactory build url: %s" % dir_url)
        self.build_url = dir_url
        return dir_url

    def download_artifact(self, artifactory_path=None, download_dir=None,
                          download_all=True, files=[], ignore_exts=[],
                          file_regex='', installed_version=None,
                          last_modified=True, folder_name=None, latest_file=False):
        """
        Downloading the artifacts from Artifactory path mentioned in resource config xml file.
        @param artifactory_path - Artifactory base path
        @param build_folder - Specific build version.
        @param download_all - If True, downloads all the files from the Artifactory path
         excluding optional extensions mentioned in ignore_exts param.
                              If False, list the files in diles param
        @param files - List of files to download, need to set download_all param to False
        @param ignore_exts - List of extensions that can be ignored from downloading.
        @param file_regex - optional - Pattern to be passed to slect what files to be downloaded.
                            If this option chosen, then download_all should be passed as False
        @param installed_version - optional - Version of software if already installed(
        Skips downloading the file if the file version matches with the installed version)
        @param last_modified [bool] Download artifact from last modified folder
        @param folder_name [bool] Download artifact from specific folder
        """
        file_versions = []
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path
        if download_dir is None:
            download_dir = self.download_dir

        self.log.info("Downloading artifact")
        ignore = False
        _artifactory_url = self.get_artifactory_dir_url(artifactory_path, last_modified=last_modified,
                                                        folder_name=folder_name)

        if _artifactory_url is None:
            return False
        if download_all:
            # Get all files
            path = ArtifactoryPath(_artifactory_url, verify=False, auth=self.auth_token)
            if ignore_exts:
                ignore = True
                if not isinstance(ignore_exts, list):
                    ignore_exts = [ignore_exts]
            for f in path:
                fname = str(f).split("/")[-1]
                if ignore and str(os.path.splitext(fname)[1]) in ignore_exts:
                    continue
                _path = ArtifactoryPath(f, verify=False, auth=self.auth_token)
                file_versions.append(self._download_file(_path, download_dir, fname, installed_version))
        elif files:
            if not isinstance(files, list):
                files = [files]
            for file_name in files:
                if not self.is_child_exists(_artifactory_url, file_name):
                    self.log.info("Given artifact doesn't exists in the current path,"
                                  "Fetching it from one folder path above")
                    last_updated_file = _artifactory_url.split(r'/')[-1]
                    _artifactory_url = _artifactory_url.replace('/' + last_updated_file, '')
                _artifactory_file_url = _artifactory_url + "/" + file_name
                _path = ArtifactoryPath(_artifactory_file_url, verify=False, auth=self.auth_token)
                file_versions.append(self._download_file(_path, download_dir, file_name, installed_version))
        elif file_regex:
            path = ArtifactoryPath(_artifactory_url, verify=False, auth=self.auth_token)
            files = []
            for f in path.glob("*.*"):
                filename = str(f).split("/")[-1]
                filename = str(filename)
                result = re.match(file_regex, filename)
                if result:
                    if latest_file:
                        files.append(f)
                    else:
                        _path = ArtifactoryPath(f, verify=False, auth=self.auth_token)
                        file_versions.append(self._download_file(_path, download_dir, filename, installed_version))
            if latest_file:
                _path = ArtifactoryPath(files[-1], verify=False, auth=self.auth_token)
                filename = str(files[-1]).split("/")[-1]
                filename = str(filename)
                file_versions.append(self._download_file(_path, download_dir, filename, installed_version))
        else:
            self.log.error("Please provide the required file names as list to download")
        return file_versions

    def _download_file(self, path, download_dir, filename, installed_version):
        """
        Download file if the file version if not matching with the installed version

        @param path: [str] Artifactory Path
        @param download_dir: [str] Download directory path
        @param filename: [str] latest file name in artifactory path
        @param installed_version: [str] Installed version of file
        @return: [str] latest file version
        """
        file_version = re.search(r"\d+[.]\d+[.]\d+[.]\d+[.]\d+", str(filename))
        latest_scs_installed = False
        if file_version and installed_version:
            file_version = file_version.group()
            latest_scs_installed = file_version == installed_version
        if installed_version is None or not latest_scs_installed:
            self.log.info("Downloading file %s", filename)
            with path.open() as fd:
                with open(r"%s/%s" % (download_dir, filename), "wb") as out:
                    out.write(fd.read())
        else:
            self.log.info("Latest File %s version already installed so not downloading it."
                          % file_version)
        return str(file_version)

    def download_artifact_folder(self, artifactory_path=None, download_dir=None):
        """
        Downloading the artifacts from Artifactory path mentioned in resource config xml file.
        @param artifactory_path - Artifactory base path
        @param build_folder - Specific build version.
        """
        file_versions = []
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path
        if download_dir is None:
            download_dir = self.download_dir

        self.log.info("Downloading artifact")
        _artifactory_url = self.get_artifactory_dir_url(artifactory_path, last_modified=False,
                                                        folder_name=None)

        if _artifactory_url is None:
            return False

        path = ArtifactoryPath(_artifactory_url, verify=False, auth=self.auth_token)
        for f in path.glob("**/*.*"):
            file_path = str(f).replace(_artifactory_url, '')
            head, tail = os.path.split(file_path)
            if not os.path.exists(f"{download_dir}/{head}"):
                os.makedirs(f"{download_dir}/{head}")
            file_versions.append(self._download_file(f, download_dir, file_path, None))
        return file_versions

    def download_artifact_folder_as_archive(self, artifactory_path=None, download_dir=None, last_modified=False, archive_type='zip'):
        """
        Downloading the artifacts from Artifactory path mentioned in resource config xml file.
        @param artifactory_path - Artifactory base path
        @param download_dir Download artifact folder to a local filesystem as archive
        @param last_modified [bool] Download artifact from last modified folder
        @param archive_type [string] Type of archive(supports zip/tar/tar.gz/tgz)
        Allows to specify archive type and request checksum for the folder.
        """
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path
        if download_dir is None:
            download_dir = self.download_dir

        self.log.info("Downloading artifact")
        _artifactory_url = self.get_artifactory_dir_url(artifactory_path, last_modified=last_modified,
                                                        folder_name=None)

        if _artifactory_url is None:
            return False

        path = ArtifactoryPath(_artifactory_url, verify=False, auth=self.auth_token)
        with path.download_folder_archive(archive_type=archive_type, check_sum=False) as archive:
            with open(download_dir + '.' + archive_type, "wb") as out:
                out.write(archive.read())

    def upload_artifact(self, artifactory_path=None, upload_dir=None, files=[], auth_token=None):
        """
        Upload artifacts to the target artifactory path specified in resource config xml
        @param files - Name of the files to upload
        @raises Exception saying File doesn't exists in a given dir.
        """
        if artifactory_path is None:
            artifactory_path = self.upload_artifactory_path
        if upload_dir is None:
            artifactory_path = self.upload_dir
        if auth_token is None:
            auth_token = self.auth_token
        path = ArtifactoryPath(artifactory_path, verify=False, auth=auth_token)
        try:
            path.mkdir()
        except Exception:
            pass
        if os.path.isdir(upload_dir):
            if files == []:
                self.log.warning("No files to upload")
            else:
                for file in files:
                    file_path=os.path.join(upload_dir, file)
                    if os.path.exists(file_path):
                        self.log.info("Uploading file %s" % file_path)
                        path.deploy_file(file_path)
                    else:
                        self.log.error("File %s doesn't exists in a given dir %s" % (file, upload_dir))
        else:
            self.log.error("%s directory doesn't exists" % upload_dir)

    def move_artifact(self, source_art_path=None, dest_art_path=None, auth_token=None):
        '''
        move artifact from one folder to another in JFrog
        @ source_art_path: source directory on artifactory
        @ dest_art_path: destination directory on artifactory
        '''
        if auth_token is None:
            auth_token = self.auth_token
        source = ArtifactoryPath(source_art_path, verify=False, auth=auth_token)
        dest = ArtifactoryPath(dest_art_path, verify=False, auth=auth_token)
        source.move(dest)

    def copy_artifact(self, source_art_path=None, dest_art_path=None, auth_token=None):
        '''
        copy artifact from one folder to another in JFrog
        @ source_art_path: source directory on artifactory
        @ dest_art_path: destination directory on artifactory
        '''
        if auth_token is None:
            auth_token = self.auth_token
        source = ArtifactoryPath(source_art_path, verify=False, auth=auth_token)
        dest = ArtifactoryPath(dest_art_path, verify=False, auth=auth_token)
        source.copy(dest)

    def get_files_from_artifactory(self, artifactory_path=None):
        """
        Get files from artifactory path
        @param path - Artifactory path
        @return file names in the artifactory path as a list.
        """
        self.files_list = []
        if artifactory_path is None:
            artifactory_path = self.download_artifactory_path
        path = ArtifactoryPath(artifactory_path, verify=False, auth=self.auth_token)
        for f in path.glob("*.*"):
            fname = str(f).split("/")[-1]
            self.files_list.append(fname)
        return self.files_list

    def get_file_names(self, path=None):
        """
        Get the files list in a given path
        @param path - path
        @return the list of files in a given path
        """
        if path is None:
            path = self.download_dir
        return os.listdir(path)

    def remove_files(self, path=None):
        """
        Removes the files in a path
        @param path - path
        """
        if path is None:
            path = self.download_dir
        files = glob.glob(path + os.sep + "*.*")
        for f in files:
            os.remove(f)

    def create_dir(self, dir_path=None):
        """
        Creates the directory if not exists
        :param dir: dir to create
        :return: None
        """
        if dir_path is None:
            dir_path = self.download_dir
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)

    def rename_files(self, target_name, files=[], files_dir=None):
        """
        Rename the files.
        :param target_name:
        :param files:
        :param files_dir:
        :return:
        """
        if files_dir is None:
            files_dir = self.download_dir
        if files == []:
            files = self.get_file_names(path=files_dir)
        cwd = os.getcwd()
        os.chdir(files_dir)
        for f in files:
            if f.startswith(target_name + "-") and re.search(".exe$", f):
                os.rename(f, '.'.join([target_name, "exe"]))
            # Don't rename mac dmg file
            if f.startswith(target_name + "-") and re.search(".dmg$", f):
                os.rename(f, '.'.join([target_name, "dmg"]))
        os.chdir(cwd)

    def download_firmware(self, release_path):
        """
        Retrieve latest firmware build
        :param release_path: Path to firmware release folder
        :return: release_name
        """

        release_name = self.get_last_updated_build_folder(release_path)
        self.download_artifact(release_path, '.')
        return release_name

    def unzip_firmware(self, firmware_zip_file, destination):
        try:
            zip_ref = zipfile.ZipFile(firmware_zip_file, 'r')
            zip_ref.extractall('./%s' % destination)
            zip_ref.close()

            self.log.info("File '%s' unzipped to directory: '%s'" % (firmware_zip_file, os.path.join(
                os.getcwd(), destination)))
        except zipfile.BadZipfile:
            self.log.warning("Error unzipping file: " + firmware_zip_file)

    def compile_pattern(self, pattern):
        return re.compile(fnmatch.translate(pattern), re.IGNORECASE).fullmatch
    _ArtifactoryFlavour.compile_pattern=compile_pattern


if __name__ == "__main__":
    if "--unittest" not in sys.argv:
        # Create and start as an interactive command line
        import unified_modules.test_support.cli_support as cli_support

        class ArtifactoryCli(Artifactory, cli_support.CliOptions):
            """Extend the existing class with multiple inheritance,
            the command line and interactive is added
            without changing the implementation of the class"""

            def __init__(self, *args, **kwargs):
                Artifactory.__init__(self, *args, **kwargs)
                cli_support.CliOptions.__init__(self, Artifactory)

        RUN = ArtifactoryCli()
    else:
        from unified_modules.test_support.testresults import TestResults

        class ArtifactoryUnitTest(Artifactory):

            download_artifact_path = \
                r"https://aus-art-prod-01.ad.cirrus.com/artifactory/Aus_Generic_SQA_Local/" \
                r"scs_repo/sqa_builds/win"

            def __init__(self):
                self.results = TestResults()
                self.log = logging.getLogger('ArtifactoryUnitTest')
                self.username = "sgorle"
                self.password = "APJe6o6v2tLcwSLTFEfXX5c5c2DKEQfSCokKT"
                self.auth_token = (self.username, self.password)
                self.curl_path = r"C:\curl\src\curl.exe"
                self.download_dir = r"D:\Frameworks\UnifiedTestModules\Jenkins\res_art"

            def test_download_artifacts(self):
                expected_files = ["SoundClearStudio.exe", "linkclient-1.4.5-py2-none-any.whl"]
                self.results.set_test_title('test_download_all_artifacts')
                self.log = self.results.log

                #Clean the download_dir
                self.remove_files()
                self.download_artifact(artifactory_path=self.download_artifact_path)
                downloaded_files = self.get_file_names()
                for file in expected_files:
                    self.results.assert_true(file in downloaded_files
                                            , "Expected file %s is downloaded" % file)

                self.results.set_test_title('test_download_wheel_file')
                # Clean the download_dir
                self.remove_files()
                self.download_artifact(artifactory_path=self.download_artifact_path,
                                       download_all=False,
                                       files=["linkclient-1.4.5-py2-none-any.whl"])
                downloaded_files = self.get_file_names()
                self.results.assert_equal(expected_files[1], downloaded_files[0]
                                        , "Expected file %s is downloaded" % expected_files[1])

                self.results.set_test_title('test_download_excluding_exe_files')
                # Clean the download_dir
                self.remove_files()
                self.download_artifact(artifactory_path=self.download_artifact_path,
                                       download_all=True,
                                       ignore_exts=["exe"])
                downloaded_files = self.get_file_names()
                self.results.assert_equal(expected_files[1], downloaded_files[0]
                                         , "Expected file %s is downloaded" % expected_files[1])
                # Clean the download_dir
                self.remove_files()

                self.results.report_result_to_tf()

        test_download_artifacts = ArtifactoryUnitTest()
        test_download_artifacts.test_download_artifacts()
