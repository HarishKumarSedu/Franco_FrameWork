"""
Module to generate Meson build file
"""


class MesonFileGenerator(object):
    __instance = None

    @staticmethod
    def get_instance(*args, **kwargs):
        if MesonFileGenerator.__instance is None:
            MesonFileGenerator(*args, **kwargs)
        return MesonFileGenerator.__instance

    def __init__(self, patch_c_file_names_list, meson_build_config):
        if MesonFileGenerator.__instance is not None:
            raise Exception("This class is a singleton! Instead use get_instance() to get original instance")
        else:
            MesonFileGenerator.__instance = self
        self.patch_c_file_names_list = patch_c_file_names_list
        self.meson_build_config = meson_build_config
        self.new_line = '\n'
        self.two_new_lines = self.new_line * 2

    def generate_meson_build_file(self, meson_build_file_path):
        code = self.get_header_files()
        code += self.generate_c_files()
        code += self.get_patch_builder_block()
        code += self.get_if_block()
        code += self.get_scatter_file_block()
        code += self.get_executable_block_code()
        code += self.get_endif_block()

        with open(meson_build_file_path, 'w') as meson_file:
            meson_file.write(code)

    def get_header_files(self):
        src_dir_header_code = self.meson_build_config['main_header']
        src_dir_header_code += self.two_new_lines
        return src_dir_header_code

    def generate_c_files(self):
        src_files_block_code = ''
        src_file_template = self.meson_build_config['src_files_block']
        for c_file_name in self.patch_c_file_names_list:
            file_name_without_extension = c_file_name.split('.')[0]
            src_files_block_code += src_file_template.format(patch_name=file_name_without_extension,
                                                             path_to_patch_c_file=c_file_name)
            src_files_block_code += self.new_line
        src_files_block_code += self.two_new_lines
        return src_files_block_code

    def get_patch_builder_block(self):
        patch_builder_block = self.meson_build_config['patch_builder_block']
        patch_builder_block += self.two_new_lines
        return patch_builder_block

    def get_if_block(self):
        if_block_code = self.meson_build_config['if_block']
        if_block_code += self.two_new_lines
        return if_block_code

    def get_scatter_file_block(self):
        return self.meson_build_config['scatter_file_block']

    def get_executable_block_code(self):
        executable_block_template = self.meson_build_config['meson_build_body']
        executable_block_template = "".join(executable_block_template)
        executable_block_code = ''
        for c_file_name in self.patch_c_file_names_list:
            file_name_without_extension = c_file_name.split('.')[0]
            executable_block_code += "    # Code to generate axf for {0}".format(c_file_name)
            executable_block_code += self.new_line
            executable_block_code += executable_block_template.format(patch_name=file_name_without_extension)
            executable_block_code += self.two_new_lines

        return executable_block_code

    def get_endif_block(self):
        return self.meson_build_config['end_if_block']
